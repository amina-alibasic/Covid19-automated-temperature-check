
full_pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08005b28  08005b28  00015b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d50  08005d50  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005d50  08005d50  00015d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d58  08005d58  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000088  08005de8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08005de8  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb79  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3f  00000000  00000000  0002cc31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  0002e870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  0002f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e9d  00000000  00000000  0002ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cca6  00000000  00000000  00052de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d77da  00000000  00000000  0005fa8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00137265  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ac  00000000  00000000  001372b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b10 	.word	0x08005b10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08005b10 	.word	0x08005b10

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <main>:
  	  	  "Da li ste bili u kontaktu s nekim ko je bio pozitivan na Covid-19?"};
char* warning = "Molimo Vas da posjetite Covid ambulantu.";


int main(void)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b090      	sub	sp, #64	; 0x40
 8000e3c:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f001 fc5d 	bl	80026fc <HAL_Init>
 // SystemClock_Config();
  /* Initialize all configured peripherals */
  initUSART2(921600);
 8000e42:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 8000e46:	f001 f9b9 	bl	80021bc <initUSART2>
  MX_GPIO_Init();
 8000e4a:	f000 fbb3 	bl	80015b4 <MX_GPIO_Init>
  MX_TIM12_Init();
 8000e4e:	f000 fb25 	bl	800149c <MX_TIM12_Init>
  MX_USART2_UART_Init();
 8000e52:	f000 fb85 	bl	8001560 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e56:	f000 facf 	bl	80013f8 <MX_ADC1_Init>


  HAL_TIM_Base_Start(&htim12); //Initialize stm32 timer for DC motor
 8000e5a:	486d      	ldr	r0, [pc, #436]	; (8001010 <main+0x1d8>)
 8000e5c:	f002 fc52 	bl	8003704 <HAL_TIM_Base_Start>
  // HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);  //PB0 Start pwm  motor 100% duty cycle
   //__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 40);

  uint16_t raw;
  while(1){
	  while(!movementDetected())
 8000e60:	e003      	b.n	8000e6a <main+0x32>
	  HAL_Delay(1000);
 8000e62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e66:	f001 fcbb 	bl	80027e0 <HAL_Delay>
	  while(!movementDetected())
 8000e6a:	f000 f95f 	bl	800112c <movementDetected>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f6      	beq.n	8000e62 <main+0x2a>
	  printUSART2("Dobrodosli.\n");
 8000e74:	4867      	ldr	r0, [pc, #412]	; (8001014 <main+0x1dc>)
 8000e76:	f001 fa0f 	bl	8002298 <printUSART2>
	  printUSART2("Molimo Vas dodirnite senzor za mjerenje temperature i sacekajte da se Vasa temperatura izmjeri.\n");
 8000e7a:	4867      	ldr	r0, [pc, #412]	; (8001018 <main+0x1e0>)
 8000e7c:	f001 fa0c 	bl	8002298 <printUSART2>
	  HAL_Delay(3000);
 8000e80:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e84:	f001 fcac 	bl	80027e0 <HAL_Delay>
        raw = getADC();
 8000e88:	f000 fa9e 	bl	80013c8 <getADC>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 	  	double v = raw * 3.3 / 4096;
 8000e90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff faea 	bl	800046c <__aeabi_i2d>
 8000e98:	a353      	add	r3, pc, #332	; (adr r3, 8000fe8 <main+0x1b0>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	f7ff fb4f 	bl	8000540 <__aeabi_dmul>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	4b5b      	ldr	r3, [pc, #364]	; (800101c <main+0x1e4>)
 8000eb0:	f7ff fc70 	bl	8000794 <__aeabi_ddiv>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 	  	double Rt = 10 * v / ( 3.3 - v );
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	4b57      	ldr	r3, [pc, #348]	; (8001020 <main+0x1e8>)
 8000ec2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000ec6:	f7ff fb3b 	bl	8000540 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4614      	mov	r4, r2
 8000ed0:	461d      	mov	r5, r3
 8000ed2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ed6:	a144      	add	r1, pc, #272	; (adr r1, 8000fe8 <main+0x1b0>)
 8000ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000edc:	f7ff f978 	bl	80001d0 <__aeabi_dsub>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	f7ff fc54 	bl	8000794 <__aeabi_ddiv>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 	  	double temp = 1 / (log(Rt / 10) / 3950 + 1 / (273.15 + 25));
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4b49      	ldr	r3, [pc, #292]	; (8001020 <main+0x1e8>)
 8000efa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000efe:	f7ff fc49 	bl	8000794 <__aeabi_ddiv>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	ec43 2b17 	vmov	d7, r2, r3
 8000f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f0e:	eef0 0a67 	vmov.f32	s1, s15
 8000f12:	f003 fc3d 	bl	8004790 <log>
 8000f16:	ec51 0b10 	vmov	r0, r1, d0
 8000f1a:	a335      	add	r3, pc, #212	; (adr r3, 8000ff0 <main+0x1b8>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f20:	f7ff fc38 	bl	8000794 <__aeabi_ddiv>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	a332      	add	r3, pc, #200	; (adr r3, 8000ff8 <main+0x1c0>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff f94f 	bl	80001d4 <__adddf3>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	4939      	ldr	r1, [pc, #228]	; (8001024 <main+0x1ec>)
 8000f40:	f7ff fc28 	bl	8000794 <__aeabi_ddiv>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	e9c7 2308 	strd	r2, r3, [r7, #32]
 	  	double tempc = temp - 273.15 - 2;
 8000f4c:	a32c      	add	r3, pc, #176	; (adr r3, 8001000 <main+0x1c8>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f56:	f7ff f93b 	bl	80001d0 <__aeabi_dsub>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6a:	f7ff f931 	bl	80001d0 <__aeabi_dsub>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  	 // check if user has touched the thermistor
	  	 // no room temperature is over 30 and person's temperature is under 30
	  	 if(tempc > 30){
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <main+0x1f0>)
 8000f7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f80:	f7ff fd6e 	bl	8000a60 <__aeabi_dcmpgt>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <main+0x160>
	  	 	 printUSART2("Mjerenje ...\n");
 8000f8a:	4828      	ldr	r0, [pc, #160]	; (800102c <main+0x1f4>)
 8000f8c:	f001 f984 	bl	8002298 <printUSART2>
	  	 	 HAL_Delay(5000); // wait aprox. 5sec for sensor to measure the temperature
 8000f90:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f94:	f001 fc24 	bl	80027e0 <HAL_Delay>
	  	 }
         char res[20];
	  	 ftoa(tempc, res, 1);
 8000f98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f9c:	f7ff fd80 	bl	8000aa0 <__aeabi_d2f>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	ee00 2a10 	vmov	s0, r2
 8000fac:	f000 f9b0 	bl	8001310 <ftoa>
	  	 printUSART2("Vasa temperatura iznosi %s\n", res);
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481e      	ldr	r0, [pc, #120]	; (8001030 <main+0x1f8>)
 8000fb6:	f001 f96f 	bl	8002298 <printUSART2>
	  	 if(tempc > 36.9) { yesAnswer(); return 0;}
 8000fba:	a313      	add	r3, pc, #76	; (adr r3, 8001008 <main+0x1d0>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fc4:	f7ff fd4c 	bl	8000a60 <__aeabi_dcmpgt>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <main+0x19e>
 8000fce:	f000 f8d3 	bl	8001178 <yesAnswer>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e002      	b.n	8000fdc <main+0x1a4>

	  	 outputQuestions();
 8000fd6:	f000 f82d 	bl	8001034 <outputQuestions>
  while(1){
 8000fda:	e741      	b.n	8000e60 <main+0x28>
  }

}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3740      	adds	r7, #64	; 0x40
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	66666666 	.word	0x66666666
 8000fec:	400a6666 	.word	0x400a6666
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40aedc00 	.word	0x40aedc00
 8000ff8:	dcb5db83 	.word	0xdcb5db83
 8000ffc:	3f6b79e1 	.word	0x3f6b79e1
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	33333333 	.word	0x33333333
 800100c:	40427333 	.word	0x40427333
 8001010:	20000138 	.word	0x20000138
 8001014:	08005c3c 	.word	0x08005c3c
 8001018:	08005c4c 	.word	0x08005c4c
 800101c:	40b00000 	.word	0x40b00000
 8001020:	40240000 	.word	0x40240000
 8001024:	3ff00000 	.word	0x3ff00000
 8001028:	403e0000 	.word	0x403e0000
 800102c:	08005cb0 	.word	0x08005cb0
 8001030:	08005cc0 	.word	0x08005cc0

08001034 <outputQuestions>:


void outputQuestions(void){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	while(1){
		HAL_Delay(100);
 8001038:	2064      	movs	r0, #100	; 0x64
 800103a:	f001 fbd1 	bl	80027e0 <HAL_Delay>
		counter = 0;
 800103e:	4b37      	ldr	r3, [pc, #220]	; (800111c <outputQuestions+0xe8>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
	// first question
	printUSART2("%s\n", nextQuestion());
 8001044:	f000 f884 	bl	8001150 <nextQuestion>
 8001048:	4603      	mov	r3, r0
 800104a:	4619      	mov	r1, r3
 800104c:	4834      	ldr	r0, [pc, #208]	; (8001120 <outputQuestions+0xec>)
 800104e:	f001 f923 	bl	8002298 <printUSART2>

	// check for YES button press
	if(checkYes()) { yesAnswer(); }
 8001052:	f000 f8a7 	bl	80011a4 <checkYes>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <outputQuestions+0x2e>
 800105c:	f000 f88c 	bl	8001178 <yesAnswer>
 8001060:	e057      	b.n	8001112 <outputQuestions+0xde>

	// check for NO button press
	else if(checkNo()) {
 8001062:	f000 f8c1 	bl	80011e8 <checkNo>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d052      	beq.n	8001112 <outputQuestions+0xde>
		// second question
		printUSART2("%s\n", nextQuestion());
 800106c:	f000 f870 	bl	8001150 <nextQuestion>
 8001070:	4603      	mov	r3, r0
 8001072:	4619      	mov	r1, r3
 8001074:	482a      	ldr	r0, [pc, #168]	; (8001120 <outputQuestions+0xec>)
 8001076:	f001 f90f 	bl	8002298 <printUSART2>

		// check for YES button press
		if(checkYes()) { yesAnswer(); }
 800107a:	f000 f893 	bl	80011a4 <checkYes>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <outputQuestions+0x56>
 8001084:	f000 f878 	bl	8001178 <yesAnswer>
 8001088:	e043      	b.n	8001112 <outputQuestions+0xde>
		else if(checkNo()) {
 800108a:	f000 f8ad 	bl	80011e8 <checkNo>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d03e      	beq.n	8001112 <outputQuestions+0xde>
			// 3rd question
			printUSART2("%s\n", nextQuestion());
 8001094:	f000 f85c 	bl	8001150 <nextQuestion>
 8001098:	4603      	mov	r3, r0
 800109a:	4619      	mov	r1, r3
 800109c:	4820      	ldr	r0, [pc, #128]	; (8001120 <outputQuestions+0xec>)
 800109e:	f001 f8fb 	bl	8002298 <printUSART2>

		  	if(checkYes()) { yesAnswer(); }
 80010a2:	f000 f87f 	bl	80011a4 <checkYes>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <outputQuestions+0x7e>
 80010ac:	f000 f864 	bl	8001178 <yesAnswer>
 80010b0:	e02f      	b.n	8001112 <outputQuestions+0xde>
		  	else if(checkNo()) {
 80010b2:	f000 f899 	bl	80011e8 <checkNo>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d02a      	beq.n	8001112 <outputQuestions+0xde>
		  		// 4th question
		  		printUSART2("%s\n", nextQuestion());
 80010bc:	f000 f848 	bl	8001150 <nextQuestion>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4619      	mov	r1, r3
 80010c4:	4816      	ldr	r0, [pc, #88]	; (8001120 <outputQuestions+0xec>)
 80010c6:	f001 f8e7 	bl	8002298 <printUSART2>

		  		if(checkYes()) { yesAnswer(); }
 80010ca:	f000 f86b 	bl	80011a4 <checkYes>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <outputQuestions+0xa6>
 80010d4:	f000 f850 	bl	8001178 <yesAnswer>
 80010d8:	e01b      	b.n	8001112 <outputQuestions+0xde>
		  	 	else if(checkNo()) {
 80010da:	f000 f885 	bl	80011e8 <checkNo>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d016      	beq.n	8001112 <outputQuestions+0xde>
		  	 		// turn on green LED
		  	 	 	 HAL_GPIO_WritePin(GPIOA,green_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ea:	480e      	ldr	r0, [pc, #56]	; (8001124 <outputQuestions+0xf0>)
 80010ec:	f002 fa2e 	bl	800354c <HAL_GPIO_WritePin>
		  	 	 	 printUSART2("Mozete uci u prostoriju.");
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <outputQuestions+0xf4>)
 80010f2:	f001 f8d1 	bl	8002298 <printUSART2>
		  	 	 	 HAL_GPIO_WritePin(GPIOA,DC_in1_Pin,GPIO_PIN_SET);   // Start motor clockwise rotation
 80010f6:	2201      	movs	r2, #1
 80010f8:	2110      	movs	r1, #16
 80010fa:	480a      	ldr	r0, [pc, #40]	; (8001124 <outputQuestions+0xf0>)
 80010fc:	f002 fa26 	bl	800354c <HAL_GPIO_WritePin>
		  	 	 	 HAL_GPIO_WritePin(GPIOA,DC_in2_Pin,GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2120      	movs	r1, #32
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <outputQuestions+0xf0>)
 8001106:	f002 fa21 	bl	800354c <HAL_GPIO_WritePin>
		  	 	 	 HAL_Delay(3000);
 800110a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800110e:	f001 fb67 	bl	80027e0 <HAL_Delay>

		  	 	 }
		  	}
		 }
	}
	HAL_Delay(100);
 8001112:	2064      	movs	r0, #100	; 0x64
 8001114:	f001 fb64 	bl	80027e0 <HAL_Delay>
		HAL_Delay(100);
 8001118:	e78e      	b.n	8001038 <outputQuestions+0x4>
 800111a:	bf00      	nop
 800111c:	200000f0 	.word	0x200000f0
 8001120:	08005cdc 	.word	0x08005cdc
 8001124:	40020000 	.word	0x40020000
 8001128:	08005ce0 	.word	0x08005ce0

0800112c <movementDetected>:
	}
}


int movementDetected(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IR_sensor_GPIO_Port, IR_sensor_Pin) == GPIO_PIN_RESET){
 8001130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <movementDetected+0x20>)
 8001136:	f002 f9f1 	bl	800351c <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <movementDetected+0x18>
		return 1;
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <movementDetected+0x1a>
	}
	else return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40020000 	.word	0x40020000

08001150 <nextQuestion>:

char* nextQuestion(){
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	return questions[counter++];
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <nextQuestion+0x20>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	4905      	ldr	r1, [pc, #20]	; (8001170 <nextQuestion+0x20>)
 800115c:	600a      	str	r2, [r1, #0]
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <nextQuestion+0x24>)
 8001160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200000f0 	.word	0x200000f0
 8001174:	20000000 	.word	0x20000000

08001178 <yesAnswer>:

void yesAnswer(){
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	// turn on red LED
	HAL_GPIO_WritePin(GPIOA,red_Pin,GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <yesAnswer+0x20>)
 8001184:	f002 f9e2 	bl	800354c <HAL_GPIO_WritePin>
	printUSART2("%s", warning);
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <yesAnswer+0x24>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <yesAnswer+0x28>)
 8001190:	f001 f882 	bl	8002298 <printUSART2>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020000 	.word	0x40020000
 800119c:	20000010 	.word	0x20000010
 80011a0:	08005cfc 	.word	0x08005cfc

080011a4 <checkYes>:

int checkYes(){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	 state = HAL_GPIO_ReadPin(GPIOA,yes_button_Pin);
 80011a8:	2101      	movs	r1, #1
 80011aa:	480c      	ldr	r0, [pc, #48]	; (80011dc <checkYes+0x38>)
 80011ac:	f002 f9b6 	bl	800351c <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <checkYes+0x3c>)
 80011b6:	601a      	str	r2, [r3, #0]
	 HAL_Delay(10);
 80011b8:	200a      	movs	r0, #10
 80011ba:	f001 fb11 	bl	80027e0 <HAL_Delay>
	 if(state){
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <checkYes+0x3c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <checkYes+0x30>
		 // turn on red LED
		 HAL_GPIO_TogglePin(GPIOD,red_Pin);
 80011c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <checkYes+0x40>)
 80011cc:	f002 f9d7 	bl	800357e <HAL_GPIO_TogglePin>
		 return 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <checkYes+0x32>
	 }
	 else return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020000 	.word	0x40020000
 80011e0:	200000a4 	.word	0x200000a4
 80011e4:	40020c00 	.word	0x40020c00

080011e8 <checkNo>:

int checkNo(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	  // check for NO button press
	  state = HAL_GPIO_ReadPin(GPIOD, no_button_Pin);
 80011ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <checkNo+0x30>)
 80011f2:	f002 f993 	bl	800351c <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <checkNo+0x34>)
 80011fc:	601a      	str	r2, [r3, #0]
	  HAL_Delay(10);
 80011fe:	200a      	movs	r0, #10
 8001200:	f001 faee 	bl	80027e0 <HAL_Delay>
	  if(state){ return 1;}
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <checkNo+0x34>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <checkNo+0x28>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <checkNo+0x2a>
	  else return 0;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40020c00 	.word	0x40020c00
 800121c:	200000a4 	.word	0x200000a4

08001220 <reverse>:

void reverse(char* str, int len)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	3b01      	subs	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001234:	e018      	b.n	8001268 <reverse+0x48>
        temp = str[i];
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	441a      	add	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	440b      	add	r3, r1
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	701a      	strb	r2, [r3, #0]
        i++;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
        j--;
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	3b01      	subs	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbe2      	blt.n	8001236 <reverse+0x16>
    }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
    while (x) {
 8001290:	e01d      	b.n	80012ce <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <intToStr+0x8c>)
 8001296:	fb83 1302 	smull	r1, r3, r3, r2
 800129a:	1099      	asrs	r1, r3, #2
 800129c:	17d3      	asrs	r3, r2, #31
 800129e:	1ac9      	subs	r1, r1, r3
 80012a0:	460b      	mov	r3, r1
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	1ad1      	subs	r1, r2, r3
 80012aa:	b2ca      	uxtb	r2, r1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	1c59      	adds	r1, r3, #1
 80012b0:	6179      	str	r1, [r7, #20]
 80012b2:	4619      	mov	r1, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	440b      	add	r3, r1
 80012b8:	3230      	adds	r2, #48	; 0x30
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <intToStr+0x8c>)
 80012c2:	fb82 1203 	smull	r1, r2, r2, r3
 80012c6:	1092      	asrs	r2, r2, #2
 80012c8:	17db      	asrs	r3, r3, #31
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	60fb      	str	r3, [r7, #12]
    while (x) {
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1de      	bne.n	8001292 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80012d4:	e007      	b.n	80012e6 <intToStr+0x66>
        str[i++] = '0';
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	617a      	str	r2, [r7, #20]
 80012dc:	461a      	mov	r2, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4413      	add	r3, r2
 80012e2:	2230      	movs	r2, #48	; 0x30
 80012e4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	dbf3      	blt.n	80012d6 <intToStr+0x56>

    reverse(str, i);
 80012ee:	6979      	ldr	r1, [r7, #20]
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f7ff ff95 	bl	8001220 <reverse>
    str[i] = '\0';
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	4413      	add	r3, r2
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
    return i;
 8001300:	697b      	ldr	r3, [r7, #20]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	66666667 	.word	0x66666667

08001310 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	ed87 0a03 	vstr	s0, [r7, #12]
 800131a:	60b8      	str	r0, [r7, #8]
 800131c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800131e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001326:	ee17 3a90 	vmov	r3, s15
 800132a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001336:	ed97 7a03 	vldr	s14, [r7, #12]
 800133a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	69f8      	ldr	r0, [r7, #28]
 8001348:	f7ff ff9a 	bl	8001280 <intToStr>
 800134c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d030      	beq.n	80013b6 <ftoa+0xa6>
        res[i] = '.'; // add dot
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	222e      	movs	r2, #46	; 0x2e
 800135c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 800135e:	69b8      	ldr	r0, [r7, #24]
 8001360:	f7ff f896 	bl	8000490 <__aeabi_f2d>
 8001364:	4604      	mov	r4, r0
 8001366:	460d      	mov	r5, r1
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff f87f 	bl	800046c <__aeabi_i2d>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	ec43 2b11 	vmov	d1, r2, r3
 8001376:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80013c0 <ftoa+0xb0>
 800137a:	f003 fa51 	bl	8004820 <pow>
 800137e:	ec53 2b10 	vmov	r2, r3, d0
 8001382:	4620      	mov	r0, r4
 8001384:	4629      	mov	r1, r5
 8001386:	f7ff f8db 	bl	8000540 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fb85 	bl	8000aa0 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 800139a:	edd7 7a06 	vldr	s15, [r7, #24]
 800139e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	4413      	add	r3, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4619      	mov	r1, r3
 80013ae:	ee17 0a90 	vmov	r0, s15
 80013b2:	f7ff ff65 	bl	8001280 <intToStr>
    }
}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bdb0      	pop	{r4, r5, r7, pc}
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40240000 	.word	0x40240000

080013c8 <getADC>:


uint16_t getADC(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	HAL_ADC_Start (&hadc1);
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <getADC+0x2c>)
 80013ce:	f001 fa6f 	bl	80028b0 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1,10000) != HAL_OK);
 80013d2:	bf00      	nop
 80013d4:	f242 7110 	movw	r1, #10000	; 0x2710
 80013d8:	4806      	ldr	r0, [pc, #24]	; (80013f4 <getADC+0x2c>)
 80013da:	f001 fb3b 	bl	8002a54 <HAL_ADC_PollForConversion>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f7      	bne.n	80013d4 <getADC+0xc>
	// HAL_ADC_PollForConversion(&hadc1,10000);

	return HAL_ADC_GetValue(&hadc1);
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <getADC+0x2c>)
 80013e6:	f001 fbc0 	bl	8002b6a <HAL_ADC_GetValue>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29b      	uxth	r3, r3
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200000a8 	.word	0x200000a8

080013f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <MX_ADC1_Init+0x98>)
 800140c:	4a21      	ldr	r2, [pc, #132]	; (8001494 <MX_ADC1_Init+0x9c>)
 800140e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_ADC1_Init+0x98>)
 8001412:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001416:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <MX_ADC1_Init+0x98>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_ADC1_Init+0x98>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_ADC1_Init+0x98>)
 8001426:	2200      	movs	r2, #0
 8001428:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_ADC1_Init+0x98>)
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_ADC1_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_ADC1_Init+0x98>)
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <MX_ADC1_Init+0xa0>)
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_ADC1_Init+0x98>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_ADC1_Init+0x98>)
 8001446:	2201      	movs	r2, #1
 8001448:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_ADC1_Init+0x98>)
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_ADC1_Init+0x98>)
 8001454:	2201      	movs	r2, #1
 8001456:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <MX_ADC1_Init+0x98>)
 800145a:	f001 f9e5 	bl	8002828 <HAL_ADC_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001464:	f000 f94c 	bl	8001700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001468:	2301      	movs	r3, #1
 800146a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_ADC1_Init+0x98>)
 800147a:	f001 fb83 	bl	8002b84 <HAL_ADC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001484:	f000 f93c 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200000a8 	.word	0x200000a8
 8001494:	40012000 	.word	0x40012000
 8001498:	0f000001 	.word	0x0f000001

0800149c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	; 0x30
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <MX_TIM12_Init+0xbc>)
 80014c4:	4a25      	ldr	r2, [pc, #148]	; (800155c <MX_TIM12_Init+0xc0>)
 80014c6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <MX_TIM12_Init+0xbc>)
 80014ca:	2253      	movs	r2, #83	; 0x53
 80014cc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <MX_TIM12_Init+0xbc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <MX_TIM12_Init+0xbc>)
 80014d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014da:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_TIM12_Init+0xbc>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_TIM12_Init+0xbc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80014e8:	481b      	ldr	r0, [pc, #108]	; (8001558 <MX_TIM12_Init+0xbc>)
 80014ea:	f002 f8bb 	bl	8003664 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80014f4:	f000 f904 	bl	8001700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	4619      	mov	r1, r3
 8001504:	4814      	ldr	r0, [pc, #80]	; (8001558 <MX_TIM12_Init+0xbc>)
 8001506:	f002 fa7d 	bl	8003a04 <HAL_TIM_ConfigClockSource>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001510:	f000 f8f6 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001514:	4810      	ldr	r0, [pc, #64]	; (8001558 <MX_TIM12_Init+0xbc>)
 8001516:	f002 f95d 	bl	80037d4 <HAL_TIM_PWM_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001520:	f000 f8ee 	bl	8001700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001524:	2360      	movs	r3, #96	; 0x60
 8001526:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_TIM12_Init+0xbc>)
 800153c:	f002 f9a4 	bl	8003888 <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001546:	f000 f8db 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800154a:	4803      	ldr	r0, [pc, #12]	; (8001558 <MX_TIM12_Init+0xbc>)
 800154c:	f000 fcce 	bl	8001eec <HAL_TIM_MspPostInit>

}
 8001550:	bf00      	nop
 8001552:	3730      	adds	r7, #48	; 0x30
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000138 	.word	0x20000138
 800155c:	40001800 	.word	0x40001800

08001560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_USART2_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001598:	f002 fde2 	bl	8004160 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f8ad 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200000f4 	.word	0x200000f4
 80015b0:	40004400 	.word	0x40004400

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b48      	ldr	r3, [pc, #288]	; (80016f0 <MX_GPIO_Init+0x13c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a47      	ldr	r2, [pc, #284]	; (80016f0 <MX_GPIO_Init+0x13c>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b45      	ldr	r3, [pc, #276]	; (80016f0 <MX_GPIO_Init+0x13c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <MX_GPIO_Init+0x13c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a40      	ldr	r2, [pc, #256]	; (80016f0 <MX_GPIO_Init+0x13c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <MX_GPIO_Init+0x13c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <MX_GPIO_Init+0x13c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a39      	ldr	r2, [pc, #228]	; (80016f0 <MX_GPIO_Init+0x13c>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <MX_GPIO_Init+0x13c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <MX_GPIO_Init+0x13c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <MX_GPIO_Init+0x13c>)
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <MX_GPIO_Init+0x13c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_in1_Pin|DC_in2_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	2130      	movs	r1, #48	; 0x30
 800163e:	482d      	ldr	r0, [pc, #180]	; (80016f4 <MX_GPIO_Init+0x140>)
 8001640:	f001 ff84 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_Pin|red_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800164a:	482b      	ldr	r0, [pc, #172]	; (80016f8 <MX_GPIO_Init+0x144>)
 800164c:	f001 ff7e 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : yes_button_Pin */
  GPIO_InitStruct.Pin = yes_button_Pin;
 8001650:	2301      	movs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(yes_button_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4824      	ldr	r0, [pc, #144]	; (80016f4 <MX_GPIO_Init+0x140>)
 8001664:	f001 fdbe 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_in1_Pin DC_in2_Pin */
  GPIO_InitStruct.Pin = DC_in1_Pin|DC_in2_Pin;
 8001668:	2330      	movs	r3, #48	; 0x30
 800166a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	481d      	ldr	r0, [pc, #116]	; (80016f4 <MX_GPIO_Init+0x140>)
 8001680:	f001 fdb0 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : no_button_Pin */
  GPIO_InitStruct.Pin = no_button_Pin;
 8001684:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_GPIO_Init+0x148>)
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(no_button_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4817      	ldr	r0, [pc, #92]	; (80016f8 <MX_GPIO_Init+0x144>)
 800169a:	f001 fda3 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_Pin red_Pin */
  GPIO_InitStruct.Pin = green_Pin|red_Pin;
 800169e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <MX_GPIO_Init+0x144>)
 80016b8:	f001 fd94 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_sensor_Pin */
  GPIO_InitStruct.Pin = IR_sensor_Pin;
 80016bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_sensor_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4808      	ldr	r0, [pc, #32]	; (80016f4 <MX_GPIO_Init+0x140>)
 80016d2:	f001 fd87 	bl	80031e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2028      	movs	r0, #40	; 0x28
 80016dc:	f001 fd4b 	bl	8003176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016e0:	2028      	movs	r0, #40	; 0x28
 80016e2:	f001 fd64 	bl	80031ae <HAL_NVIC_EnableIRQ>

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	10110000 	.word	0x10110000

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001708:	e7fe      	b.n	8001708 <Error_Handler+0x8>
	...

0800170c <getDNumMISC>:
#include "misc.h"

void getDNumMISC(uint8_t *dnum, uint32_t num)
{ /// calculate decimal digits from integer number 'num' and store them as ASCII char in dnum array
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
    uint8_t k;
    uint32_t step = 1000000000;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <getDNumMISC+0x70>)
 8001718:	60bb      	str	r3, [r7, #8]

    for (k = 0; k < 10; k++)
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e023      	b.n	8001768 <getDNumMISC+0x5c>
    {                     // convert integer value in hex format to decimal format
        dnum[9 - k] = 48; // set char value
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	f1c3 0309 	rsb	r3, r3, #9
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	2230      	movs	r2, #48	; 0x30
 800172e:	701a      	strb	r2, [r3, #0]
        while (num >= step)
 8001730:	e00d      	b.n	800174e <getDNumMISC+0x42>
        {
            dnum[9 - k]++;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	f1c3 0309 	rsb	r3, r3, #9
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	3201      	adds	r2, #1
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]
            num -= step;
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	603b      	str	r3, [r7, #0]
        while (num >= step)
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	429a      	cmp	r2, r3
 8001754:	d2ed      	bcs.n	8001732 <getDNumMISC+0x26>
        }
        step /= 10;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	4a09      	ldr	r2, [pc, #36]	; (8001780 <getDNumMISC+0x74>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	08db      	lsrs	r3, r3, #3
 8001760:	60bb      	str	r3, [r7, #8]
    for (k = 0; k < 10; k++)
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	3301      	adds	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	2b09      	cmp	r3, #9
 800176c:	d9d8      	bls.n	8001720 <getDNumMISC+0x14>
    }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	3b9aca00 	.word	0x3b9aca00
 8001780:	cccccccd 	.word	0xcccccccd

08001784 <putDNumMISC>:

void putDNumMISC(uint8_t *dnum, uint16_t *m, uint8_t *r_str)
{ /// add unsigned integer number digits into string r_str
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
    uint8_t k = 0, flag = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	75fb      	strb	r3, [r7, #23]
 8001794:	2300      	movs	r3, #0
 8001796:	75bb      	strb	r3, [r7, #22]

    for (k = 0; k < 10; k++)
 8001798:	2300      	movs	r3, #0
 800179a:	75fb      	strb	r3, [r7, #23]
 800179c:	e03a      	b.n	8001814 <putDNumMISC+0x90>
    { // convert integer value in hex format to decimal format
        if (flag == 0)
 800179e:	7dbb      	ldrb	r3, [r7, #22]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d121      	bne.n	80017e8 <putDNumMISC+0x64>
        {
            if ((dnum[9 - k] != 48) || (k == 9)) // include the 0x00000000 number
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	f1c3 0309 	rsb	r3, r3, #9
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b30      	cmp	r3, #48	; 0x30
 80017b4:	d102      	bne.n	80017bc <putDNumMISC+0x38>
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d128      	bne.n	800180e <putDNumMISC+0x8a>
            {
                flag = 1;
 80017bc:	2301      	movs	r3, #1
 80017be:	75bb      	strb	r3, [r7, #22]
                r_str[(*m)] = dnum[9 - k];
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	f1c3 0309 	rsb	r3, r3, #9
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	441a      	add	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	440b      	add	r3, r1
 80017d6:	7812      	ldrb	r2, [r2, #0]
 80017d8:	701a      	strb	r2, [r3, #0]
                (*m)++;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	801a      	strh	r2, [r3, #0]
 80017e6:	e012      	b.n	800180e <putDNumMISC+0x8a>
            }
        }
        else
        {
            r_str[(*m)] = dnum[9 - k];
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	f1c3 0309 	rsb	r3, r3, #9
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	441a      	add	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	440b      	add	r3, r1
 80017fe:	7812      	ldrb	r2, [r2, #0]
 8001800:	701a      	strb	r2, [r3, #0]
            (*m)++;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	801a      	strh	r2, [r3, #0]
    for (k = 0; k < 10; k++)
 800180e:	7dfb      	ldrb	r3, [r7, #23]
 8001810:	3301      	adds	r3, #1
 8001812:	75fb      	strb	r3, [r7, #23]
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	2b09      	cmp	r3, #9
 8001818:	d9c1      	bls.n	800179e <putDNumMISC+0x1a>
        }
    }
     r_str[(*m)] = 0x00;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
}
 8001828:	bf00      	nop
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	0000      	movs	r0, r0
	...

08001838 <getStr4NumMISC>:

void getStr4NumMISC(uint16_t type, uint32_t  * num, uint8_t * rstr)
{   /// print text and one signed integer or float number
 8001838:	b580      	push	{r7, lr}
 800183a:	b090      	sub	sp, #64	; 0x40
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	81fb      	strh	r3, [r7, #14]
    // the 'num' number is not modified!
    int32_t * p_int32;
    uint8_t dnum[11];
    uint8_t k;
    uint16_t m = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	827b      	strh	r3, [r7, #18]
    rstr[0] = 0x00;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
    
    switch(type)
 8001850:	89fb      	ldrh	r3, [r7, #14]
 8001852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001856:	f000 826f 	beq.w	8001d38 <getStr4NumMISC+0x500>
 800185a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800185e:	f300 82a4 	bgt.w	8001daa <getStr4NumMISC+0x572>
 8001862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001866:	f000 822b 	beq.w	8001cc0 <getStr4NumMISC+0x488>
 800186a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186e:	f300 829c 	bgt.w	8001daa <getStr4NumMISC+0x572>
 8001872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001876:	f000 81e7 	beq.w	8001c48 <getStr4NumMISC+0x410>
 800187a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187e:	f300 8294 	bgt.w	8001daa <getStr4NumMISC+0x572>
 8001882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001886:	f000 8104 	beq.w	8001a92 <getStr4NumMISC+0x25a>
 800188a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800188e:	f300 828c 	bgt.w	8001daa <getStr4NumMISC+0x572>
 8001892:	2b80      	cmp	r3, #128	; 0x80
 8001894:	f000 828d 	beq.w	8001db2 <getStr4NumMISC+0x57a>
 8001898:	2b80      	cmp	r3, #128	; 0x80
 800189a:	f300 8286 	bgt.w	8001daa <getStr4NumMISC+0x572>
 800189e:	2b20      	cmp	r3, #32
 80018a0:	dc4a      	bgt.n	8001938 <getStr4NumMISC+0x100>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f340 8281 	ble.w	8001daa <getStr4NumMISC+0x572>
 80018a8:	3b01      	subs	r3, #1
 80018aa:	2b1f      	cmp	r3, #31
 80018ac:	f200 827d 	bhi.w	8001daa <getStr4NumMISC+0x572>
 80018b0:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <getStr4NumMISC+0x80>)
 80018b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b6:	bf00      	nop
 80018b8:	08001941 	.word	0x08001941
 80018bc:	08001999 	.word	0x08001999
 80018c0:	08001dab 	.word	0x08001dab
 80018c4:	080019f1 	.word	0x080019f1
 80018c8:	08001dab 	.word	0x08001dab
 80018cc:	08001dab 	.word	0x08001dab
 80018d0:	08001dab 	.word	0x08001dab
 80018d4:	08001a45 	.word	0x08001a45
 80018d8:	08001dab 	.word	0x08001dab
 80018dc:	08001dab 	.word	0x08001dab
 80018e0:	08001dab 	.word	0x08001dab
 80018e4:	08001dab 	.word	0x08001dab
 80018e8:	08001dab 	.word	0x08001dab
 80018ec:	08001dab 	.word	0x08001dab
 80018f0:	08001dab 	.word	0x08001dab
 80018f4:	08001a45 	.word	0x08001a45
 80018f8:	08001dab 	.word	0x08001dab
 80018fc:	08001dab 	.word	0x08001dab
 8001900:	08001dab 	.word	0x08001dab
 8001904:	08001dab 	.word	0x08001dab
 8001908:	08001dab 	.word	0x08001dab
 800190c:	08001dab 	.word	0x08001dab
 8001910:	08001dab 	.word	0x08001dab
 8001914:	08001dab 	.word	0x08001dab
 8001918:	08001dab 	.word	0x08001dab
 800191c:	08001dab 	.word	0x08001dab
 8001920:	08001dab 	.word	0x08001dab
 8001924:	08001dab 	.word	0x08001dab
 8001928:	08001dab 	.word	0x08001dab
 800192c:	08001dab 	.word	0x08001dab
 8001930:	08001dab 	.word	0x08001dab
 8001934:	08001a45 	.word	0x08001a45
 8001938:	2b40      	cmp	r3, #64	; 0x40
 800193a:	f000 823c 	beq.w	8001db6 <getStr4NumMISC+0x57e>
 800193e:	e234      	b.n	8001daa <getStr4NumMISC+0x572>
    {
		case(PRINT_ARG_TYPE_BINARY_BYTE):
		{// 8 bit binary representation
			for(k=0;k<8;k++)
 8001940:	2300      	movs	r3, #0
 8001942:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001946:	e01c      	b.n	8001982 <getStr4NumMISC+0x14a>
			{
				if((*num) & 0x00000080)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <getStr4NumMISC+0x12a>
				{
					rstr[k] = '1';
 8001954:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	2231      	movs	r2, #49	; 0x31
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	e005      	b.n	800196e <getStr4NumMISC+0x136>
				}
				else
				{
					rstr[k] = '0';
 8001962:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	2230      	movs	r2, #48	; 0x30
 800196c:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	005a      	lsls	r2, r3, #1
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	601a      	str	r2, [r3, #0]
			for(k=0;k<8;k++)
 8001978:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800197c:	3301      	adds	r3, #1
 800197e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001982:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001986:	2b07      	cmp	r3, #7
 8001988:	d9de      	bls.n	8001948 <getStr4NumMISC+0x110>
			}
			rstr[k] = 0x00;
 800198a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
			break;
 8001996:	e20f      	b.n	8001db8 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_BINARY_HALFWORD):
		{// 16 bit binary representation
			for(k=0;k<16;k++)
 8001998:	2300      	movs	r3, #0
 800199a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800199e:	e01c      	b.n	80019da <getStr4NumMISC+0x1a2>
			{
				if((*num) & 0x00008000)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <getStr4NumMISC+0x182>
				{
					rstr[k] = '1';
 80019ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	2231      	movs	r2, #49	; 0x31
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	e005      	b.n	80019c6 <getStr4NumMISC+0x18e>
				}
				else
				{
					rstr[k] = '0';
 80019ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	2230      	movs	r2, #48	; 0x30
 80019c4:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	005a      	lsls	r2, r3, #1
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	601a      	str	r2, [r3, #0]
			for(k=0;k<16;k++)
 80019d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019d4:	3301      	adds	r3, #1
 80019d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80019da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019de:	2b0f      	cmp	r3, #15
 80019e0:	d9de      	bls.n	80019a0 <getStr4NumMISC+0x168>
			}
			rstr[k] = 0x00;
 80019e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
			break;
 80019ee:	e1e3      	b.n	8001db8 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_BINARY_WORD):
		{// 32 bit binary representation
			for(k=0;k<32;k++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80019f6:	e01a      	b.n	8001a2e <getStr4NumMISC+0x1f6>
			{
				if((*num) & 0x80000000)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	da06      	bge.n	8001a0e <getStr4NumMISC+0x1d6>
				{
					rstr[k] = '1';
 8001a00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	2231      	movs	r2, #49	; 0x31
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e005      	b.n	8001a1a <getStr4NumMISC+0x1e2>
				}
				else
				{
					rstr[k] = '0';
 8001a0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	2230      	movs	r2, #48	; 0x30
 8001a18:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	005a      	lsls	r2, r3, #1
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	601a      	str	r2, [r3, #0]
			for(k=0;k<32;k++)
 8001a24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a32:	2b1f      	cmp	r3, #31
 8001a34:	d9e0      	bls.n	80019f8 <getStr4NumMISC+0x1c0>
			}
			rstr[k] = 0x00;
 8001a36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
			break;
 8001a42:	e1b9      	b.n	8001db8 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_DECIMAL_BYTE):
		case(PRINT_ARG_TYPE_DECIMAL_HALFWORD):
		case(PRINT_ARG_TYPE_DECIMAL_WORD):
		{// conver integer number into appropriate string
			p_int32 = (int32_t *)num;
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	623b      	str	r3, [r7, #32]
            if (*p_int32 < 0)
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da0e      	bge.n	8001a6e <getStr4NumMISC+0x236>
            { // print the sign character
                rstr[m] = '-';
 8001a50:	8a7b      	ldrh	r3, [r7, #18]
 8001a52:	461a      	mov	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	222d      	movs	r2, #45	; 0x2d
 8001a5a:	701a      	strb	r2, [r3, #0]
                m++;
 8001a5c:	8a7b      	ldrh	r3, [r7, #18]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	827b      	strh	r3, [r7, #18]
                *p_int32 = (*p_int32)*(-1);
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	425a      	negs	r2, r3
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	601a      	str	r2, [r3, #0]
            }

            getDNumMISC(dnum, (uint32_t)(*p_int32));
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fe46 	bl	800170c <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001a80:	f107 0112 	add.w	r1, r7, #18
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fe7a 	bl	8001784 <putDNumMISC>
			break;
 8001a90:	e192      	b.n	8001db8 <getStr4NumMISC+0x580>
			//getDNumMISC(dnum, exp);
            //putDNumMISC(dnum, &m, rstr);
			
			
			float f_step;
			float f_num = *((float *)num); // convert pointer
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t sige = ' ';
 8001a98:	2320      	movs	r3, #32
 8001a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			uint16_t e_part;
			uint32_t d_part, i_part;
			
            if (f_num < 0)
 8001a9e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001aa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	d50f      	bpl.n	8001acc <getStr4NumMISC+0x294>
            { // negative float number
                rstr[m] = '-';
 8001aac:	8a7b      	ldrh	r3, [r7, #18]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	222d      	movs	r2, #45	; 0x2d
 8001ab6:	701a      	strb	r2, [r3, #0]
                m++;
 8001ab8:	8a7b      	ldrh	r3, [r7, #18]
 8001aba:	3301      	adds	r3, #1
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	827b      	strh	r3, [r7, #18]
                f_num = (-1) * f_num;
 8001ac0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ac4:	eef1 7a67 	vneg.f32	s15, s15
 8001ac8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            }

            if (f_num < 1)
 8001acc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d524      	bpl.n	8001b28 <getStr4NumMISC+0x2f0>
            {
                sige = '-';
 8001ade:	232d      	movs	r3, #45	; 0x2d
 8001ae0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                f_step = 0.1;
 8001ae4:	4bb8      	ldr	r3, [pc, #736]	; (8001dc8 <getStr4NumMISC+0x590>)
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
                e_part = 1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num < f_step)
 8001aec:	e012      	b.n	8001b14 <getStr4NumMISC+0x2dc>
                {
                    f_step = f_step * 0.1;
 8001aee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001af0:	f7fe fcce 	bl	8000490 <__aeabi_f2d>
 8001af4:	a3b2      	add	r3, pc, #712	; (adr r3, 8001dc0 <getStr4NumMISC+0x588>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe fd21 	bl	8000540 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7fe ffcb 	bl	8000aa0 <__aeabi_d2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	63bb      	str	r3, [r7, #56]	; 0x38
                    e_part++;
 8001b0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b10:	3301      	adds	r3, #1
 8001b12:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num < f_step)
 8001b14:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b18:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	d4e3      	bmi.n	8001aee <getStr4NumMISC+0x2b6>
 8001b26:	e024      	b.n	8001b72 <getStr4NumMISC+0x33a>
                }
            }
            else
            {
                f_step = 1.0;
 8001b28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b2c:	63bb      	str	r3, [r7, #56]	; 0x38
                e_part = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num > f_step)
 8001b32:	e00a      	b.n	8001b4a <getStr4NumMISC+0x312>
                {
                    f_step = f_step * 10;
 8001b34:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b40:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    e_part++;
 8001b44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b46:	3301      	adds	r3, #1
 8001b48:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num > f_step)
 8001b4a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b4e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5a:	dceb      	bgt.n	8001b34 <getStr4NumMISC+0x2fc>
                }
                f_step = f_step / 10;
 8001b5c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001b60:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                e_part--;
 8001b6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	863b      	strh	r3, [r7, #48]	; 0x30
            }

            f_num = f_num / f_step;
 8001b72:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001b76:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            i_part = (uint32_t)f_num;
 8001b82:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b8a:	ee17 3a90 	vmov	r3, s15
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28

            f_num = f_num - (float)i_part;
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            d_part = (uint32_t)(1000 * f_num);
 8001ba6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001baa:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001dcc <getStr4NumMISC+0x594>
 8001bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb6:	ee17 3a90 	vmov	r3, s15
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24

            getDNumMISC(dnum, i_part);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fda2 	bl	800170c <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001bc8:	f107 0112 	add.w	r1, r7, #18
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fdd6 	bl	8001784 <putDNumMISC>

            getDNumMISC(dnum, d_part);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fd94 	bl	800170c <getDNumMISC>
            dnum[3] = '.';
 8001be4:	232e      	movs	r3, #46	; 0x2e
 8001be6:	75fb      	strb	r3, [r7, #23]
            putDNumMISC(dnum, &m, rstr);
 8001be8:	f107 0112 	add.w	r1, r7, #18
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fdc6 	bl	8001784 <putDNumMISC>

            rstr[m] = 'e';
 8001bf8:	8a7b      	ldrh	r3, [r7, #18]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	2265      	movs	r2, #101	; 0x65
 8001c02:	701a      	strb	r2, [r3, #0]
            m++;
 8001c04:	8a7b      	ldrh	r3, [r7, #18]
 8001c06:	3301      	adds	r3, #1
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	827b      	strh	r3, [r7, #18]

            if (sige == '-')
 8001c0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c10:	2b2d      	cmp	r3, #45	; 0x2d
 8001c12:	d109      	bne.n	8001c28 <getStr4NumMISC+0x3f0>
            {
                rstr[m] = '-';
 8001c14:	8a7b      	ldrh	r3, [r7, #18]
 8001c16:	461a      	mov	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	222d      	movs	r2, #45	; 0x2d
 8001c1e:	701a      	strb	r2, [r3, #0]
                m++;
 8001c20:	8a7b      	ldrh	r3, [r7, #18]
 8001c22:	3301      	adds	r3, #1
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	827b      	strh	r3, [r7, #18]
            }

            getDNumMISC(dnum, e_part);
 8001c28:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fd6b 	bl	800170c <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001c36:	f107 0112 	add.w	r1, r7, #18
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fd9f 	bl	8001784 <putDNumMISC>
				
			break;
 8001c46:	e0b7      	b.n	8001db8 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_HEXADECIMAL_BYTE):
		{// 8 bit hex string representation
			uint8_t t_rez;
            for (k=0;k<2;k++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c4e:	e02c      	b.n	8001caa <getStr4NumMISC+0x472>
            {
                t_rez = ((*num) & 0x000000F0) >> 4;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                if (t_rez < 0x0A)
 8001c60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c64:	2b09      	cmp	r3, #9
 8001c66:	d809      	bhi.n	8001c7c <getStr4NumMISC+0x444>
                {
                    rstr[m] = t_rez + 0x30;
 8001c68:	8a7b      	ldrh	r3, [r7, #18]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c74:	3230      	adds	r2, #48	; 0x30
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e008      	b.n	8001c8e <getStr4NumMISC+0x456>
                }
                else
                {
                    rstr[m] = t_rez + 0x41 - 0x0A;
 8001c7c:	8a7b      	ldrh	r3, [r7, #18]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c88:	3237      	adds	r2, #55	; 0x37
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	011a      	lsls	r2, r3, #4
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	601a      	str	r2, [r3, #0]
                m++;
 8001c98:	8a7b      	ldrh	r3, [r7, #18]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	827b      	strh	r3, [r7, #18]
            for (k=0;k<2;k++)
 8001ca0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001caa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d9ce      	bls.n	8001c50 <getStr4NumMISC+0x418>
            }
            rstr[m] = 0x00;
 8001cb2:	8a7b      	ldrh	r3, [r7, #18]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
			break;
 8001cbe:	e07b      	b.n	8001db8 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_HEXADECIMAL_HALFWORD):
		{// 16 bit hex string representation
			uint8_t t_rez;
            for (k=0;k<4;k++)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001cc6:	e02c      	b.n	8001d22 <getStr4NumMISC+0x4ea>
            {
                t_rez = ((*num) & 0x0000F000) >> 12;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0b1b      	lsrs	r3, r3, #12
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                if (t_rez < 0x0A)
 8001cd8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001cdc:	2b09      	cmp	r3, #9
 8001cde:	d809      	bhi.n	8001cf4 <getStr4NumMISC+0x4bc>
                {
                    rstr[m] = t_rez + 0x30;
 8001ce0:	8a7b      	ldrh	r3, [r7, #18]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001cec:	3230      	adds	r2, #48	; 0x30
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e008      	b.n	8001d06 <getStr4NumMISC+0x4ce>
                }
                else
                {
                    rstr[m] = t_rez + 0x41 - 0x0A;
 8001cf4:	8a7b      	ldrh	r3, [r7, #18]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001d00:	3237      	adds	r2, #55	; 0x37
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	011a      	lsls	r2, r3, #4
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	601a      	str	r2, [r3, #0]
                m++;
 8001d10:	8a7b      	ldrh	r3, [r7, #18]
 8001d12:	3301      	adds	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	827b      	strh	r3, [r7, #18]
            for (k=0;k<4;k++)
 8001d18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d9ce      	bls.n	8001cc8 <getStr4NumMISC+0x490>
            }
            rstr[m] = 0x00;
 8001d2a:	8a7b      	ldrh	r3, [r7, #18]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
			break;
 8001d36:	e03f      	b.n	8001db8 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_HEXADECIMAL_WORD):
		{// 32 bit hex string representation
            uint8_t t_rez;
            for (k=0;k<8;k++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d3e:	e029      	b.n	8001d94 <getStr4NumMISC+0x55c>
            {
                t_rez = ((*num) & 0xF0000000) >> 28;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0f1b      	lsrs	r3, r3, #28
 8001d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if (t_rez < 0x0A)
 8001d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d4e:	2b09      	cmp	r3, #9
 8001d50:	d809      	bhi.n	8001d66 <getStr4NumMISC+0x52e>
                {
                    rstr[m] = t_rez + 0x30;
 8001d52:	8a7b      	ldrh	r3, [r7, #18]
 8001d54:	461a      	mov	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001d5e:	3230      	adds	r2, #48	; 0x30
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	e008      	b.n	8001d78 <getStr4NumMISC+0x540>
                }
                else
                {
                    rstr[m] = t_rez + 0x41 - 0x0A;
 8001d66:	8a7b      	ldrh	r3, [r7, #18]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001d72:	3237      	adds	r2, #55	; 0x37
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	011a      	lsls	r2, r3, #4
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	601a      	str	r2, [r3, #0]
                m++;
 8001d82:	8a7b      	ldrh	r3, [r7, #18]
 8001d84:	3301      	adds	r3, #1
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	827b      	strh	r3, [r7, #18]
            for (k=0;k<8;k++)
 8001d8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d98:	2b07      	cmp	r3, #7
 8001d9a:	d9d1      	bls.n	8001d40 <getStr4NumMISC+0x508>
            }
            rstr[m] = 0x00;
 8001d9c:	8a7b      	ldrh	r3, [r7, #18]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
			break;
 8001da8:	e006      	b.n	8001db8 <getStr4NumMISC+0x580>
		}
		default:
		{
			rstr[0] = 0x00;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
			break;
 8001db0:	e002      	b.n	8001db8 <getStr4NumMISC+0x580>
			break;
 8001db2:	bf00      	nop
 8001db4:	e000      	b.n	8001db8 <getStr4NumMISC+0x580>
			break;
 8001db6:	bf00      	nop
		}
	}
}
 8001db8:	bf00      	nop
 8001dba:	3740      	adds	r7, #64	; 0x40
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	9999999a 	.word	0x9999999a
 8001dc4:	3fb99999 	.word	0x3fb99999
 8001dc8:	3dcccccd 	.word	0x3dcccccd
 8001dcc:	447a0000 	.word	0x447a0000

08001dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x4c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800

08001e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_ADC_MspInit+0x7c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d127      	bne.n	8001e92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_ADC_MspInit+0x80>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <HAL_ADC_MspInit+0x80>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_ADC_MspInit+0x80>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_ADC_MspInit+0x80>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_ADC_MspInit+0x80>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_ADC_MspInit+0x80>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = thermistor_Pin;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(thermistor_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <HAL_ADC_MspInit+0x84>)
 8001e8e:	f001 f9a9 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3728      	adds	r7, #40	; 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40012000 	.word	0x40012000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <HAL_TIM_Base_MspInit+0x3c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10d      	bne.n	8001ed6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_TIM_Base_MspInit+0x40>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <HAL_TIM_Base_MspInit+0x40>)
 8001ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <HAL_TIM_Base_MspInit+0x40>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40001800 	.word	0x40001800
 8001ee8:	40023800 	.word	0x40023800

08001eec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <HAL_TIM_MspPostInit+0x68>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d11e      	bne.n	8001f4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_TIM_MspPostInit+0x6c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a10      	ldr	r2, [pc, #64]	; (8001f58 <HAL_TIM_MspPostInit+0x6c>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_TIM_MspPostInit+0x6c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001f3c:	2309      	movs	r3, #9
 8001f3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	4619      	mov	r1, r3
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <HAL_TIM_MspPostInit+0x70>)
 8001f48:	f001 f94c 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40001800 	.word	0x40001800
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020400 	.word	0x40020400

08001f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_UART_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12b      	bne.n	8001fda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_UART_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fba:	230c      	movs	r3, #12
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fca:	2307      	movs	r3, #7
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_UART_MspInit+0x8c>)
 8001fd6:	f001 f905 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	; 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40004400 	.word	0x40004400
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020000 	.word	0x40020000

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002044:	f000 fbac 	bl	80027a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002050:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002054:	f001 faae 	bl	80035b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}

0800205c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <SystemInit+0x60>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a15      	ldr	r2, [pc, #84]	; (80020bc <SystemInit+0x60>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <SystemInit+0x60>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <SystemInit+0x60>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a11      	ldr	r2, [pc, #68]	; (80020bc <SystemInit+0x60>)
 8002078:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800207c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <SystemInit+0x60>)
 8002084:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <SystemInit+0x64>)
 8002086:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <SystemInit+0x60>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <SystemInit+0x60>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002092:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <SystemInit+0x60>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800209a:	f000 f815 	bl	80020c8 <SetSysClock>
  // ENABLE FPU!!!!!!!!!!!!!
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <SystemInit+0x68>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <SystemInit+0x68>)
 80020a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <SystemInit+0x68>)
 80020b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020b4:	609a      	str	r2, [r3, #8]
#endif
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	24003010 	.word	0x24003010
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80020d6:	4b35      	ldr	r3, [pc, #212]	; (80021ac <SetSysClock+0xe4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a34      	ldr	r2, [pc, #208]	; (80021ac <SetSysClock+0xe4>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80020e2:	4b32      	ldr	r3, [pc, #200]	; (80021ac <SetSysClock+0xe4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3301      	adds	r3, #1
 80020f0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <SetSysClock+0x36>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d1f1      	bne.n	80020e2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <SetSysClock+0xe4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <SetSysClock+0x48>
  {
    HSEStatus = (uint32_t)0x01;
 800210a:	2301      	movs	r3, #1
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	e001      	b.n	8002114 <SetSysClock+0x4c>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002110:	2300      	movs	r3, #0
 8002112:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d142      	bne.n	80021a0 <SetSysClock+0xd8>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <SetSysClock+0xe4>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a23      	ldr	r2, [pc, #140]	; (80021ac <SetSysClock+0xe4>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <SetSysClock+0xe8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a21      	ldr	r2, [pc, #132]	; (80021b0 <SetSysClock+0xe8>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <SetSysClock+0xe4>)
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <SetSysClock+0xe4>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <SetSysClock+0xe4>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <SetSysClock+0xe4>)
 8002140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002144:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002146:	4b19      	ldr	r3, [pc, #100]	; (80021ac <SetSysClock+0xe4>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	4a18      	ldr	r2, [pc, #96]	; (80021ac <SetSysClock+0xe4>)
 800214c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002150:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002152:	4b16      	ldr	r3, [pc, #88]	; (80021ac <SetSysClock+0xe4>)
 8002154:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <SetSysClock+0xec>)
 8002156:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002158:	4b14      	ldr	r3, [pc, #80]	; (80021ac <SetSysClock+0xe4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a13      	ldr	r2, [pc, #76]	; (80021ac <SetSysClock+0xe4>)
 800215e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002162:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002164:	bf00      	nop
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <SetSysClock+0xe4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f9      	beq.n	8002166 <SetSysClock+0x9e>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <SetSysClock+0xf0>)
 8002174:	f240 6205 	movw	r2, #1541	; 0x605
 8002178:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <SetSysClock+0xe4>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <SetSysClock+0xe4>)
 8002180:	f023 0303 	bic.w	r3, r3, #3
 8002184:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <SetSysClock+0xe4>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <SetSysClock+0xe4>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002192:	bf00      	nop
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <SetSysClock+0xe4>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d1f9      	bne.n	8002194 <SetSysClock+0xcc>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40007000 	.word	0x40007000
 80021b4:	07405408 	.word	0x07405408
 80021b8:	40023c00 	.word	0x40023c00

080021bc <initUSART2>:
#include "usart.h"

UART_HandleTypeDef UART_HandleStruct;

void initUSART2(uint32_t baudrate)
{
 80021bc:	b5b0      	push	{r4, r5, r7, lr}
 80021be:	b090      	sub	sp, #64	; 0x40
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	
	//wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
	//Configure pins
	//
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	4b26      	ldr	r3, [pc, #152]	; (8002264 <initUSART2+0xa8>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	4a25      	ldr	r2, [pc, #148]	; (8002264 <initUSART2+0xa8>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6313      	str	r3, [r2, #48]	; 0x30
 80021d4:	4b23      	ldr	r3, [pc, #140]	; (8002264 <initUSART2+0xa8>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021e0:	2304      	movs	r3, #4
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ec:	2302      	movs	r3, #2
 80021ee:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f0:	2307      	movs	r3, #7
 80021f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f8:	4619      	mov	r1, r3
 80021fa:	481b      	ldr	r0, [pc, #108]	; (8002268 <initUSART2+0xac>)
 80021fc:	f000 fff2 	bl	80031e4 <HAL_GPIO_Init>
	

	UART_InitTypeDef UART_InitStruct;
	__HAL_RCC_USART2_CLK_ENABLE();
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <initUSART2+0xa8>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	4a16      	ldr	r2, [pc, #88]	; (8002264 <initUSART2+0xa8>)
 800220a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220e:	6413      	str	r3, [r2, #64]	; 0x40
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <initUSART2+0xa8>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
	UART_InitStruct.BaudRate = baudrate;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	613b      	str	r3, [r7, #16]
	UART_InitStruct.WordLength = UART_WORDLENGTH_8B;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
	UART_InitStruct.StopBits = UART_STOPBITS_1;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
	UART_InitStruct.Parity = UART_PARITY_NONE;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
	UART_InitStruct.Mode = UART_MODE_TX;
 800222c:	2308      	movs	r3, #8
 800222e:	623b      	str	r3, [r7, #32]
	UART_InitStruct.HwFlowCtl = UART_HWCONTROL_NONE;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
	UART_InitStruct.OverSampling = UART_OVERSAMPLING_8;
 8002234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28

	UART_HandleStruct.Instance = USART2;
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <initUSART2+0xb0>)
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <initUSART2+0xb4>)
 800223e:	601a      	str	r2, [r3, #0]
	UART_HandleStruct.Init = UART_InitStruct;
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <initUSART2+0xb0>)
 8002242:	1d1c      	adds	r4, r3, #4
 8002244:	f107 0510 	add.w	r5, r7, #16
 8002248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800224a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Init(&UART_HandleStruct);
 8002254:	4805      	ldr	r0, [pc, #20]	; (800226c <initUSART2+0xb0>)
 8002256:	f001 ff83 	bl	8004160 <HAL_UART_Init>
	
}
 800225a:	bf00      	nop
 800225c:	3740      	adds	r7, #64	; 0x40
 800225e:	46bd      	mov	sp, r7
 8002260:	bdb0      	pop	{r4, r5, r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000
 800226c:	20000180 	.word	0x20000180
 8002270:	40004400 	.word	0x40004400

08002274 <putcharUSART2>:

void putcharUSART2(uint8_t data)
{/// print one character to USART2
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&UART_HandleStruct, & data,1,10000);
 800227e:	1df9      	adds	r1, r7, #7
 8002280:	f242 7310 	movw	r3, #10000	; 0x2710
 8002284:	2201      	movs	r2, #1
 8002286:	4803      	ldr	r0, [pc, #12]	; (8002294 <putcharUSART2+0x20>)
 8002288:	f001 ffb7 	bl	80041fa <HAL_UART_Transmit>
	// while(!(USART2->SR & USART_SR_TC));									

	// USART2->DR = data;	
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000180 	.word	0x20000180

08002298 <printUSART2>:

void printUSART2(char *str, ... )
{ /// print text and up to 10 arguments!
 8002298:	b40f      	push	{r0, r1, r2, r3}
 800229a:	b5b0      	push	{r4, r5, r7, lr}
 800229c:	b094      	sub	sp, #80	; 0x50
 800229e:	af00      	add	r7, sp, #0
    uint8_t rstr[40];													// 33 max -> 32 ASCII for 32 bits and NULL 
    uint16_t k = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint32_t * p_uint32; 
	char * p_char;
	va_list vl;
	
	//va_start(vl, 10);													// always pass the last named parameter to va_start, for compatibility with older compilers
	va_start(vl, str);													// always pass the last named parameter to va_start, for compatibility with older compilers
 80022a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022aa:	603b      	str	r3, [r7, #0]
	while(str[k] != 0x00)
 80022ac:	e1c2      	b.n	8002634 <printUSART2+0x39c>
	{
		if(str[k] == '%')
 80022ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022b4:	4413      	add	r3, r2
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b25      	cmp	r3, #37	; 0x25
 80022ba:	f040 81a4 	bne.w	8002606 <printUSART2+0x36e>
		{
			if(str[k+1] != 0x00)
 80022be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022c2:	3301      	adds	r3, #1
 80022c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022c6:	4413      	add	r3, r2
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 81ad 	beq.w	800262a <printUSART2+0x392>
			{
				switch(str[k+1])
 80022d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022d4:	3301      	adds	r3, #1
 80022d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022d8:	4413      	add	r3, r2
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	3b62      	subs	r3, #98	; 0x62
 80022de:	2b16      	cmp	r3, #22
 80022e0:	f200 8170 	bhi.w	80025c4 <printUSART2+0x32c>
 80022e4:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <printUSART2+0x54>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	08002349 	.word	0x08002349
 80022f0:	08002469 	.word	0x08002469
 80022f4:	080023d9 	.word	0x080023d9
 80022f8:	080025c5 	.word	0x080025c5
 80022fc:	0800249f 	.word	0x0800249f
 8002300:	080025c5 	.word	0x080025c5
 8002304:	080025c5 	.word	0x080025c5
 8002308:	080025c5 	.word	0x080025c5
 800230c:	080025c5 	.word	0x080025c5
 8002310:	080025c5 	.word	0x080025c5
 8002314:	080025c5 	.word	0x080025c5
 8002318:	080025c5 	.word	0x080025c5
 800231c:	080025c5 	.word	0x080025c5
 8002320:	080025c5 	.word	0x080025c5
 8002324:	080025c5 	.word	0x080025c5
 8002328:	080025c5 	.word	0x080025c5
 800232c:	080025c5 	.word	0x080025c5
 8002330:	08002487 	.word	0x08002487
 8002334:	080025c5 	.word	0x080025c5
 8002338:	080025c5 	.word	0x080025c5
 800233c:	080025c5 	.word	0x080025c5
 8002340:	080025c5 	.word	0x080025c5
 8002344:	0800252d 	.word	0x0800252d
				{
					case('b'):
					{// binary
						if(str[k+2] == 'b')
 8002348:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800234c:	3302      	adds	r3, #2
 800234e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002350:	4413      	add	r3, r2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b62      	cmp	r3, #98	; 0x62
 8002356:	d108      	bne.n	800236a <printUSART2+0xd2>
						{// byte
							utmp32 = va_arg(vl, int);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	1d1a      	adds	r2, r3, #4
 800235c:	603a      	str	r2, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_BYTE);
 8002362:	2301      	movs	r3, #1
 8002364:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002368:	e02e      	b.n	80023c8 <printUSART2+0x130>
						}
						else if(str[k+2] == 'h')
 800236a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800236e:	3302      	adds	r3, #2
 8002370:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002372:	4413      	add	r3, r2
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b68      	cmp	r3, #104	; 0x68
 8002378:	d108      	bne.n	800238c <printUSART2+0xf4>
						{// half word
							utmp32 = va_arg(vl, int);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	1d1a      	adds	r2, r3, #4
 800237e:	603a      	str	r2, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_HALFWORD);
 8002384:	2302      	movs	r3, #2
 8002386:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800238a:	e01d      	b.n	80023c8 <printUSART2+0x130>
						}
						else if(str[k+2] == 'w')
 800238c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002390:	3302      	adds	r3, #2
 8002392:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002394:	4413      	add	r3, r2
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b77      	cmp	r3, #119	; 0x77
 800239a:	d108      	bne.n	80023ae <printUSART2+0x116>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	603a      	str	r2, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
 80023a6:	2304      	movs	r3, #4
 80023a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80023ac:	e00c      	b.n	80023c8 <printUSART2+0x130>
						}
						else
						{// default word
							utmp32 = va_arg(vl, uint32_t);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	1d1a      	adds	r2, r3, #4
 80023b2:	603a      	str	r2, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
 80023b8:	2304      	movs	r3, #4
 80023ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 80023be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023c2:	3b01      	subs	r3, #1
 80023c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;	
 80023c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023cc:	3301      	adds	r3, #1
 80023ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 80023d6:	e0fd      	b.n	80025d4 <printUSART2+0x33c>
					}
					case('d'):
					{// decimal
						if(str[k+2] == 'b')
 80023d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023dc:	3302      	adds	r3, #2
 80023de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023e0:	4413      	add	r3, r2
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b62      	cmp	r3, #98	; 0x62
 80023e6:	d108      	bne.n	80023fa <printUSART2+0x162>
						{// byte
							utmp32 = va_arg(vl, int);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	1d1a      	adds	r2, r3, #4
 80023ec:	603a      	str	r2, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_BYTE);
 80023f2:	2308      	movs	r3, #8
 80023f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80023f8:	e02e      	b.n	8002458 <printUSART2+0x1c0>
						}
						else if(str[k+2] == 'h')
 80023fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023fe:	3302      	adds	r3, #2
 8002400:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002402:	4413      	add	r3, r2
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b68      	cmp	r3, #104	; 0x68
 8002408:	d108      	bne.n	800241c <printUSART2+0x184>
						{// half word
							utmp32 = va_arg(vl, int);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	1d1a      	adds	r2, r3, #4
 800240e:	603a      	str	r2, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_HALFWORD);
 8002414:	2310      	movs	r3, #16
 8002416:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800241a:	e01d      	b.n	8002458 <printUSART2+0x1c0>
						}
						else if(str[k+2] == 'w')
 800241c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002420:	3302      	adds	r3, #2
 8002422:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002424:	4413      	add	r3, r2
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b77      	cmp	r3, #119	; 0x77
 800242a:	d108      	bne.n	800243e <printUSART2+0x1a6>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	1d1a      	adds	r2, r3, #4
 8002430:	603a      	str	r2, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_WORD);
 8002436:	2320      	movs	r3, #32
 8002438:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800243c:	e00c      	b.n	8002458 <printUSART2+0x1c0>
						}
						else
						{// default word
							utmp32 = va_arg(vl, uint32_t);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	1d1a      	adds	r2, r3, #4
 8002442:	603a      	str	r2, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_WORD);
 8002448:	2320      	movs	r3, #32
 800244a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 800244e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002452:	3b01      	subs	r3, #1
 8002454:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;	
 8002458:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800245c:	3301      	adds	r3, #1
 800245e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 8002466:	e0b5      	b.n	80025d4 <printUSART2+0x33c>
					}
					case('c'):
					{// character
						char tchar = va_arg(vl, int);	
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	1d1a      	adds	r2, r3, #4
 800246c:	603a      	str	r2, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
						putcharUSART2(tchar);
 8002474:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fefb 	bl	8002274 <putcharUSART2>
						arg_type = (PRINT_ARG_TYPE_CHARACTER);
 800247e:	2340      	movs	r3, #64	; 0x40
 8002480:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 8002484:	e0a6      	b.n	80025d4 <printUSART2+0x33c>
					}
					case('s'):
					{// string 
						p_char = va_arg(vl, char *);	
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	1d1a      	adds	r2, r3, #4
 800248a:	603a      	str	r2, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	647b      	str	r3, [r7, #68]	; 0x44
						sprintUSART2((uint8_t *)p_char);
 8002490:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002492:	f000 f8df 	bl	8002654 <sprintUSART2>
						arg_type = (PRINT_ARG_TYPE_STRING);
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 800249c:	e09a      	b.n	80025d4 <printUSART2+0x33c>
					}
					case('f'):
					{// float
						uint64_t utmp64 = va_arg(vl, uint64_t);			// convert double to float representation IEEE 754
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	3307      	adds	r3, #7
 80024a2:	f023 0307 	bic.w	r3, r3, #7
 80024a6:	f103 0208 	add.w	r2, r3, #8
 80024aa:	603a      	str	r2, [r7, #0]
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
						uint32_t tmp1 = utmp64&0x00000000FFFFFFFF;
 80024b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
						tmp1 = tmp1>>29;
 80024b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ba:	0f5b      	lsrs	r3, r3, #29
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
						utmp32 = utmp64>>32;
 80024be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	000a      	movs	r2, r1
 80024cc:	2300      	movs	r3, #0
 80024ce:	4613      	mov	r3, r2
 80024d0:	607b      	str	r3, [r7, #4]
						utmp32 &= 0x07FFFFFF;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80024d8:	607b      	str	r3, [r7, #4]
						utmp32 = utmp32<<3;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	607b      	str	r3, [r7, #4]
						utmp32 |= tmp1;
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e4:	4313      	orrs	r3, r2
 80024e6:	607b      	str	r3, [r7, #4]
						if(utmp64 & 0x8000000000000000)
 80024e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024ec:	2a00      	cmp	r2, #0
 80024ee:	f173 0300 	sbcs.w	r3, r3, #0
 80024f2:	da03      	bge.n	80024fc <printUSART2+0x264>
							utmp32 |= 0x80000000;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024fa:	607b      	str	r3, [r7, #4]
							
						if(utmp64 & 0x4000000000000000)
 80024fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002500:	f04f 0000 	mov.w	r0, #0
 8002504:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002508:	ea02 0400 	and.w	r4, r2, r0
 800250c:	ea03 0501 	and.w	r5, r3, r1
 8002510:	ea54 0305 	orrs.w	r3, r4, r5
 8002514:	d003      	beq.n	800251e <printUSART2+0x286>
							utmp32 |= 0x40000000;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800251c:	607b      	str	r3, [r7, #4]
							
						p_uint32 = &utmp32;
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	64bb      	str	r3, [r7, #72]	; 0x48
						
						arg_type = (PRINT_ARG_TYPE_FLOAT);
 8002522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002526:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						//arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
						//arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
						break;
 800252a:	e053      	b.n	80025d4 <printUSART2+0x33c>
					}
					case('x'):
					{// hexadecimal 
						if(str[k+2] == 'b')
 800252c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002530:	3302      	adds	r3, #2
 8002532:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002534:	4413      	add	r3, r2
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b62      	cmp	r3, #98	; 0x62
 800253a:	d109      	bne.n	8002550 <printUSART2+0x2b8>
						{// byte
							utmp32 = (uint32_t)va_arg(vl, int);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	1d1a      	adds	r2, r3, #4
 8002540:	603a      	str	r2, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_BYTE);
 8002546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800254a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800254e:	e031      	b.n	80025b4 <printUSART2+0x31c>
						}
						else if(str[k+2] == 'h')
 8002550:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002554:	3302      	adds	r3, #2
 8002556:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002558:	4413      	add	r3, r2
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b68      	cmp	r3, #104	; 0x68
 800255e:	d109      	bne.n	8002574 <printUSART2+0x2dc>
						{// half word
							utmp32 = (uint32_t)va_arg(vl, int);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	1d1a      	adds	r2, r3, #4
 8002564:	603a      	str	r2, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_HALFWORD);
 800256a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002572:	e01f      	b.n	80025b4 <printUSART2+0x31c>
						}
						else if(str[k+2] == 'w')
 8002574:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002578:	3302      	adds	r3, #2
 800257a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800257c:	4413      	add	r3, r2
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b77      	cmp	r3, #119	; 0x77
 8002582:	d109      	bne.n	8002598 <printUSART2+0x300>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	1d1a      	adds	r2, r3, #4
 8002588:	603a      	str	r2, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
 800258e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002592:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002596:	e00d      	b.n	80025b4 <printUSART2+0x31c>
						}
						else
						{
							utmp32 = va_arg(vl, uint32_t);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	1d1a      	adds	r2, r3, #4
 800259c:	603a      	str	r2, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
 80025a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025a6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 80025aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025ae:	3b01      	subs	r3, #1
 80025b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;
 80025b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025b8:	3301      	adds	r3, #1
 80025ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 80025c2:	e007      	b.n	80025d4 <printUSART2+0x33c>
					}
					default:
					{
						utmp32 = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
						p_uint32 = &utmp32;
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	64bb      	str	r3, [r7, #72]	; 0x48
						arg_type = (PRINT_ARG_TYPE_UNKNOWN);
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 80025d2:	bf00      	nop
					}
				}
					
				if(arg_type&(PRINT_ARG_TYPE_MASK_CHAR_STRING))	
 80025d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00c      	beq.n	80025fa <printUSART2+0x362>
				{
					getStr4NumMISC(arg_type, p_uint32, rstr);
 80025e0:	f107 0208 	add.w	r2, r7, #8
 80025e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f924 	bl	8001838 <getStr4NumMISC>
					sprintUSART2(rstr);	
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f82d 	bl	8002654 <sprintUSART2>
				}
				k++;
 80025fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025fe:	3301      	adds	r3, #1
 8002600:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002604:	e011      	b.n	800262a <printUSART2+0x392>
			}
		}
		else
		{// not a '%' char -> print the char
			putcharUSART2(str[k]);
 8002606:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800260c:	4413      	add	r3, r2
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fe2f 	bl	8002274 <putcharUSART2>
			if (str[k] == '\n')
 8002616:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800261a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800261c:	4413      	add	r3, r2
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b0a      	cmp	r3, #10
 8002622:	d102      	bne.n	800262a <printUSART2+0x392>
				putcharUSART2('\r');
 8002624:	200d      	movs	r0, #13
 8002626:	f7ff fe25 	bl	8002274 <putcharUSART2>
		}
		k++;
 800262a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800262e:	3301      	adds	r3, #1
 8002630:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while(str[k] != 0x00)
 8002634:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002638:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f47f ae35 	bne.w	80022ae <printUSART2+0x16>
	}
	
	va_end(vl);
	return;
 8002644:	bf00      	nop
}
 8002646:	3750      	adds	r7, #80	; 0x50
 8002648:	46bd      	mov	sp, r7
 800264a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800264e:	b004      	add	sp, #16
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop

08002654 <sprintUSART2>:

void sprintUSART2(uint8_t * str)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	uint16_t k = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	81fb      	strh	r3, [r7, #14]
	
	while (str[k] != '\0')
 8002660:	e016      	b.n	8002690 <sprintUSART2+0x3c>
    {
        putcharUSART2(str[k]);
 8002662:	89fb      	ldrh	r3, [r7, #14]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fe02 	bl	8002274 <putcharUSART2>
        if (str[k] == '\n')
 8002670:	89fb      	ldrh	r3, [r7, #14]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b0a      	cmp	r3, #10
 800267a:	d102      	bne.n	8002682 <sprintUSART2+0x2e>
            putcharUSART2('\r');
 800267c:	200d      	movs	r0, #13
 800267e:	f7ff fdf9 	bl	8002274 <putcharUSART2>
        k++;
 8002682:	89fb      	ldrh	r3, [r7, #14]
 8002684:	3301      	adds	r3, #1
 8002686:	81fb      	strh	r3, [r7, #14]

        if (k == MAX_PRINT_STRING_SIZE)
 8002688:	89fb      	ldrh	r3, [r7, #14]
 800268a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268e:	d006      	beq.n	800269e <sprintUSART2+0x4a>
	while (str[k] != '\0')
 8002690:	89fb      	ldrh	r3, [r7, #14]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1e2      	bne.n	8002662 <sprintUSART2+0xe>
            break;
    }
}
 800269c:	e000      	b.n	80026a0 <sprintUSART2+0x4c>
            break;
 800269e:	bf00      	nop
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <Reset_Handler>:
 80026a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e0 <LoopFillZerobss+0x12>
 80026ac:	480d      	ldr	r0, [pc, #52]	; (80026e4 <LoopFillZerobss+0x16>)
 80026ae:	490e      	ldr	r1, [pc, #56]	; (80026e8 <LoopFillZerobss+0x1a>)
 80026b0:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <LoopFillZerobss+0x1e>)
 80026b2:	2300      	movs	r3, #0
 80026b4:	e002      	b.n	80026bc <LoopCopyDataInit>

080026b6 <CopyDataInit>:
 80026b6:	58d4      	ldr	r4, [r2, r3]
 80026b8:	50c4      	str	r4, [r0, r3]
 80026ba:	3304      	adds	r3, #4

080026bc <LoopCopyDataInit>:
 80026bc:	18c4      	adds	r4, r0, r3
 80026be:	428c      	cmp	r4, r1
 80026c0:	d3f9      	bcc.n	80026b6 <CopyDataInit>
 80026c2:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <LoopFillZerobss+0x22>)
 80026c4:	4c0b      	ldr	r4, [pc, #44]	; (80026f4 <LoopFillZerobss+0x26>)
 80026c6:	2300      	movs	r3, #0
 80026c8:	e001      	b.n	80026ce <LoopFillZerobss>

080026ca <FillZerobss>:
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	3204      	adds	r2, #4

080026ce <LoopFillZerobss>:
 80026ce:	42a2      	cmp	r2, r4
 80026d0:	d3fb      	bcc.n	80026ca <FillZerobss>
 80026d2:	f7ff fcc3 	bl	800205c <SystemInit>
 80026d6:	f002 f835 	bl	8004744 <__libc_init_array>
 80026da:	f7fe fbad 	bl	8000e38 <main>
 80026de:	4770      	bx	lr
 80026e0:	20020000 	.word	0x20020000
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000088 	.word	0x20000088
 80026ec:	08005d60 	.word	0x08005d60
 80026f0:	20000088 	.word	0x20000088
 80026f4:	200001c8 	.word	0x200001c8

080026f8 <ADC_IRQHandler>:
 80026f8:	e7fe      	b.n	80026f8 <ADC_IRQHandler>
	...

080026fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_Init+0x40>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <HAL_Init+0x40>)
 8002706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800270a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_Init+0x40>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <HAL_Init+0x40>)
 8002712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002716:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <HAL_Init+0x40>)
 800271e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002724:	2003      	movs	r0, #3
 8002726:	f000 fd1b 	bl	8003160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800272a:	2000      	movs	r0, #0
 800272c:	f000 f808 	bl	8002740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002730:	f7ff fb4e 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40023c00 	.word	0x40023c00

08002740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_InitTick+0x54>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_InitTick+0x58>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002756:	fbb3 f3f1 	udiv	r3, r3, r1
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fd33 	bl	80031ca <HAL_SYSTICK_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e00e      	b.n	800278c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b0f      	cmp	r3, #15
 8002772:	d80a      	bhi.n	800278a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002774:	2200      	movs	r2, #0
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800277c:	f000 fcfb 	bl	8003176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <HAL_InitTick+0x5c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000014 	.word	0x20000014
 8002798:	2000001c 	.word	0x2000001c
 800279c:	20000018 	.word	0x20000018

080027a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_IncTick+0x20>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_IncTick+0x24>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <HAL_IncTick+0x24>)
 80027b2:	6013      	str	r3, [r2, #0]
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	2000001c 	.word	0x2000001c
 80027c4:	200001c4 	.word	0x200001c4

080027c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return uwTick;
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_GetTick+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	200001c4 	.word	0x200001c4

080027e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e8:	f7ff ffee 	bl	80027c8 <HAL_GetTick>
 80027ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027f8:	d005      	beq.n	8002806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_Delay+0x44>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4413      	add	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002806:	bf00      	nop
 8002808:	f7ff ffde 	bl	80027c8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	429a      	cmp	r2, r3
 8002816:	d8f7      	bhi.n	8002808 <HAL_Delay+0x28>
  {
  }
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000001c 	.word	0x2000001c

08002828 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e033      	b.n	80028a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff faea 	bl	8001e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b00      	cmp	r3, #0
 8002864:	d118      	bne.n	8002898 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800286e:	f023 0302 	bic.w	r3, r3, #2
 8002872:	f043 0202 	orr.w	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 faa4 	bl	8002dc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f023 0303 	bic.w	r3, r3, #3
 800288e:	f043 0201 	orr.w	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
 8002896:	e001      	b.n	800289c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_Start+0x1a>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e0b2      	b.n	8002a30 <HAL_ADC_Start+0x180>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d018      	beq.n	8002912 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028f0:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <HAL_ADC_Start+0x18c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a52      	ldr	r2, [pc, #328]	; (8002a40 <HAL_ADC_Start+0x190>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	0c9a      	lsrs	r2, r3, #18
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002904:	e002      	b.n	800290c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3b01      	subs	r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f9      	bne.n	8002906 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d17a      	bne.n	8002a16 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800294a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800295a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295e:	d106      	bne.n	800296e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	f023 0206 	bic.w	r2, r3, #6
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	645a      	str	r2, [r3, #68]	; 0x44
 800296c:	e002      	b.n	8002974 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800297c:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <HAL_ADC_Start+0x194>)
 800297e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002988:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2b00      	cmp	r3, #0
 8002994:	d12a      	bne.n	80029ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <HAL_ADC_Start+0x198>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d015      	beq.n	80029cc <HAL_ADC_Start+0x11c>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <HAL_ADC_Start+0x19c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d105      	bne.n	80029b6 <HAL_ADC_Start+0x106>
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <HAL_ADC_Start+0x194>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a25      	ldr	r2, [pc, #148]	; (8002a50 <HAL_ADC_Start+0x1a0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d136      	bne.n	8002a2e <HAL_ADC_Start+0x17e>
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_ADC_Start+0x194>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d130      	bne.n	8002a2e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d129      	bne.n	8002a2e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	e020      	b.n	8002a2e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <HAL_ADC_Start+0x198>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d11b      	bne.n	8002a2e <HAL_ADC_Start+0x17e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d114      	bne.n	8002a2e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e00b      	b.n	8002a2e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	20000014 	.word	0x20000014
 8002a40:	431bde83 	.word	0x431bde83
 8002a44:	40012300 	.word	0x40012300
 8002a48:	40012000 	.word	0x40012000
 8002a4c:	40012100 	.word	0x40012100
 8002a50:	40012200 	.word	0x40012200

08002a54 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a70:	d113      	bne.n	8002a9a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a80:	d10b      	bne.n	8002a9a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f043 0220 	orr.w	r2, r3, #32
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e063      	b.n	8002b62 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002a9a:	f7ff fe95 	bl	80027c8 <HAL_GetTick>
 8002a9e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aa0:	e021      	b.n	8002ae6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aa8:	d01d      	beq.n	8002ae6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_ADC_PollForConversion+0x6c>
 8002ab0:	f7ff fe8a 	bl	80027c8 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d212      	bcs.n	8002ae6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d00b      	beq.n	8002ae6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f043 0204 	orr.w	r2, r3, #4
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e03d      	b.n	8002b62 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d1d6      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0212 	mvn.w	r2, #18
 8002afc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d123      	bne.n	8002b60 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d11f      	bne.n	8002b60 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d006      	beq.n	8002b3c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d111      	bne.n	8002b60 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e105      	b.n	8002dac <HAL_ADC_ConfigChannel+0x228>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b09      	cmp	r3, #9
 8002bae:	d925      	bls.n	8002bfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68d9      	ldr	r1, [r3, #12]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3b1e      	subs	r3, #30
 8002bc6:	2207      	movs	r2, #7
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68d9      	ldr	r1, [r3, #12]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	4603      	mov	r3, r0
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4403      	add	r3, r0
 8002bee:	3b1e      	subs	r3, #30
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	e022      	b.n	8002c42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6919      	ldr	r1, [r3, #16]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	2207      	movs	r2, #7
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6919      	ldr	r1, [r3, #16]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	4618      	mov	r0, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4403      	add	r3, r0
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d824      	bhi.n	8002c94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	3b05      	subs	r3, #5
 8002c5c:	221f      	movs	r2, #31
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	400a      	ands	r2, r1
 8002c6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	3b05      	subs	r3, #5
 8002c86:	fa00 f203 	lsl.w	r2, r0, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34
 8002c92:	e04c      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b0c      	cmp	r3, #12
 8002c9a:	d824      	bhi.n	8002ce6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	3b23      	subs	r3, #35	; 0x23
 8002cae:	221f      	movs	r2, #31
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43da      	mvns	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	400a      	ands	r2, r1
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3b23      	subs	r3, #35	; 0x23
 8002cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce4:	e023      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3b41      	subs	r3, #65	; 0x41
 8002cf8:	221f      	movs	r2, #31
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	400a      	ands	r2, r1
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4618      	mov	r0, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	3b41      	subs	r3, #65	; 0x41
 8002d22:	fa00 f203 	lsl.w	r2, r0, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d2e:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <HAL_ADC_ConfigChannel+0x234>)
 8002d30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <HAL_ADC_ConfigChannel+0x238>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d109      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x1cc>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b12      	cmp	r3, #18
 8002d42:	d105      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a19      	ldr	r2, [pc, #100]	; (8002dbc <HAL_ADC_ConfigChannel+0x238>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d123      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x21e>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	d003      	beq.n	8002d6a <HAL_ADC_ConfigChannel+0x1e6>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b11      	cmp	r3, #17
 8002d68:	d11b      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d111      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <HAL_ADC_ConfigChannel+0x23c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <HAL_ADC_ConfigChannel+0x240>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	0c9a      	lsrs	r2, r3, #18
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d94:	e002      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f9      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40012300 	.word	0x40012300
 8002dbc:	40012000 	.word	0x40012000
 8002dc0:	20000014 	.word	0x20000014
 8002dc4:	431bde83 	.word	0x431bde83

08002dc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dd0:	4b79      	ldr	r3, [pc, #484]	; (8002fb8 <ADC_Init+0x1f0>)
 8002dd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	021a      	lsls	r2, r3, #8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	4a58      	ldr	r2, [pc, #352]	; (8002fbc <ADC_Init+0x1f4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d022      	beq.n	8002ea6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6899      	ldr	r1, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	e00f      	b.n	8002ec6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ec4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0202 	bic.w	r2, r2, #2
 8002ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6899      	ldr	r1, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	7e1b      	ldrb	r3, [r3, #24]
 8002ee0:	005a      	lsls	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01b      	beq.n	8002f2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	035a      	lsls	r2, r3, #13
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	e007      	b.n	8002f3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	051a      	lsls	r2, r3, #20
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f7e:	025a      	lsls	r2, r3, #9
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6899      	ldr	r1, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	029a      	lsls	r2, r3, #10
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40012300 	.word	0x40012300
 8002fbc:	0f000001 	.word	0x0f000001

08002fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff2:	4a04      	ldr	r2, [pc, #16]	; (8003004 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	60d3      	str	r3, [r2, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <__NVIC_GetPriorityGrouping+0x18>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	f003 0307 	and.w	r3, r3, #7
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	db0b      	blt.n	800304e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f003 021f 	and.w	r2, r3, #31
 800303c:	4907      	ldr	r1, [pc, #28]	; (800305c <__NVIC_EnableIRQ+0x38>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	2001      	movs	r0, #1
 8003046:	fa00 f202 	lsl.w	r2, r0, r2
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000e100 	.word	0xe000e100

08003060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	6039      	str	r1, [r7, #0]
 800306a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	2b00      	cmp	r3, #0
 8003072:	db0a      	blt.n	800308a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	b2da      	uxtb	r2, r3
 8003078:	490c      	ldr	r1, [pc, #48]	; (80030ac <__NVIC_SetPriority+0x4c>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	440b      	add	r3, r1
 8003084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003088:	e00a      	b.n	80030a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4908      	ldr	r1, [pc, #32]	; (80030b0 <__NVIC_SetPriority+0x50>)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	3b04      	subs	r3, #4
 8003098:	0112      	lsls	r2, r2, #4
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	440b      	add	r3, r1
 800309e:	761a      	strb	r2, [r3, #24]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000e100 	.word	0xe000e100
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f1c3 0307 	rsb	r3, r3, #7
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	bf28      	it	cs
 80030d2:	2304      	movcs	r3, #4
 80030d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3304      	adds	r3, #4
 80030da:	2b06      	cmp	r3, #6
 80030dc:	d902      	bls.n	80030e4 <NVIC_EncodePriority+0x30>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3b03      	subs	r3, #3
 80030e2:	e000      	b.n	80030e6 <NVIC_EncodePriority+0x32>
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	401a      	ands	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa01 f303 	lsl.w	r3, r1, r3
 8003106:	43d9      	mvns	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	4313      	orrs	r3, r2
         );
}
 800310e:	4618      	mov	r0, r3
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800312c:	d301      	bcc.n	8003132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800312e:	2301      	movs	r3, #1
 8003130:	e00f      	b.n	8003152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <SysTick_Config+0x40>)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800313a:	210f      	movs	r1, #15
 800313c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003140:	f7ff ff8e 	bl	8003060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <SysTick_Config+0x40>)
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <SysTick_Config+0x40>)
 800314c:	2207      	movs	r2, #7
 800314e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	e000e010 	.word	0xe000e010

08003160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff ff29 	bl	8002fc0 <__NVIC_SetPriorityGrouping>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003188:	f7ff ff3e 	bl	8003008 <__NVIC_GetPriorityGrouping>
 800318c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	6978      	ldr	r0, [r7, #20]
 8003194:	f7ff ff8e 	bl	80030b4 <NVIC_EncodePriority>
 8003198:	4602      	mov	r2, r0
 800319a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff5d 	bl	8003060 <__NVIC_SetPriority>
}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	4603      	mov	r3, r0
 80031b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff31 	bl	8003024 <__NVIC_EnableIRQ>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ffa2 	bl	800311c <SysTick_Config>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e16b      	b.n	80034d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003200:	2201      	movs	r2, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	429a      	cmp	r2, r3
 800321a:	f040 815a 	bne.w	80034d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d005      	beq.n	8003236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003232:	2b02      	cmp	r3, #2
 8003234:	d130      	bne.n	8003298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	2203      	movs	r2, #3
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800326c:	2201      	movs	r2, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 0201 	and.w	r2, r3, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d017      	beq.n	80032d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d123      	bne.n	8003328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	08da      	lsrs	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3208      	adds	r2, #8
 8003322:	69b9      	ldr	r1, [r7, #24]
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80b4 	beq.w	80034d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	4b60      	ldr	r3, [pc, #384]	; (80034f0 <HAL_GPIO_Init+0x30c>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	4a5f      	ldr	r2, [pc, #380]	; (80034f0 <HAL_GPIO_Init+0x30c>)
 8003374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003378:	6453      	str	r3, [r2, #68]	; 0x44
 800337a:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <HAL_GPIO_Init+0x30c>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003386:	4a5b      	ldr	r2, [pc, #364]	; (80034f4 <HAL_GPIO_Init+0x310>)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	089b      	lsrs	r3, r3, #2
 800338c:	3302      	adds	r3, #2
 800338e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a52      	ldr	r2, [pc, #328]	; (80034f8 <HAL_GPIO_Init+0x314>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d02b      	beq.n	800340a <HAL_GPIO_Init+0x226>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a51      	ldr	r2, [pc, #324]	; (80034fc <HAL_GPIO_Init+0x318>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d025      	beq.n	8003406 <HAL_GPIO_Init+0x222>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a50      	ldr	r2, [pc, #320]	; (8003500 <HAL_GPIO_Init+0x31c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01f      	beq.n	8003402 <HAL_GPIO_Init+0x21e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4f      	ldr	r2, [pc, #316]	; (8003504 <HAL_GPIO_Init+0x320>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d019      	beq.n	80033fe <HAL_GPIO_Init+0x21a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4e      	ldr	r2, [pc, #312]	; (8003508 <HAL_GPIO_Init+0x324>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_GPIO_Init+0x216>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4d      	ldr	r2, [pc, #308]	; (800350c <HAL_GPIO_Init+0x328>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00d      	beq.n	80033f6 <HAL_GPIO_Init+0x212>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4c      	ldr	r2, [pc, #304]	; (8003510 <HAL_GPIO_Init+0x32c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <HAL_GPIO_Init+0x20e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4b      	ldr	r2, [pc, #300]	; (8003514 <HAL_GPIO_Init+0x330>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d101      	bne.n	80033ee <HAL_GPIO_Init+0x20a>
 80033ea:	2307      	movs	r3, #7
 80033ec:	e00e      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033ee:	2308      	movs	r3, #8
 80033f0:	e00c      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033f2:	2306      	movs	r3, #6
 80033f4:	e00a      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033f6:	2305      	movs	r3, #5
 80033f8:	e008      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033fa:	2304      	movs	r3, #4
 80033fc:	e006      	b.n	800340c <HAL_GPIO_Init+0x228>
 80033fe:	2303      	movs	r3, #3
 8003400:	e004      	b.n	800340c <HAL_GPIO_Init+0x228>
 8003402:	2302      	movs	r3, #2
 8003404:	e002      	b.n	800340c <HAL_GPIO_Init+0x228>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_GPIO_Init+0x228>
 800340a:	2300      	movs	r3, #0
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	f002 0203 	and.w	r2, r2, #3
 8003412:	0092      	lsls	r2, r2, #2
 8003414:	4093      	lsls	r3, r2
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800341c:	4935      	ldr	r1, [pc, #212]	; (80034f4 <HAL_GPIO_Init+0x310>)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	3302      	adds	r3, #2
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_GPIO_Init+0x334>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800344e:	4a32      	ldr	r2, [pc, #200]	; (8003518 <HAL_GPIO_Init+0x334>)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003454:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_GPIO_Init+0x334>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003478:	4a27      	ldr	r2, [pc, #156]	; (8003518 <HAL_GPIO_Init+0x334>)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <HAL_GPIO_Init+0x334>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034a2:	4a1d      	ldr	r2, [pc, #116]	; (8003518 <HAL_GPIO_Init+0x334>)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034a8:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_GPIO_Init+0x334>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034cc:	4a12      	ldr	r2, [pc, #72]	; (8003518 <HAL_GPIO_Init+0x334>)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3301      	adds	r3, #1
 80034d6:	61fb      	str	r3, [r7, #28]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b0f      	cmp	r3, #15
 80034dc:	f67f ae90 	bls.w	8003200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40013800 	.word	0x40013800
 80034f8:	40020000 	.word	0x40020000
 80034fc:	40020400 	.word	0x40020400
 8003500:	40020800 	.word	0x40020800
 8003504:	40020c00 	.word	0x40020c00
 8003508:	40021000 	.word	0x40021000
 800350c:	40021400 	.word	0x40021400
 8003510:	40021800 	.word	0x40021800
 8003514:	40021c00 	.word	0x40021c00
 8003518:	40013c00 	.word	0x40013c00

0800351c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e001      	b.n	800353e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
 8003558:	4613      	mov	r3, r2
 800355a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800355c:	787b      	ldrb	r3, [r7, #1]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003568:	e003      	b.n	8003572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800356a:	887b      	ldrh	r3, [r7, #2]
 800356c:	041a      	lsls	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	619a      	str	r2, [r3, #24]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	460b      	mov	r3, r1
 8003588:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003590:	887a      	ldrh	r2, [r7, #2]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4013      	ands	r3, r2
 8003596:	041a      	lsls	r2, r3, #16
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43d9      	mvns	r1, r3
 800359c:	887b      	ldrh	r3, [r7, #2]
 800359e:	400b      	ands	r3, r1
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	619a      	str	r2, [r3, #24]
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d006      	beq.n	80035d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035ca:	4a05      	ldr	r2, [pc, #20]	; (80035e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f806 	bl	80035e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40013c00 	.word	0x40013c00

080035e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003600:	4b03      	ldr	r3, [pc, #12]	; (8003610 <HAL_RCC_GetHCLKFreq+0x14>)
 8003602:	681b      	ldr	r3, [r3, #0]
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000014 	.word	0x20000014

08003614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003618:	f7ff fff0 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	0a9b      	lsrs	r3, r3, #10
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4903      	ldr	r1, [pc, #12]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40023800 	.word	0x40023800
 8003638:	08005d00 	.word	0x08005d00

0800363c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003640:	f7ff ffdc 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0b5b      	lsrs	r3, r3, #13
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4903      	ldr	r1, [pc, #12]	; (8003660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40023800 	.word	0x40023800
 8003660:	08005d00 	.word	0x08005d00

08003664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e041      	b.n	80036fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fe fc0c 	bl	8001ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3304      	adds	r3, #4
 80036a0:	4619      	mov	r1, r3
 80036a2:	4610      	mov	r0, r2
 80036a4:	f000 fa72 	bl	8003b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	d001      	beq.n	800371c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e046      	b.n	80037aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a23      	ldr	r2, [pc, #140]	; (80037b8 <HAL_TIM_Base_Start+0xb4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d022      	beq.n	8003774 <HAL_TIM_Base_Start+0x70>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003736:	d01d      	beq.n	8003774 <HAL_TIM_Base_Start+0x70>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <HAL_TIM_Base_Start+0xb8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d018      	beq.n	8003774 <HAL_TIM_Base_Start+0x70>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <HAL_TIM_Base_Start+0xbc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_TIM_Base_Start+0x70>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <HAL_TIM_Base_Start+0xc0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_TIM_Base_Start+0x70>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <HAL_TIM_Base_Start+0xc4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_TIM_Base_Start+0x70>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a19      	ldr	r2, [pc, #100]	; (80037cc <HAL_TIM_Base_Start+0xc8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_TIM_Base_Start+0x70>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_TIM_Base_Start+0xcc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d111      	bne.n	8003798 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b06      	cmp	r3, #6
 8003784:	d010      	beq.n	80037a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003796:	e007      	b.n	80037a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40010400 	.word	0x40010400
 80037cc:	40014000 	.word	0x40014000
 80037d0:	40001800 	.word	0x40001800

080037d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e041      	b.n	800386a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f839 	bl	8003872 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f000 f9ba 	bl	8003b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0ac      	b.n	80039fc <HAL_TIM_PWM_ConfigChannel+0x174>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	f200 809f 	bhi.w	80039f0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038ed 	.word	0x080038ed
 80038bc:	080039f1 	.word	0x080039f1
 80038c0:	080039f1 	.word	0x080039f1
 80038c4:	080039f1 	.word	0x080039f1
 80038c8:	0800392d 	.word	0x0800392d
 80038cc:	080039f1 	.word	0x080039f1
 80038d0:	080039f1 	.word	0x080039f1
 80038d4:	080039f1 	.word	0x080039f1
 80038d8:	0800396f 	.word	0x0800396f
 80038dc:	080039f1 	.word	0x080039f1
 80038e0:	080039f1 	.word	0x080039f1
 80038e4:	080039f1 	.word	0x080039f1
 80038e8:	080039af 	.word	0x080039af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f9ea 	bl	8003ccc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0208 	orr.w	r2, r2, #8
 8003906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0204 	bic.w	r2, r2, #4
 8003916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6999      	ldr	r1, [r3, #24]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	619a      	str	r2, [r3, #24]
      break;
 800392a:	e062      	b.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fa3a 	bl	8003dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6999      	ldr	r1, [r3, #24]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	021a      	lsls	r2, r3, #8
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	619a      	str	r2, [r3, #24]
      break;
 800396c:	e041      	b.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fa8f 	bl	8003e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0208 	orr.w	r2, r2, #8
 8003988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0204 	bic.w	r2, r2, #4
 8003998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69d9      	ldr	r1, [r3, #28]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	61da      	str	r2, [r3, #28]
      break;
 80039ac:	e021      	b.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fae3 	bl	8003f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69d9      	ldr	r1, [r3, #28]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	021a      	lsls	r2, r3, #8
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	61da      	str	r2, [r3, #28]
      break;
 80039ee:	e000      	b.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80039f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_TIM_ConfigClockSource+0x18>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e0b3      	b.n	8003b84 <HAL_TIM_ConfigClockSource+0x180>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a54:	d03e      	beq.n	8003ad4 <HAL_TIM_ConfigClockSource+0xd0>
 8003a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5a:	f200 8087 	bhi.w	8003b6c <HAL_TIM_ConfigClockSource+0x168>
 8003a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a62:	f000 8085 	beq.w	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6a:	d87f      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x168>
 8003a6c:	2b70      	cmp	r3, #112	; 0x70
 8003a6e:	d01a      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0xa2>
 8003a70:	2b70      	cmp	r3, #112	; 0x70
 8003a72:	d87b      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x168>
 8003a74:	2b60      	cmp	r3, #96	; 0x60
 8003a76:	d050      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x116>
 8003a78:	2b60      	cmp	r3, #96	; 0x60
 8003a7a:	d877      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x168>
 8003a7c:	2b50      	cmp	r3, #80	; 0x50
 8003a7e:	d03c      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0xf6>
 8003a80:	2b50      	cmp	r3, #80	; 0x50
 8003a82:	d873      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x168>
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d058      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x136>
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d86f      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x168>
 8003a8c:	2b30      	cmp	r3, #48	; 0x30
 8003a8e:	d064      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x156>
 8003a90:	2b30      	cmp	r3, #48	; 0x30
 8003a92:	d86b      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x168>
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d060      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x156>
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d867      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x168>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d05c      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x156>
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d05a      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003aa4:	e062      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	6899      	ldr	r1, [r3, #8]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f000 fb33 	bl	8004120 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ac8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	609a      	str	r2, [r3, #8]
      break;
 8003ad2:	e04e      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6899      	ldr	r1, [r3, #8]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f000 fb1c 	bl	8004120 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003af6:	609a      	str	r2, [r3, #8]
      break;
 8003af8:	e03b      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f000 fa90 	bl	800402c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2150      	movs	r1, #80	; 0x50
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fae9 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003b18:	e02b      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6859      	ldr	r1, [r3, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f000 faaf 	bl	800408a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2160      	movs	r1, #96	; 0x60
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fad9 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003b38:	e01b      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6859      	ldr	r1, [r3, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f000 fa70 	bl	800402c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2140      	movs	r1, #64	; 0x40
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fac9 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003b58:	e00b      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f000 fac0 	bl	80040ea <TIM_ITRx_SetConfig>
        break;
 8003b6a:	e002      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b6c:	bf00      	nop
 8003b6e:	e000      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a40      	ldr	r2, [pc, #256]	; (8003ca0 <TIM_Base_SetConfig+0x114>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <TIM_Base_SetConfig+0x40>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003baa:	d00f      	beq.n	8003bcc <TIM_Base_SetConfig+0x40>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a3d      	ldr	r2, [pc, #244]	; (8003ca4 <TIM_Base_SetConfig+0x118>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <TIM_Base_SetConfig+0x40>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a3c      	ldr	r2, [pc, #240]	; (8003ca8 <TIM_Base_SetConfig+0x11c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d007      	beq.n	8003bcc <TIM_Base_SetConfig+0x40>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a3b      	ldr	r2, [pc, #236]	; (8003cac <TIM_Base_SetConfig+0x120>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_Base_SetConfig+0x40>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a3a      	ldr	r2, [pc, #232]	; (8003cb0 <TIM_Base_SetConfig+0x124>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d108      	bne.n	8003bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a2f      	ldr	r2, [pc, #188]	; (8003ca0 <TIM_Base_SetConfig+0x114>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d02b      	beq.n	8003c3e <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bec:	d027      	beq.n	8003c3e <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a2c      	ldr	r2, [pc, #176]	; (8003ca4 <TIM_Base_SetConfig+0x118>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d023      	beq.n	8003c3e <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2b      	ldr	r2, [pc, #172]	; (8003ca8 <TIM_Base_SetConfig+0x11c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01f      	beq.n	8003c3e <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a2a      	ldr	r2, [pc, #168]	; (8003cac <TIM_Base_SetConfig+0x120>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d01b      	beq.n	8003c3e <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a29      	ldr	r2, [pc, #164]	; (8003cb0 <TIM_Base_SetConfig+0x124>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d017      	beq.n	8003c3e <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a28      	ldr	r2, [pc, #160]	; (8003cb4 <TIM_Base_SetConfig+0x128>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a27      	ldr	r2, [pc, #156]	; (8003cb8 <TIM_Base_SetConfig+0x12c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00f      	beq.n	8003c3e <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a26      	ldr	r2, [pc, #152]	; (8003cbc <TIM_Base_SetConfig+0x130>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00b      	beq.n	8003c3e <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <TIM_Base_SetConfig+0x134>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d007      	beq.n	8003c3e <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a24      	ldr	r2, [pc, #144]	; (8003cc4 <TIM_Base_SetConfig+0x138>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d003      	beq.n	8003c3e <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a23      	ldr	r2, [pc, #140]	; (8003cc8 <TIM_Base_SetConfig+0x13c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d108      	bne.n	8003c50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <TIM_Base_SetConfig+0x114>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <TIM_Base_SetConfig+0xf8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <TIM_Base_SetConfig+0x124>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d103      	bne.n	8003c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	615a      	str	r2, [r3, #20]
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800
 8003cac:	40000c00 	.word	0x40000c00
 8003cb0:	40010400 	.word	0x40010400
 8003cb4:	40014000 	.word	0x40014000
 8003cb8:	40014400 	.word	0x40014400
 8003cbc:	40014800 	.word	0x40014800
 8003cc0:	40001800 	.word	0x40001800
 8003cc4:	40001c00 	.word	0x40001c00
 8003cc8:	40002000 	.word	0x40002000

08003ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f023 0201 	bic.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 0302 	bic.w	r3, r3, #2
 8003d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a20      	ldr	r2, [pc, #128]	; (8003da4 <TIM_OC1_SetConfig+0xd8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_OC1_SetConfig+0x64>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <TIM_OC1_SetConfig+0xdc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10c      	bne.n	8003d4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0308 	bic.w	r3, r3, #8
 8003d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <TIM_OC1_SetConfig+0xd8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d003      	beq.n	8003d5a <TIM_OC1_SetConfig+0x8e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a14      	ldr	r2, [pc, #80]	; (8003da8 <TIM_OC1_SetConfig+0xdc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d111      	bne.n	8003d7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	621a      	str	r2, [r3, #32]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40010400 	.word	0x40010400

08003dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0210 	bic.w	r2, r3, #16
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0320 	bic.w	r3, r3, #32
 8003df6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <TIM_OC2_SetConfig+0xe4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d003      	beq.n	8003e14 <TIM_OC2_SetConfig+0x68>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a21      	ldr	r2, [pc, #132]	; (8003e94 <TIM_OC2_SetConfig+0xe8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d10d      	bne.n	8003e30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <TIM_OC2_SetConfig+0xe4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d003      	beq.n	8003e40 <TIM_OC2_SetConfig+0x94>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <TIM_OC2_SetConfig+0xe8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d113      	bne.n	8003e68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40010000 	.word	0x40010000
 8003e94:	40010400 	.word	0x40010400

08003e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <TIM_OC3_SetConfig+0xe0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d003      	beq.n	8003efe <TIM_OC3_SetConfig+0x66>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a20      	ldr	r2, [pc, #128]	; (8003f7c <TIM_OC3_SetConfig+0xe4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10d      	bne.n	8003f1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <TIM_OC3_SetConfig+0xe0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC3_SetConfig+0x92>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <TIM_OC3_SetConfig+0xe4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d113      	bne.n	8003f52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	621a      	str	r2, [r3, #32]
}
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40010400 	.word	0x40010400

08003f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	031b      	lsls	r3, r3, #12
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a12      	ldr	r2, [pc, #72]	; (8004024 <TIM_OC4_SetConfig+0xa4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_OC4_SetConfig+0x68>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a11      	ldr	r2, [pc, #68]	; (8004028 <TIM_OC4_SetConfig+0xa8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d109      	bne.n	8003ffc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	019b      	lsls	r3, r3, #6
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	621a      	str	r2, [r3, #32]
}
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40010000 	.word	0x40010000
 8004028:	40010400 	.word	0x40010400

0800402c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f023 0201 	bic.w	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 030a 	bic.w	r3, r3, #10
 8004068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800408a:	b480      	push	{r7}
 800408c:	b087      	sub	sp, #28
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f023 0210 	bic.w	r2, r3, #16
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	031b      	lsls	r3, r3, #12
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	621a      	str	r2, [r3, #32]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	f043 0307 	orr.w	r3, r3, #7
 800410c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	609a      	str	r2, [r3, #8]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800413a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	021a      	lsls	r2, r3, #8
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	431a      	orrs	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4313      	orrs	r3, r2
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	609a      	str	r2, [r3, #8]
}
 8004154:	bf00      	nop
 8004156:	371c      	adds	r7, #28
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e03f      	b.n	80041f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd feea 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2224      	movs	r2, #36	; 0x24
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f905 	bl	80043b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b08a      	sub	sp, #40	; 0x28
 80041fe:	af02      	add	r7, sp, #8
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	4613      	mov	r3, r2
 8004208:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b20      	cmp	r3, #32
 8004218:	d17c      	bne.n	8004314 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_UART_Transmit+0x2c>
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e075      	b.n	8004316 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_UART_Transmit+0x3e>
 8004234:	2302      	movs	r3, #2
 8004236:	e06e      	b.n	8004316 <HAL_UART_Transmit+0x11c>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2221      	movs	r2, #33	; 0x21
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800424e:	f7fe fabb 	bl	80027c8 <HAL_GetTick>
 8004252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	88fa      	ldrh	r2, [r7, #6]
 8004258:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	88fa      	ldrh	r2, [r7, #6]
 800425e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004268:	d108      	bne.n	800427c <HAL_UART_Transmit+0x82>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d104      	bne.n	800427c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	e003      	b.n	8004284 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004280:	2300      	movs	r3, #0
 8004282:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800428c:	e02a      	b.n	80042e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2200      	movs	r2, #0
 8004296:	2180      	movs	r1, #128	; 0x80
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f840 	bl	800431e <UART_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e036      	b.n	8004316 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10b      	bne.n	80042c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	3302      	adds	r3, #2
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	e007      	b.n	80042d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	3301      	adds	r3, #1
 80042d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1cf      	bne.n	800428e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2200      	movs	r2, #0
 80042f6:	2140      	movs	r1, #64	; 0x40
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f810 	bl	800431e <UART_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e006      	b.n	8004316 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	e000      	b.n	8004316 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
  }
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	4613      	mov	r3, r2
 800432c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432e:	e02c      	b.n	800438a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004336:	d028      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <UART_WaitOnFlagUntilTimeout+0x30>
 800433e:	f7fe fa43 	bl	80027c8 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	429a      	cmp	r2, r3
 800434c:	d21d      	bcs.n	800438a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800435c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e00f      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4013      	ands	r3, r2
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	bf0c      	ite	eq
 800439a:	2301      	moveq	r3, #1
 800439c:	2300      	movne	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d0c3      	beq.n	8004330 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b8:	b09f      	sub	sp, #124	; 0x7c
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ca:	68d9      	ldr	r1, [r3, #12]
 80043cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	ea40 0301 	orr.w	r3, r0, r1
 80043d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	431a      	orrs	r2, r3
 80043e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80043ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043f8:	f021 010c 	bic.w	r1, r1, #12
 80043fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004402:	430b      	orrs	r3, r1
 8004404:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004412:	6999      	ldr	r1, [r3, #24]
 8004414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	ea40 0301 	orr.w	r3, r0, r1
 800441c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800441e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4bc5      	ldr	r3, [pc, #788]	; (8004738 <UART_SetConfig+0x384>)
 8004424:	429a      	cmp	r2, r3
 8004426:	d004      	beq.n	8004432 <UART_SetConfig+0x7e>
 8004428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4bc3      	ldr	r3, [pc, #780]	; (800473c <UART_SetConfig+0x388>)
 800442e:	429a      	cmp	r2, r3
 8004430:	d103      	bne.n	800443a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004432:	f7ff f903 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 8004436:	6778      	str	r0, [r7, #116]	; 0x74
 8004438:	e002      	b.n	8004440 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800443a:	f7ff f8eb 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 800443e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004448:	f040 80b6 	bne.w	80045b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800444c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800444e:	461c      	mov	r4, r3
 8004450:	f04f 0500 	mov.w	r5, #0
 8004454:	4622      	mov	r2, r4
 8004456:	462b      	mov	r3, r5
 8004458:	1891      	adds	r1, r2, r2
 800445a:	6439      	str	r1, [r7, #64]	; 0x40
 800445c:	415b      	adcs	r3, r3
 800445e:	647b      	str	r3, [r7, #68]	; 0x44
 8004460:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004464:	1912      	adds	r2, r2, r4
 8004466:	eb45 0303 	adc.w	r3, r5, r3
 800446a:	f04f 0000 	mov.w	r0, #0
 800446e:	f04f 0100 	mov.w	r1, #0
 8004472:	00d9      	lsls	r1, r3, #3
 8004474:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004478:	00d0      	lsls	r0, r2, #3
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	1911      	adds	r1, r2, r4
 8004480:	6639      	str	r1, [r7, #96]	; 0x60
 8004482:	416b      	adcs	r3, r5
 8004484:	667b      	str	r3, [r7, #100]	; 0x64
 8004486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	461a      	mov	r2, r3
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	1891      	adds	r1, r2, r2
 8004492:	63b9      	str	r1, [r7, #56]	; 0x38
 8004494:	415b      	adcs	r3, r3
 8004496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004498:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800449c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80044a0:	f7fc fb4e 	bl	8000b40 <__aeabi_uldivmod>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4ba5      	ldr	r3, [pc, #660]	; (8004740 <UART_SetConfig+0x38c>)
 80044aa:	fba3 2302 	umull	r2, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	011e      	lsls	r6, r3, #4
 80044b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b4:	461c      	mov	r4, r3
 80044b6:	f04f 0500 	mov.w	r5, #0
 80044ba:	4622      	mov	r2, r4
 80044bc:	462b      	mov	r3, r5
 80044be:	1891      	adds	r1, r2, r2
 80044c0:	6339      	str	r1, [r7, #48]	; 0x30
 80044c2:	415b      	adcs	r3, r3
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
 80044c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044ca:	1912      	adds	r2, r2, r4
 80044cc:	eb45 0303 	adc.w	r3, r5, r3
 80044d0:	f04f 0000 	mov.w	r0, #0
 80044d4:	f04f 0100 	mov.w	r1, #0
 80044d8:	00d9      	lsls	r1, r3, #3
 80044da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044de:	00d0      	lsls	r0, r2, #3
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	1911      	adds	r1, r2, r4
 80044e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80044e8:	416b      	adcs	r3, r5
 80044ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	461a      	mov	r2, r3
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	1891      	adds	r1, r2, r2
 80044f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80044fa:	415b      	adcs	r3, r3
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004502:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004506:	f7fc fb1b 	bl	8000b40 <__aeabi_uldivmod>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4b8c      	ldr	r3, [pc, #560]	; (8004740 <UART_SetConfig+0x38c>)
 8004510:	fba3 1302 	umull	r1, r3, r3, r2
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	2164      	movs	r1, #100	; 0x64
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	3332      	adds	r3, #50	; 0x32
 8004522:	4a87      	ldr	r2, [pc, #540]	; (8004740 <UART_SetConfig+0x38c>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004530:	441e      	add	r6, r3
 8004532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004534:	4618      	mov	r0, r3
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	1894      	adds	r4, r2, r2
 8004540:	623c      	str	r4, [r7, #32]
 8004542:	415b      	adcs	r3, r3
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
 8004546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800454a:	1812      	adds	r2, r2, r0
 800454c:	eb41 0303 	adc.w	r3, r1, r3
 8004550:	f04f 0400 	mov.w	r4, #0
 8004554:	f04f 0500 	mov.w	r5, #0
 8004558:	00dd      	lsls	r5, r3, #3
 800455a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800455e:	00d4      	lsls	r4, r2, #3
 8004560:	4622      	mov	r2, r4
 8004562:	462b      	mov	r3, r5
 8004564:	1814      	adds	r4, r2, r0
 8004566:	653c      	str	r4, [r7, #80]	; 0x50
 8004568:	414b      	adcs	r3, r1
 800456a:	657b      	str	r3, [r7, #84]	; 0x54
 800456c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	461a      	mov	r2, r3
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	1891      	adds	r1, r2, r2
 8004578:	61b9      	str	r1, [r7, #24]
 800457a:	415b      	adcs	r3, r3
 800457c:	61fb      	str	r3, [r7, #28]
 800457e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004582:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004586:	f7fc fadb 	bl	8000b40 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4b6c      	ldr	r3, [pc, #432]	; (8004740 <UART_SetConfig+0x38c>)
 8004590:	fba3 1302 	umull	r1, r3, r3, r2
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	2164      	movs	r1, #100	; 0x64
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	3332      	adds	r3, #50	; 0x32
 80045a2:	4a67      	ldr	r2, [pc, #412]	; (8004740 <UART_SetConfig+0x38c>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	f003 0207 	and.w	r2, r3, #7
 80045ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4432      	add	r2, r6
 80045b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045b6:	e0b9      	b.n	800472c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ba:	461c      	mov	r4, r3
 80045bc:	f04f 0500 	mov.w	r5, #0
 80045c0:	4622      	mov	r2, r4
 80045c2:	462b      	mov	r3, r5
 80045c4:	1891      	adds	r1, r2, r2
 80045c6:	6139      	str	r1, [r7, #16]
 80045c8:	415b      	adcs	r3, r3
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045d0:	1912      	adds	r2, r2, r4
 80045d2:	eb45 0303 	adc.w	r3, r5, r3
 80045d6:	f04f 0000 	mov.w	r0, #0
 80045da:	f04f 0100 	mov.w	r1, #0
 80045de:	00d9      	lsls	r1, r3, #3
 80045e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045e4:	00d0      	lsls	r0, r2, #3
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	eb12 0804 	adds.w	r8, r2, r4
 80045ee:	eb43 0905 	adc.w	r9, r3, r5
 80045f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f04f 0100 	mov.w	r1, #0
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	008b      	lsls	r3, r1, #2
 8004606:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800460a:	0082      	lsls	r2, r0, #2
 800460c:	4640      	mov	r0, r8
 800460e:	4649      	mov	r1, r9
 8004610:	f7fc fa96 	bl	8000b40 <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4b49      	ldr	r3, [pc, #292]	; (8004740 <UART_SetConfig+0x38c>)
 800461a:	fba3 2302 	umull	r2, r3, r3, r2
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	011e      	lsls	r6, r3, #4
 8004622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004624:	4618      	mov	r0, r3
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	1894      	adds	r4, r2, r2
 8004630:	60bc      	str	r4, [r7, #8]
 8004632:	415b      	adcs	r3, r3
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800463a:	1812      	adds	r2, r2, r0
 800463c:	eb41 0303 	adc.w	r3, r1, r3
 8004640:	f04f 0400 	mov.w	r4, #0
 8004644:	f04f 0500 	mov.w	r5, #0
 8004648:	00dd      	lsls	r5, r3, #3
 800464a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800464e:	00d4      	lsls	r4, r2, #3
 8004650:	4622      	mov	r2, r4
 8004652:	462b      	mov	r3, r5
 8004654:	1814      	adds	r4, r2, r0
 8004656:	64bc      	str	r4, [r7, #72]	; 0x48
 8004658:	414b      	adcs	r3, r1
 800465a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800465c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	4618      	mov	r0, r3
 8004662:	f04f 0100 	mov.w	r1, #0
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	008b      	lsls	r3, r1, #2
 8004670:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004674:	0082      	lsls	r2, r0, #2
 8004676:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800467a:	f7fc fa61 	bl	8000b40 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4b2f      	ldr	r3, [pc, #188]	; (8004740 <UART_SetConfig+0x38c>)
 8004684:	fba3 1302 	umull	r1, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2164      	movs	r1, #100	; 0x64
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	3332      	adds	r3, #50	; 0x32
 8004696:	4a2a      	ldr	r2, [pc, #168]	; (8004740 <UART_SetConfig+0x38c>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a2:	441e      	add	r6, r3
 80046a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a6:	4618      	mov	r0, r3
 80046a8:	f04f 0100 	mov.w	r1, #0
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	1894      	adds	r4, r2, r2
 80046b2:	603c      	str	r4, [r7, #0]
 80046b4:	415b      	adcs	r3, r3
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046bc:	1812      	adds	r2, r2, r0
 80046be:	eb41 0303 	adc.w	r3, r1, r3
 80046c2:	f04f 0400 	mov.w	r4, #0
 80046c6:	f04f 0500 	mov.w	r5, #0
 80046ca:	00dd      	lsls	r5, r3, #3
 80046cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046d0:	00d4      	lsls	r4, r2, #3
 80046d2:	4622      	mov	r2, r4
 80046d4:	462b      	mov	r3, r5
 80046d6:	eb12 0a00 	adds.w	sl, r2, r0
 80046da:	eb43 0b01 	adc.w	fp, r3, r1
 80046de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f04f 0100 	mov.w	r1, #0
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	008b      	lsls	r3, r1, #2
 80046f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046f6:	0082      	lsls	r2, r0, #2
 80046f8:	4650      	mov	r0, sl
 80046fa:	4659      	mov	r1, fp
 80046fc:	f7fc fa20 	bl	8000b40 <__aeabi_uldivmod>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <UART_SetConfig+0x38c>)
 8004706:	fba3 1302 	umull	r1, r3, r3, r2
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	2164      	movs	r1, #100	; 0x64
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	3332      	adds	r3, #50	; 0x32
 8004718:	4a09      	ldr	r2, [pc, #36]	; (8004740 <UART_SetConfig+0x38c>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	f003 020f 	and.w	r2, r3, #15
 8004724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4432      	add	r2, r6
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	377c      	adds	r7, #124	; 0x7c
 8004730:	46bd      	mov	sp, r7
 8004732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004736:	bf00      	nop
 8004738:	40011000 	.word	0x40011000
 800473c:	40011400 	.word	0x40011400
 8004740:	51eb851f 	.word	0x51eb851f

08004744 <__libc_init_array>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	4d0d      	ldr	r5, [pc, #52]	; (800477c <__libc_init_array+0x38>)
 8004748:	4c0d      	ldr	r4, [pc, #52]	; (8004780 <__libc_init_array+0x3c>)
 800474a:	1b64      	subs	r4, r4, r5
 800474c:	10a4      	asrs	r4, r4, #2
 800474e:	2600      	movs	r6, #0
 8004750:	42a6      	cmp	r6, r4
 8004752:	d109      	bne.n	8004768 <__libc_init_array+0x24>
 8004754:	4d0b      	ldr	r5, [pc, #44]	; (8004784 <__libc_init_array+0x40>)
 8004756:	4c0c      	ldr	r4, [pc, #48]	; (8004788 <__libc_init_array+0x44>)
 8004758:	f001 f9da 	bl	8005b10 <_init>
 800475c:	1b64      	subs	r4, r4, r5
 800475e:	10a4      	asrs	r4, r4, #2
 8004760:	2600      	movs	r6, #0
 8004762:	42a6      	cmp	r6, r4
 8004764:	d105      	bne.n	8004772 <__libc_init_array+0x2e>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	f855 3b04 	ldr.w	r3, [r5], #4
 800476c:	4798      	blx	r3
 800476e:	3601      	adds	r6, #1
 8004770:	e7ee      	b.n	8004750 <__libc_init_array+0xc>
 8004772:	f855 3b04 	ldr.w	r3, [r5], #4
 8004776:	4798      	blx	r3
 8004778:	3601      	adds	r6, #1
 800477a:	e7f2      	b.n	8004762 <__libc_init_array+0x1e>
 800477c:	08005d58 	.word	0x08005d58
 8004780:	08005d58 	.word	0x08005d58
 8004784:	08005d58 	.word	0x08005d58
 8004788:	08005d5c 	.word	0x08005d5c
 800478c:	00000000 	.word	0x00000000

08004790 <log>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	ed2d 8b02 	vpush	{d8}
 8004796:	ec55 4b10 	vmov	r4, r5, d0
 800479a:	f000 f8f1 	bl	8004980 <__ieee754_log>
 800479e:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <log+0x88>)
 80047a0:	eeb0 8a40 	vmov.f32	s16, s0
 80047a4:	eef0 8a60 	vmov.f32	s17, s1
 80047a8:	f993 3000 	ldrsb.w	r3, [r3]
 80047ac:	3301      	adds	r3, #1
 80047ae:	d01a      	beq.n	80047e6 <log+0x56>
 80047b0:	4622      	mov	r2, r4
 80047b2:	462b      	mov	r3, r5
 80047b4:	4620      	mov	r0, r4
 80047b6:	4629      	mov	r1, r5
 80047b8:	f7fc f95c 	bl	8000a74 <__aeabi_dcmpun>
 80047bc:	b998      	cbnz	r0, 80047e6 <log+0x56>
 80047be:	2200      	movs	r2, #0
 80047c0:	2300      	movs	r3, #0
 80047c2:	4620      	mov	r0, r4
 80047c4:	4629      	mov	r1, r5
 80047c6:	f7fc f94b 	bl	8000a60 <__aeabi_dcmpgt>
 80047ca:	b960      	cbnz	r0, 80047e6 <log+0x56>
 80047cc:	2200      	movs	r2, #0
 80047ce:	2300      	movs	r3, #0
 80047d0:	4620      	mov	r0, r4
 80047d2:	4629      	mov	r1, r5
 80047d4:	f7fc f91c 	bl	8000a10 <__aeabi_dcmpeq>
 80047d8:	b160      	cbz	r0, 80047f4 <log+0x64>
 80047da:	f001 f993 	bl	8005b04 <__errno>
 80047de:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8004810 <log+0x80>
 80047e2:	2322      	movs	r3, #34	; 0x22
 80047e4:	6003      	str	r3, [r0, #0]
 80047e6:	eeb0 0a48 	vmov.f32	s0, s16
 80047ea:	eef0 0a68 	vmov.f32	s1, s17
 80047ee:	ecbd 8b02 	vpop	{d8}
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	f001 f986 	bl	8005b04 <__errno>
 80047f8:	ecbd 8b02 	vpop	{d8}
 80047fc:	2321      	movs	r3, #33	; 0x21
 80047fe:	6003      	str	r3, [r0, #0]
 8004800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004804:	4805      	ldr	r0, [pc, #20]	; (800481c <log+0x8c>)
 8004806:	f001 b863 	b.w	80058d0 <nan>
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w
 8004810:	00000000 	.word	0x00000000
 8004814:	fff00000 	.word	0xfff00000
 8004818:	20000084 	.word	0x20000084
 800481c:	08005d08 	.word	0x08005d08

08004820 <pow>:
 8004820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004824:	ec59 8b10 	vmov	r8, r9, d0
 8004828:	ec57 6b11 	vmov	r6, r7, d1
 800482c:	f000 fa64 	bl	8004cf8 <__ieee754_pow>
 8004830:	4b4e      	ldr	r3, [pc, #312]	; (800496c <pow+0x14c>)
 8004832:	f993 3000 	ldrsb.w	r3, [r3]
 8004836:	3301      	adds	r3, #1
 8004838:	ec55 4b10 	vmov	r4, r5, d0
 800483c:	d015      	beq.n	800486a <pow+0x4a>
 800483e:	4632      	mov	r2, r6
 8004840:	463b      	mov	r3, r7
 8004842:	4630      	mov	r0, r6
 8004844:	4639      	mov	r1, r7
 8004846:	f7fc f915 	bl	8000a74 <__aeabi_dcmpun>
 800484a:	b970      	cbnz	r0, 800486a <pow+0x4a>
 800484c:	4642      	mov	r2, r8
 800484e:	464b      	mov	r3, r9
 8004850:	4640      	mov	r0, r8
 8004852:	4649      	mov	r1, r9
 8004854:	f7fc f90e 	bl	8000a74 <__aeabi_dcmpun>
 8004858:	2200      	movs	r2, #0
 800485a:	2300      	movs	r3, #0
 800485c:	b148      	cbz	r0, 8004872 <pow+0x52>
 800485e:	4630      	mov	r0, r6
 8004860:	4639      	mov	r1, r7
 8004862:	f7fc f8d5 	bl	8000a10 <__aeabi_dcmpeq>
 8004866:	2800      	cmp	r0, #0
 8004868:	d17d      	bne.n	8004966 <pow+0x146>
 800486a:	ec45 4b10 	vmov	d0, r4, r5
 800486e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004872:	4640      	mov	r0, r8
 8004874:	4649      	mov	r1, r9
 8004876:	f7fc f8cb 	bl	8000a10 <__aeabi_dcmpeq>
 800487a:	b1e0      	cbz	r0, 80048b6 <pow+0x96>
 800487c:	2200      	movs	r2, #0
 800487e:	2300      	movs	r3, #0
 8004880:	4630      	mov	r0, r6
 8004882:	4639      	mov	r1, r7
 8004884:	f7fc f8c4 	bl	8000a10 <__aeabi_dcmpeq>
 8004888:	2800      	cmp	r0, #0
 800488a:	d16c      	bne.n	8004966 <pow+0x146>
 800488c:	ec47 6b10 	vmov	d0, r6, r7
 8004890:	f001 f811 	bl	80058b6 <finite>
 8004894:	2800      	cmp	r0, #0
 8004896:	d0e8      	beq.n	800486a <pow+0x4a>
 8004898:	2200      	movs	r2, #0
 800489a:	2300      	movs	r3, #0
 800489c:	4630      	mov	r0, r6
 800489e:	4639      	mov	r1, r7
 80048a0:	f7fc f8c0 	bl	8000a24 <__aeabi_dcmplt>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d0e0      	beq.n	800486a <pow+0x4a>
 80048a8:	f001 f92c 	bl	8005b04 <__errno>
 80048ac:	2321      	movs	r3, #33	; 0x21
 80048ae:	6003      	str	r3, [r0, #0]
 80048b0:	2400      	movs	r4, #0
 80048b2:	4d2f      	ldr	r5, [pc, #188]	; (8004970 <pow+0x150>)
 80048b4:	e7d9      	b.n	800486a <pow+0x4a>
 80048b6:	ec45 4b10 	vmov	d0, r4, r5
 80048ba:	f000 fffc 	bl	80058b6 <finite>
 80048be:	bbb8      	cbnz	r0, 8004930 <pow+0x110>
 80048c0:	ec49 8b10 	vmov	d0, r8, r9
 80048c4:	f000 fff7 	bl	80058b6 <finite>
 80048c8:	b390      	cbz	r0, 8004930 <pow+0x110>
 80048ca:	ec47 6b10 	vmov	d0, r6, r7
 80048ce:	f000 fff2 	bl	80058b6 <finite>
 80048d2:	b368      	cbz	r0, 8004930 <pow+0x110>
 80048d4:	4622      	mov	r2, r4
 80048d6:	462b      	mov	r3, r5
 80048d8:	4620      	mov	r0, r4
 80048da:	4629      	mov	r1, r5
 80048dc:	f7fc f8ca 	bl	8000a74 <__aeabi_dcmpun>
 80048e0:	b160      	cbz	r0, 80048fc <pow+0xdc>
 80048e2:	f001 f90f 	bl	8005b04 <__errno>
 80048e6:	2321      	movs	r3, #33	; 0x21
 80048e8:	6003      	str	r3, [r0, #0]
 80048ea:	2200      	movs	r2, #0
 80048ec:	2300      	movs	r3, #0
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	f7fb ff4f 	bl	8000794 <__aeabi_ddiv>
 80048f6:	4604      	mov	r4, r0
 80048f8:	460d      	mov	r5, r1
 80048fa:	e7b6      	b.n	800486a <pow+0x4a>
 80048fc:	f001 f902 	bl	8005b04 <__errno>
 8004900:	2322      	movs	r3, #34	; 0x22
 8004902:	6003      	str	r3, [r0, #0]
 8004904:	2200      	movs	r2, #0
 8004906:	2300      	movs	r3, #0
 8004908:	4640      	mov	r0, r8
 800490a:	4649      	mov	r1, r9
 800490c:	f7fc f88a 	bl	8000a24 <__aeabi_dcmplt>
 8004910:	2400      	movs	r4, #0
 8004912:	b158      	cbz	r0, 800492c <pow+0x10c>
 8004914:	ec47 6b10 	vmov	d0, r6, r7
 8004918:	f000 ffe2 	bl	80058e0 <rint>
 800491c:	4632      	mov	r2, r6
 800491e:	ec51 0b10 	vmov	r0, r1, d0
 8004922:	463b      	mov	r3, r7
 8004924:	f7fc f874 	bl	8000a10 <__aeabi_dcmpeq>
 8004928:	2800      	cmp	r0, #0
 800492a:	d0c2      	beq.n	80048b2 <pow+0x92>
 800492c:	4d11      	ldr	r5, [pc, #68]	; (8004974 <pow+0x154>)
 800492e:	e79c      	b.n	800486a <pow+0x4a>
 8004930:	2200      	movs	r2, #0
 8004932:	2300      	movs	r3, #0
 8004934:	4620      	mov	r0, r4
 8004936:	4629      	mov	r1, r5
 8004938:	f7fc f86a 	bl	8000a10 <__aeabi_dcmpeq>
 800493c:	2800      	cmp	r0, #0
 800493e:	d094      	beq.n	800486a <pow+0x4a>
 8004940:	ec49 8b10 	vmov	d0, r8, r9
 8004944:	f000 ffb7 	bl	80058b6 <finite>
 8004948:	2800      	cmp	r0, #0
 800494a:	d08e      	beq.n	800486a <pow+0x4a>
 800494c:	ec47 6b10 	vmov	d0, r6, r7
 8004950:	f000 ffb1 	bl	80058b6 <finite>
 8004954:	2800      	cmp	r0, #0
 8004956:	d088      	beq.n	800486a <pow+0x4a>
 8004958:	f001 f8d4 	bl	8005b04 <__errno>
 800495c:	2322      	movs	r3, #34	; 0x22
 800495e:	6003      	str	r3, [r0, #0]
 8004960:	2400      	movs	r4, #0
 8004962:	2500      	movs	r5, #0
 8004964:	e781      	b.n	800486a <pow+0x4a>
 8004966:	4d04      	ldr	r5, [pc, #16]	; (8004978 <pow+0x158>)
 8004968:	2400      	movs	r4, #0
 800496a:	e77e      	b.n	800486a <pow+0x4a>
 800496c:	20000084 	.word	0x20000084
 8004970:	fff00000 	.word	0xfff00000
 8004974:	7ff00000 	.word	0x7ff00000
 8004978:	3ff00000 	.word	0x3ff00000
 800497c:	00000000 	.word	0x00000000

08004980 <__ieee754_log>:
 8004980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	ec51 0b10 	vmov	r0, r1, d0
 8004988:	ed2d 8b04 	vpush	{d8-d9}
 800498c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004990:	b083      	sub	sp, #12
 8004992:	460d      	mov	r5, r1
 8004994:	da29      	bge.n	80049ea <__ieee754_log+0x6a>
 8004996:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800499a:	4303      	orrs	r3, r0
 800499c:	ee10 2a10 	vmov	r2, s0
 80049a0:	d10c      	bne.n	80049bc <__ieee754_log+0x3c>
 80049a2:	49cf      	ldr	r1, [pc, #828]	; (8004ce0 <__ieee754_log+0x360>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	2300      	movs	r3, #0
 80049a8:	2000      	movs	r0, #0
 80049aa:	f7fb fef3 	bl	8000794 <__aeabi_ddiv>
 80049ae:	ec41 0b10 	vmov	d0, r0, r1
 80049b2:	b003      	add	sp, #12
 80049b4:	ecbd 8b04 	vpop	{d8-d9}
 80049b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049bc:	2900      	cmp	r1, #0
 80049be:	da05      	bge.n	80049cc <__ieee754_log+0x4c>
 80049c0:	460b      	mov	r3, r1
 80049c2:	f7fb fc05 	bl	80001d0 <__aeabi_dsub>
 80049c6:	2200      	movs	r2, #0
 80049c8:	2300      	movs	r3, #0
 80049ca:	e7ee      	b.n	80049aa <__ieee754_log+0x2a>
 80049cc:	4bc5      	ldr	r3, [pc, #788]	; (8004ce4 <__ieee754_log+0x364>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	f7fb fdb6 	bl	8000540 <__aeabi_dmul>
 80049d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80049d8:	460d      	mov	r5, r1
 80049da:	4ac3      	ldr	r2, [pc, #780]	; (8004ce8 <__ieee754_log+0x368>)
 80049dc:	4295      	cmp	r5, r2
 80049de:	dd06      	ble.n	80049ee <__ieee754_log+0x6e>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	f7fb fbf6 	bl	80001d4 <__adddf3>
 80049e8:	e7e1      	b.n	80049ae <__ieee754_log+0x2e>
 80049ea:	2300      	movs	r3, #0
 80049ec:	e7f5      	b.n	80049da <__ieee754_log+0x5a>
 80049ee:	152c      	asrs	r4, r5, #20
 80049f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80049f4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80049f8:	441c      	add	r4, r3
 80049fa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80049fe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8004a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a06:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8004a0a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8004a0e:	ea42 0105 	orr.w	r1, r2, r5
 8004a12:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8004a16:	2200      	movs	r2, #0
 8004a18:	4bb4      	ldr	r3, [pc, #720]	; (8004cec <__ieee754_log+0x36c>)
 8004a1a:	f7fb fbd9 	bl	80001d0 <__aeabi_dsub>
 8004a1e:	1cab      	adds	r3, r5, #2
 8004a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	4682      	mov	sl, r0
 8004a28:	468b      	mov	fp, r1
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	dc53      	bgt.n	8004ad8 <__ieee754_log+0x158>
 8004a30:	2300      	movs	r3, #0
 8004a32:	f7fb ffed 	bl	8000a10 <__aeabi_dcmpeq>
 8004a36:	b1d0      	cbz	r0, 8004a6e <__ieee754_log+0xee>
 8004a38:	2c00      	cmp	r4, #0
 8004a3a:	f000 8122 	beq.w	8004c82 <__ieee754_log+0x302>
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f7fb fd14 	bl	800046c <__aeabi_i2d>
 8004a44:	a390      	add	r3, pc, #576	; (adr r3, 8004c88 <__ieee754_log+0x308>)
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	460f      	mov	r7, r1
 8004a4e:	f7fb fd77 	bl	8000540 <__aeabi_dmul>
 8004a52:	a38f      	add	r3, pc, #572	; (adr r3, 8004c90 <__ieee754_log+0x310>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	4604      	mov	r4, r0
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	4639      	mov	r1, r7
 8004a60:	f7fb fd6e 	bl	8000540 <__aeabi_dmul>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4620      	mov	r0, r4
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	e7ba      	b.n	80049e4 <__ieee754_log+0x64>
 8004a6e:	a38a      	add	r3, pc, #552	; (adr r3, 8004c98 <__ieee754_log+0x318>)
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	4650      	mov	r0, sl
 8004a76:	4659      	mov	r1, fp
 8004a78:	f7fb fd62 	bl	8000540 <__aeabi_dmul>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	2000      	movs	r0, #0
 8004a82:	499b      	ldr	r1, [pc, #620]	; (8004cf0 <__ieee754_log+0x370>)
 8004a84:	f7fb fba4 	bl	80001d0 <__aeabi_dsub>
 8004a88:	4652      	mov	r2, sl
 8004a8a:	4606      	mov	r6, r0
 8004a8c:	460f      	mov	r7, r1
 8004a8e:	465b      	mov	r3, fp
 8004a90:	4650      	mov	r0, sl
 8004a92:	4659      	mov	r1, fp
 8004a94:	f7fb fd54 	bl	8000540 <__aeabi_dmul>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	f7fb fd4e 	bl	8000540 <__aeabi_dmul>
 8004aa4:	4606      	mov	r6, r0
 8004aa6:	460f      	mov	r7, r1
 8004aa8:	b914      	cbnz	r4, 8004ab0 <__ieee754_log+0x130>
 8004aaa:	4632      	mov	r2, r6
 8004aac:	463b      	mov	r3, r7
 8004aae:	e0a2      	b.n	8004bf6 <__ieee754_log+0x276>
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f7fb fcdb 	bl	800046c <__aeabi_i2d>
 8004ab6:	a374      	add	r3, pc, #464	; (adr r3, 8004c88 <__ieee754_log+0x308>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	4680      	mov	r8, r0
 8004abe:	4689      	mov	r9, r1
 8004ac0:	f7fb fd3e 	bl	8000540 <__aeabi_dmul>
 8004ac4:	a372      	add	r3, pc, #456	; (adr r3, 8004c90 <__ieee754_log+0x310>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	4604      	mov	r4, r0
 8004acc:	460d      	mov	r5, r1
 8004ace:	4640      	mov	r0, r8
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	f7fb fd35 	bl	8000540 <__aeabi_dmul>
 8004ad6:	e0a7      	b.n	8004c28 <__ieee754_log+0x2a8>
 8004ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004adc:	f7fb fb7a 	bl	80001d4 <__adddf3>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4650      	mov	r0, sl
 8004ae6:	4659      	mov	r1, fp
 8004ae8:	f7fb fe54 	bl	8000794 <__aeabi_ddiv>
 8004aec:	ec41 0b18 	vmov	d8, r0, r1
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7fb fcbb 	bl	800046c <__aeabi_i2d>
 8004af6:	ec53 2b18 	vmov	r2, r3, d8
 8004afa:	ec41 0b19 	vmov	d9, r0, r1
 8004afe:	ec51 0b18 	vmov	r0, r1, d8
 8004b02:	f7fb fd1d 	bl	8000540 <__aeabi_dmul>
 8004b06:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8004b0a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4680      	mov	r8, r0
 8004b16:	4689      	mov	r9, r1
 8004b18:	f7fb fd12 	bl	8000540 <__aeabi_dmul>
 8004b1c:	a360      	add	r3, pc, #384	; (adr r3, 8004ca0 <__ieee754_log+0x320>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	4606      	mov	r6, r0
 8004b24:	460f      	mov	r7, r1
 8004b26:	f7fb fd0b 	bl	8000540 <__aeabi_dmul>
 8004b2a:	a35f      	add	r3, pc, #380	; (adr r3, 8004ca8 <__ieee754_log+0x328>)
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f7fb fb50 	bl	80001d4 <__adddf3>
 8004b34:	4632      	mov	r2, r6
 8004b36:	463b      	mov	r3, r7
 8004b38:	f7fb fd02 	bl	8000540 <__aeabi_dmul>
 8004b3c:	a35c      	add	r3, pc, #368	; (adr r3, 8004cb0 <__ieee754_log+0x330>)
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	f7fb fb47 	bl	80001d4 <__adddf3>
 8004b46:	4632      	mov	r2, r6
 8004b48:	463b      	mov	r3, r7
 8004b4a:	f7fb fcf9 	bl	8000540 <__aeabi_dmul>
 8004b4e:	a35a      	add	r3, pc, #360	; (adr r3, 8004cb8 <__ieee754_log+0x338>)
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f7fb fb3e 	bl	80001d4 <__adddf3>
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	f7fb fcf0 	bl	8000540 <__aeabi_dmul>
 8004b60:	a357      	add	r3, pc, #348	; (adr r3, 8004cc0 <__ieee754_log+0x340>)
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	4680      	mov	r8, r0
 8004b68:	4689      	mov	r9, r1
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	f7fb fce7 	bl	8000540 <__aeabi_dmul>
 8004b72:	a355      	add	r3, pc, #340	; (adr r3, 8004cc8 <__ieee754_log+0x348>)
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f7fb fb2c 	bl	80001d4 <__adddf3>
 8004b7c:	4632      	mov	r2, r6
 8004b7e:	463b      	mov	r3, r7
 8004b80:	f7fb fcde 	bl	8000540 <__aeabi_dmul>
 8004b84:	a352      	add	r3, pc, #328	; (adr r3, 8004cd0 <__ieee754_log+0x350>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb fb23 	bl	80001d4 <__adddf3>
 8004b8e:	4632      	mov	r2, r6
 8004b90:	463b      	mov	r3, r7
 8004b92:	f7fb fcd5 	bl	8000540 <__aeabi_dmul>
 8004b96:	460b      	mov	r3, r1
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	f7fb fb19 	bl	80001d4 <__adddf3>
 8004ba2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004ba6:	9b01      	ldr	r3, [sp, #4]
 8004ba8:	3551      	adds	r5, #81	; 0x51
 8004baa:	431d      	orrs	r5, r3
 8004bac:	2d00      	cmp	r5, #0
 8004bae:	4680      	mov	r8, r0
 8004bb0:	4689      	mov	r9, r1
 8004bb2:	dd48      	ble.n	8004c46 <__ieee754_log+0x2c6>
 8004bb4:	4b4e      	ldr	r3, [pc, #312]	; (8004cf0 <__ieee754_log+0x370>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	4650      	mov	r0, sl
 8004bba:	4659      	mov	r1, fp
 8004bbc:	f7fb fcc0 	bl	8000540 <__aeabi_dmul>
 8004bc0:	4652      	mov	r2, sl
 8004bc2:	465b      	mov	r3, fp
 8004bc4:	f7fb fcbc 	bl	8000540 <__aeabi_dmul>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4606      	mov	r6, r0
 8004bce:	460f      	mov	r7, r1
 8004bd0:	4640      	mov	r0, r8
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	f7fb fafe 	bl	80001d4 <__adddf3>
 8004bd8:	ec53 2b18 	vmov	r2, r3, d8
 8004bdc:	f7fb fcb0 	bl	8000540 <__aeabi_dmul>
 8004be0:	4680      	mov	r8, r0
 8004be2:	4689      	mov	r9, r1
 8004be4:	b964      	cbnz	r4, 8004c00 <__ieee754_log+0x280>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4630      	mov	r0, r6
 8004bec:	4639      	mov	r1, r7
 8004bee:	f7fb faef 	bl	80001d0 <__aeabi_dsub>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4650      	mov	r0, sl
 8004bf8:	4659      	mov	r1, fp
 8004bfa:	f7fb fae9 	bl	80001d0 <__aeabi_dsub>
 8004bfe:	e6d6      	b.n	80049ae <__ieee754_log+0x2e>
 8004c00:	a321      	add	r3, pc, #132	; (adr r3, 8004c88 <__ieee754_log+0x308>)
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	ec51 0b19 	vmov	r0, r1, d9
 8004c0a:	f7fb fc99 	bl	8000540 <__aeabi_dmul>
 8004c0e:	a320      	add	r3, pc, #128	; (adr r3, 8004c90 <__ieee754_log+0x310>)
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	4604      	mov	r4, r0
 8004c16:	460d      	mov	r5, r1
 8004c18:	ec51 0b19 	vmov	r0, r1, d9
 8004c1c:	f7fb fc90 	bl	8000540 <__aeabi_dmul>
 8004c20:	4642      	mov	r2, r8
 8004c22:	464b      	mov	r3, r9
 8004c24:	f7fb fad6 	bl	80001d4 <__adddf3>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	4639      	mov	r1, r7
 8004c30:	f7fb face 	bl	80001d0 <__aeabi_dsub>
 8004c34:	4652      	mov	r2, sl
 8004c36:	465b      	mov	r3, fp
 8004c38:	f7fb faca 	bl	80001d0 <__aeabi_dsub>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4620      	mov	r0, r4
 8004c42:	4629      	mov	r1, r5
 8004c44:	e7d9      	b.n	8004bfa <__ieee754_log+0x27a>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4650      	mov	r0, sl
 8004c4c:	4659      	mov	r1, fp
 8004c4e:	f7fb fabf 	bl	80001d0 <__aeabi_dsub>
 8004c52:	ec53 2b18 	vmov	r2, r3, d8
 8004c56:	f7fb fc73 	bl	8000540 <__aeabi_dmul>
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	460f      	mov	r7, r1
 8004c5e:	2c00      	cmp	r4, #0
 8004c60:	f43f af23 	beq.w	8004aaa <__ieee754_log+0x12a>
 8004c64:	a308      	add	r3, pc, #32	; (adr r3, 8004c88 <__ieee754_log+0x308>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	ec51 0b19 	vmov	r0, r1, d9
 8004c6e:	f7fb fc67 	bl	8000540 <__aeabi_dmul>
 8004c72:	a307      	add	r3, pc, #28	; (adr r3, 8004c90 <__ieee754_log+0x310>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	4604      	mov	r4, r0
 8004c7a:	460d      	mov	r5, r1
 8004c7c:	ec51 0b19 	vmov	r0, r1, d9
 8004c80:	e727      	b.n	8004ad2 <__ieee754_log+0x152>
 8004c82:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8004cd8 <__ieee754_log+0x358>
 8004c86:	e694      	b.n	80049b2 <__ieee754_log+0x32>
 8004c88:	fee00000 	.word	0xfee00000
 8004c8c:	3fe62e42 	.word	0x3fe62e42
 8004c90:	35793c76 	.word	0x35793c76
 8004c94:	3dea39ef 	.word	0x3dea39ef
 8004c98:	55555555 	.word	0x55555555
 8004c9c:	3fd55555 	.word	0x3fd55555
 8004ca0:	df3e5244 	.word	0xdf3e5244
 8004ca4:	3fc2f112 	.word	0x3fc2f112
 8004ca8:	96cb03de 	.word	0x96cb03de
 8004cac:	3fc74664 	.word	0x3fc74664
 8004cb0:	94229359 	.word	0x94229359
 8004cb4:	3fd24924 	.word	0x3fd24924
 8004cb8:	55555593 	.word	0x55555593
 8004cbc:	3fe55555 	.word	0x3fe55555
 8004cc0:	d078c69f 	.word	0xd078c69f
 8004cc4:	3fc39a09 	.word	0x3fc39a09
 8004cc8:	1d8e78af 	.word	0x1d8e78af
 8004ccc:	3fcc71c5 	.word	0x3fcc71c5
 8004cd0:	9997fa04 	.word	0x9997fa04
 8004cd4:	3fd99999 	.word	0x3fd99999
	...
 8004ce0:	c3500000 	.word	0xc3500000
 8004ce4:	43500000 	.word	0x43500000
 8004ce8:	7fefffff 	.word	0x7fefffff
 8004cec:	3ff00000 	.word	0x3ff00000
 8004cf0:	3fe00000 	.word	0x3fe00000
 8004cf4:	00000000 	.word	0x00000000

08004cf8 <__ieee754_pow>:
 8004cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfc:	ed2d 8b06 	vpush	{d8-d10}
 8004d00:	b08d      	sub	sp, #52	; 0x34
 8004d02:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004d06:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8004d0a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004d0e:	ea56 0100 	orrs.w	r1, r6, r0
 8004d12:	ec53 2b10 	vmov	r2, r3, d0
 8004d16:	f000 84d1 	beq.w	80056bc <__ieee754_pow+0x9c4>
 8004d1a:	497f      	ldr	r1, [pc, #508]	; (8004f18 <__ieee754_pow+0x220>)
 8004d1c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8004d20:	428c      	cmp	r4, r1
 8004d22:	ee10 8a10 	vmov	r8, s0
 8004d26:	4699      	mov	r9, r3
 8004d28:	dc09      	bgt.n	8004d3e <__ieee754_pow+0x46>
 8004d2a:	d103      	bne.n	8004d34 <__ieee754_pow+0x3c>
 8004d2c:	b97a      	cbnz	r2, 8004d4e <__ieee754_pow+0x56>
 8004d2e:	42a6      	cmp	r6, r4
 8004d30:	dd02      	ble.n	8004d38 <__ieee754_pow+0x40>
 8004d32:	e00c      	b.n	8004d4e <__ieee754_pow+0x56>
 8004d34:	428e      	cmp	r6, r1
 8004d36:	dc02      	bgt.n	8004d3e <__ieee754_pow+0x46>
 8004d38:	428e      	cmp	r6, r1
 8004d3a:	d110      	bne.n	8004d5e <__ieee754_pow+0x66>
 8004d3c:	b178      	cbz	r0, 8004d5e <__ieee754_pow+0x66>
 8004d3e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004d42:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004d46:	ea54 0308 	orrs.w	r3, r4, r8
 8004d4a:	f000 84b7 	beq.w	80056bc <__ieee754_pow+0x9c4>
 8004d4e:	4873      	ldr	r0, [pc, #460]	; (8004f1c <__ieee754_pow+0x224>)
 8004d50:	b00d      	add	sp, #52	; 0x34
 8004d52:	ecbd 8b06 	vpop	{d8-d10}
 8004d56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d5a:	f000 bdb9 	b.w	80058d0 <nan>
 8004d5e:	f1b9 0f00 	cmp.w	r9, #0
 8004d62:	da36      	bge.n	8004dd2 <__ieee754_pow+0xda>
 8004d64:	496e      	ldr	r1, [pc, #440]	; (8004f20 <__ieee754_pow+0x228>)
 8004d66:	428e      	cmp	r6, r1
 8004d68:	dc51      	bgt.n	8004e0e <__ieee754_pow+0x116>
 8004d6a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8004d6e:	428e      	cmp	r6, r1
 8004d70:	f340 84af 	ble.w	80056d2 <__ieee754_pow+0x9da>
 8004d74:	1531      	asrs	r1, r6, #20
 8004d76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004d7a:	2914      	cmp	r1, #20
 8004d7c:	dd0f      	ble.n	8004d9e <__ieee754_pow+0xa6>
 8004d7e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8004d82:	fa20 fc01 	lsr.w	ip, r0, r1
 8004d86:	fa0c f101 	lsl.w	r1, ip, r1
 8004d8a:	4281      	cmp	r1, r0
 8004d8c:	f040 84a1 	bne.w	80056d2 <__ieee754_pow+0x9da>
 8004d90:	f00c 0c01 	and.w	ip, ip, #1
 8004d94:	f1cc 0102 	rsb	r1, ip, #2
 8004d98:	9100      	str	r1, [sp, #0]
 8004d9a:	b180      	cbz	r0, 8004dbe <__ieee754_pow+0xc6>
 8004d9c:	e059      	b.n	8004e52 <__ieee754_pow+0x15a>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d155      	bne.n	8004e4e <__ieee754_pow+0x156>
 8004da2:	f1c1 0114 	rsb	r1, r1, #20
 8004da6:	fa46 fc01 	asr.w	ip, r6, r1
 8004daa:	fa0c f101 	lsl.w	r1, ip, r1
 8004dae:	42b1      	cmp	r1, r6
 8004db0:	f040 848c 	bne.w	80056cc <__ieee754_pow+0x9d4>
 8004db4:	f00c 0c01 	and.w	ip, ip, #1
 8004db8:	f1cc 0102 	rsb	r1, ip, #2
 8004dbc:	9100      	str	r1, [sp, #0]
 8004dbe:	4959      	ldr	r1, [pc, #356]	; (8004f24 <__ieee754_pow+0x22c>)
 8004dc0:	428e      	cmp	r6, r1
 8004dc2:	d12d      	bne.n	8004e20 <__ieee754_pow+0x128>
 8004dc4:	2f00      	cmp	r7, #0
 8004dc6:	da79      	bge.n	8004ebc <__ieee754_pow+0x1c4>
 8004dc8:	4956      	ldr	r1, [pc, #344]	; (8004f24 <__ieee754_pow+0x22c>)
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f7fb fce2 	bl	8000794 <__aeabi_ddiv>
 8004dd0:	e016      	b.n	8004e00 <__ieee754_pow+0x108>
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	9100      	str	r1, [sp, #0]
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d13b      	bne.n	8004e52 <__ieee754_pow+0x15a>
 8004dda:	494f      	ldr	r1, [pc, #316]	; (8004f18 <__ieee754_pow+0x220>)
 8004ddc:	428e      	cmp	r6, r1
 8004dde:	d1ee      	bne.n	8004dbe <__ieee754_pow+0xc6>
 8004de0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004de4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004de8:	ea53 0308 	orrs.w	r3, r3, r8
 8004dec:	f000 8466 	beq.w	80056bc <__ieee754_pow+0x9c4>
 8004df0:	4b4d      	ldr	r3, [pc, #308]	; (8004f28 <__ieee754_pow+0x230>)
 8004df2:	429c      	cmp	r4, r3
 8004df4:	dd0d      	ble.n	8004e12 <__ieee754_pow+0x11a>
 8004df6:	2f00      	cmp	r7, #0
 8004df8:	f280 8464 	bge.w	80056c4 <__ieee754_pow+0x9cc>
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	2100      	movs	r1, #0
 8004e00:	ec41 0b10 	vmov	d0, r0, r1
 8004e04:	b00d      	add	sp, #52	; 0x34
 8004e06:	ecbd 8b06 	vpop	{d8-d10}
 8004e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e0e:	2102      	movs	r1, #2
 8004e10:	e7e0      	b.n	8004dd4 <__ieee754_pow+0xdc>
 8004e12:	2f00      	cmp	r7, #0
 8004e14:	daf2      	bge.n	8004dfc <__ieee754_pow+0x104>
 8004e16:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8004e1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004e1e:	e7ef      	b.n	8004e00 <__ieee754_pow+0x108>
 8004e20:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004e24:	d104      	bne.n	8004e30 <__ieee754_pow+0x138>
 8004e26:	4610      	mov	r0, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f7fb fb89 	bl	8000540 <__aeabi_dmul>
 8004e2e:	e7e7      	b.n	8004e00 <__ieee754_pow+0x108>
 8004e30:	493e      	ldr	r1, [pc, #248]	; (8004f2c <__ieee754_pow+0x234>)
 8004e32:	428f      	cmp	r7, r1
 8004e34:	d10d      	bne.n	8004e52 <__ieee754_pow+0x15a>
 8004e36:	f1b9 0f00 	cmp.w	r9, #0
 8004e3a:	db0a      	blt.n	8004e52 <__ieee754_pow+0x15a>
 8004e3c:	ec43 2b10 	vmov	d0, r2, r3
 8004e40:	b00d      	add	sp, #52	; 0x34
 8004e42:	ecbd 8b06 	vpop	{d8-d10}
 8004e46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4a:	f000 bc77 	b.w	800573c <__ieee754_sqrt>
 8004e4e:	2100      	movs	r1, #0
 8004e50:	9100      	str	r1, [sp, #0]
 8004e52:	ec43 2b10 	vmov	d0, r2, r3
 8004e56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e5a:	f000 fd23 	bl	80058a4 <fabs>
 8004e5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e62:	ec51 0b10 	vmov	r0, r1, d0
 8004e66:	f1b8 0f00 	cmp.w	r8, #0
 8004e6a:	d12a      	bne.n	8004ec2 <__ieee754_pow+0x1ca>
 8004e6c:	b12c      	cbz	r4, 8004e7a <__ieee754_pow+0x182>
 8004e6e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8004f24 <__ieee754_pow+0x22c>
 8004e72:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8004e76:	45e6      	cmp	lr, ip
 8004e78:	d123      	bne.n	8004ec2 <__ieee754_pow+0x1ca>
 8004e7a:	2f00      	cmp	r7, #0
 8004e7c:	da05      	bge.n	8004e8a <__ieee754_pow+0x192>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	2000      	movs	r0, #0
 8004e84:	4927      	ldr	r1, [pc, #156]	; (8004f24 <__ieee754_pow+0x22c>)
 8004e86:	f7fb fc85 	bl	8000794 <__aeabi_ddiv>
 8004e8a:	f1b9 0f00 	cmp.w	r9, #0
 8004e8e:	dab7      	bge.n	8004e00 <__ieee754_pow+0x108>
 8004e90:	9b00      	ldr	r3, [sp, #0]
 8004e92:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004e96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004e9a:	4323      	orrs	r3, r4
 8004e9c:	d108      	bne.n	8004eb0 <__ieee754_pow+0x1b8>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f7fb f993 	bl	80001d0 <__aeabi_dsub>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	e78d      	b.n	8004dcc <__ieee754_pow+0xd4>
 8004eb0:	9b00      	ldr	r3, [sp, #0]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d1a4      	bne.n	8004e00 <__ieee754_pow+0x108>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	e79e      	b.n	8004e00 <__ieee754_pow+0x108>
 8004ec2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8004ec6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8004eca:	950a      	str	r5, [sp, #40]	; 0x28
 8004ecc:	9d00      	ldr	r5, [sp, #0]
 8004ece:	46ac      	mov	ip, r5
 8004ed0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004ed2:	ea5c 0505 	orrs.w	r5, ip, r5
 8004ed6:	d0e4      	beq.n	8004ea2 <__ieee754_pow+0x1aa>
 8004ed8:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <__ieee754_pow+0x238>)
 8004eda:	429e      	cmp	r6, r3
 8004edc:	f340 80fc 	ble.w	80050d8 <__ieee754_pow+0x3e0>
 8004ee0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004ee4:	429e      	cmp	r6, r3
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <__ieee754_pow+0x230>)
 8004ee8:	dd07      	ble.n	8004efa <__ieee754_pow+0x202>
 8004eea:	429c      	cmp	r4, r3
 8004eec:	dc0a      	bgt.n	8004f04 <__ieee754_pow+0x20c>
 8004eee:	2f00      	cmp	r7, #0
 8004ef0:	da84      	bge.n	8004dfc <__ieee754_pow+0x104>
 8004ef2:	a307      	add	r3, pc, #28	; (adr r3, 8004f10 <__ieee754_pow+0x218>)
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	e795      	b.n	8004e26 <__ieee754_pow+0x12e>
 8004efa:	429c      	cmp	r4, r3
 8004efc:	dbf7      	blt.n	8004eee <__ieee754_pow+0x1f6>
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <__ieee754_pow+0x22c>)
 8004f00:	429c      	cmp	r4, r3
 8004f02:	dd17      	ble.n	8004f34 <__ieee754_pow+0x23c>
 8004f04:	2f00      	cmp	r7, #0
 8004f06:	dcf4      	bgt.n	8004ef2 <__ieee754_pow+0x1fa>
 8004f08:	e778      	b.n	8004dfc <__ieee754_pow+0x104>
 8004f0a:	bf00      	nop
 8004f0c:	f3af 8000 	nop.w
 8004f10:	8800759c 	.word	0x8800759c
 8004f14:	7e37e43c 	.word	0x7e37e43c
 8004f18:	7ff00000 	.word	0x7ff00000
 8004f1c:	08005d08 	.word	0x08005d08
 8004f20:	433fffff 	.word	0x433fffff
 8004f24:	3ff00000 	.word	0x3ff00000
 8004f28:	3fefffff 	.word	0x3fefffff
 8004f2c:	3fe00000 	.word	0x3fe00000
 8004f30:	41e00000 	.word	0x41e00000
 8004f34:	4b64      	ldr	r3, [pc, #400]	; (80050c8 <__ieee754_pow+0x3d0>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	f7fb f94a 	bl	80001d0 <__aeabi_dsub>
 8004f3c:	a356      	add	r3, pc, #344	; (adr r3, 8005098 <__ieee754_pow+0x3a0>)
 8004f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f42:	4604      	mov	r4, r0
 8004f44:	460d      	mov	r5, r1
 8004f46:	f7fb fafb 	bl	8000540 <__aeabi_dmul>
 8004f4a:	a355      	add	r3, pc, #340	; (adr r3, 80050a0 <__ieee754_pow+0x3a8>)
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	4606      	mov	r6, r0
 8004f52:	460f      	mov	r7, r1
 8004f54:	4620      	mov	r0, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	f7fb faf2 	bl	8000540 <__aeabi_dmul>
 8004f5c:	4b5b      	ldr	r3, [pc, #364]	; (80050cc <__ieee754_pow+0x3d4>)
 8004f5e:	4682      	mov	sl, r0
 8004f60:	468b      	mov	fp, r1
 8004f62:	2200      	movs	r2, #0
 8004f64:	4620      	mov	r0, r4
 8004f66:	4629      	mov	r1, r5
 8004f68:	f7fb faea 	bl	8000540 <__aeabi_dmul>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	a14d      	add	r1, pc, #308	; (adr r1, 80050a8 <__ieee754_pow+0x3b0>)
 8004f72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f76:	f7fb f92b 	bl	80001d0 <__aeabi_dsub>
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	462b      	mov	r3, r5
 8004f7e:	f7fb fadf 	bl	8000540 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	2000      	movs	r0, #0
 8004f88:	4951      	ldr	r1, [pc, #324]	; (80050d0 <__ieee754_pow+0x3d8>)
 8004f8a:	f7fb f921 	bl	80001d0 <__aeabi_dsub>
 8004f8e:	4622      	mov	r2, r4
 8004f90:	4680      	mov	r8, r0
 8004f92:	4689      	mov	r9, r1
 8004f94:	462b      	mov	r3, r5
 8004f96:	4620      	mov	r0, r4
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f7fb fad1 	bl	8000540 <__aeabi_dmul>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	f7fb facb 	bl	8000540 <__aeabi_dmul>
 8004faa:	a341      	add	r3, pc, #260	; (adr r3, 80050b0 <__ieee754_pow+0x3b8>)
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f7fb fac6 	bl	8000540 <__aeabi_dmul>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4650      	mov	r0, sl
 8004fba:	4659      	mov	r1, fp
 8004fbc:	f7fb f908 	bl	80001d0 <__aeabi_dsub>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	4689      	mov	r9, r1
 8004fc8:	4630      	mov	r0, r6
 8004fca:	4639      	mov	r1, r7
 8004fcc:	f7fb f902 	bl	80001d4 <__adddf3>
 8004fd0:	2400      	movs	r4, #0
 8004fd2:	4632      	mov	r2, r6
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	460d      	mov	r5, r1
 8004fda:	f7fb f8f9 	bl	80001d0 <__aeabi_dsub>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	f7fb f8f3 	bl	80001d0 <__aeabi_dsub>
 8004fea:	9b00      	ldr	r3, [sp, #0]
 8004fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	4682      	mov	sl, r0
 8004ff4:	468b      	mov	fp, r1
 8004ff6:	f040 81f1 	bne.w	80053dc <__ieee754_pow+0x6e4>
 8004ffa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80050b8 <__ieee754_pow+0x3c0>
 8004ffe:	eeb0 8a47 	vmov.f32	s16, s14
 8005002:	eef0 8a67 	vmov.f32	s17, s15
 8005006:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800500a:	2600      	movs	r6, #0
 800500c:	4632      	mov	r2, r6
 800500e:	463b      	mov	r3, r7
 8005010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005014:	f7fb f8dc 	bl	80001d0 <__aeabi_dsub>
 8005018:	4622      	mov	r2, r4
 800501a:	462b      	mov	r3, r5
 800501c:	f7fb fa90 	bl	8000540 <__aeabi_dmul>
 8005020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005024:	4680      	mov	r8, r0
 8005026:	4689      	mov	r9, r1
 8005028:	4650      	mov	r0, sl
 800502a:	4659      	mov	r1, fp
 800502c:	f7fb fa88 	bl	8000540 <__aeabi_dmul>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4640      	mov	r0, r8
 8005036:	4649      	mov	r1, r9
 8005038:	f7fb f8cc 	bl	80001d4 <__adddf3>
 800503c:	4632      	mov	r2, r6
 800503e:	463b      	mov	r3, r7
 8005040:	4680      	mov	r8, r0
 8005042:	4689      	mov	r9, r1
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb fa7a 	bl	8000540 <__aeabi_dmul>
 800504c:	460b      	mov	r3, r1
 800504e:	4604      	mov	r4, r0
 8005050:	460d      	mov	r5, r1
 8005052:	4602      	mov	r2, r0
 8005054:	4649      	mov	r1, r9
 8005056:	4640      	mov	r0, r8
 8005058:	f7fb f8bc 	bl	80001d4 <__adddf3>
 800505c:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <__ieee754_pow+0x3dc>)
 800505e:	4299      	cmp	r1, r3
 8005060:	ec45 4b19 	vmov	d9, r4, r5
 8005064:	4606      	mov	r6, r0
 8005066:	460f      	mov	r7, r1
 8005068:	468b      	mov	fp, r1
 800506a:	f340 82fe 	ble.w	800566a <__ieee754_pow+0x972>
 800506e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005072:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005076:	4303      	orrs	r3, r0
 8005078:	f000 81f0 	beq.w	800545c <__ieee754_pow+0x764>
 800507c:	a310      	add	r3, pc, #64	; (adr r3, 80050c0 <__ieee754_pow+0x3c8>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	ec51 0b18 	vmov	r0, r1, d8
 8005086:	f7fb fa5b 	bl	8000540 <__aeabi_dmul>
 800508a:	a30d      	add	r3, pc, #52	; (adr r3, 80050c0 <__ieee754_pow+0x3c8>)
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	e6cb      	b.n	8004e2a <__ieee754_pow+0x132>
 8005092:	bf00      	nop
 8005094:	f3af 8000 	nop.w
 8005098:	60000000 	.word	0x60000000
 800509c:	3ff71547 	.word	0x3ff71547
 80050a0:	f85ddf44 	.word	0xf85ddf44
 80050a4:	3e54ae0b 	.word	0x3e54ae0b
 80050a8:	55555555 	.word	0x55555555
 80050ac:	3fd55555 	.word	0x3fd55555
 80050b0:	652b82fe 	.word	0x652b82fe
 80050b4:	3ff71547 	.word	0x3ff71547
 80050b8:	00000000 	.word	0x00000000
 80050bc:	bff00000 	.word	0xbff00000
 80050c0:	8800759c 	.word	0x8800759c
 80050c4:	7e37e43c 	.word	0x7e37e43c
 80050c8:	3ff00000 	.word	0x3ff00000
 80050cc:	3fd00000 	.word	0x3fd00000
 80050d0:	3fe00000 	.word	0x3fe00000
 80050d4:	408fffff 	.word	0x408fffff
 80050d8:	4bd7      	ldr	r3, [pc, #860]	; (8005438 <__ieee754_pow+0x740>)
 80050da:	ea03 0309 	and.w	r3, r3, r9
 80050de:	2200      	movs	r2, #0
 80050e0:	b92b      	cbnz	r3, 80050ee <__ieee754_pow+0x3f6>
 80050e2:	4bd6      	ldr	r3, [pc, #856]	; (800543c <__ieee754_pow+0x744>)
 80050e4:	f7fb fa2c 	bl	8000540 <__aeabi_dmul>
 80050e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80050ec:	460c      	mov	r4, r1
 80050ee:	1523      	asrs	r3, r4, #20
 80050f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80050f4:	4413      	add	r3, r2
 80050f6:	9309      	str	r3, [sp, #36]	; 0x24
 80050f8:	4bd1      	ldr	r3, [pc, #836]	; (8005440 <__ieee754_pow+0x748>)
 80050fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80050fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005102:	429c      	cmp	r4, r3
 8005104:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005108:	dd08      	ble.n	800511c <__ieee754_pow+0x424>
 800510a:	4bce      	ldr	r3, [pc, #824]	; (8005444 <__ieee754_pow+0x74c>)
 800510c:	429c      	cmp	r4, r3
 800510e:	f340 8163 	ble.w	80053d8 <__ieee754_pow+0x6e0>
 8005112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005114:	3301      	adds	r3, #1
 8005116:	9309      	str	r3, [sp, #36]	; 0x24
 8005118:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800511c:	2400      	movs	r4, #0
 800511e:	00e3      	lsls	r3, r4, #3
 8005120:	930b      	str	r3, [sp, #44]	; 0x2c
 8005122:	4bc9      	ldr	r3, [pc, #804]	; (8005448 <__ieee754_pow+0x750>)
 8005124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005128:	ed93 7b00 	vldr	d7, [r3]
 800512c:	4629      	mov	r1, r5
 800512e:	ec53 2b17 	vmov	r2, r3, d7
 8005132:	eeb0 8a47 	vmov.f32	s16, s14
 8005136:	eef0 8a67 	vmov.f32	s17, s15
 800513a:	4682      	mov	sl, r0
 800513c:	f7fb f848 	bl	80001d0 <__aeabi_dsub>
 8005140:	4652      	mov	r2, sl
 8005142:	4606      	mov	r6, r0
 8005144:	460f      	mov	r7, r1
 8005146:	462b      	mov	r3, r5
 8005148:	ec51 0b18 	vmov	r0, r1, d8
 800514c:	f7fb f842 	bl	80001d4 <__adddf3>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	2000      	movs	r0, #0
 8005156:	49bd      	ldr	r1, [pc, #756]	; (800544c <__ieee754_pow+0x754>)
 8005158:	f7fb fb1c 	bl	8000794 <__aeabi_ddiv>
 800515c:	ec41 0b19 	vmov	d9, r0, r1
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4630      	mov	r0, r6
 8005166:	4639      	mov	r1, r7
 8005168:	f7fb f9ea 	bl	8000540 <__aeabi_dmul>
 800516c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005170:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005174:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005178:	2300      	movs	r3, #0
 800517a:	9304      	str	r3, [sp, #16]
 800517c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005180:	46ab      	mov	fp, r5
 8005182:	106d      	asrs	r5, r5, #1
 8005184:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005188:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800518c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005190:	2200      	movs	r2, #0
 8005192:	4640      	mov	r0, r8
 8005194:	4649      	mov	r1, r9
 8005196:	4614      	mov	r4, r2
 8005198:	461d      	mov	r5, r3
 800519a:	f7fb f9d1 	bl	8000540 <__aeabi_dmul>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4630      	mov	r0, r6
 80051a4:	4639      	mov	r1, r7
 80051a6:	f7fb f813 	bl	80001d0 <__aeabi_dsub>
 80051aa:	ec53 2b18 	vmov	r2, r3, d8
 80051ae:	4606      	mov	r6, r0
 80051b0:	460f      	mov	r7, r1
 80051b2:	4620      	mov	r0, r4
 80051b4:	4629      	mov	r1, r5
 80051b6:	f7fb f80b 	bl	80001d0 <__aeabi_dsub>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4650      	mov	r0, sl
 80051c0:	4659      	mov	r1, fp
 80051c2:	f7fb f805 	bl	80001d0 <__aeabi_dsub>
 80051c6:	4642      	mov	r2, r8
 80051c8:	464b      	mov	r3, r9
 80051ca:	f7fb f9b9 	bl	8000540 <__aeabi_dmul>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4630      	mov	r0, r6
 80051d4:	4639      	mov	r1, r7
 80051d6:	f7fa fffb 	bl	80001d0 <__aeabi_dsub>
 80051da:	ec53 2b19 	vmov	r2, r3, d9
 80051de:	f7fb f9af 	bl	8000540 <__aeabi_dmul>
 80051e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051e6:	ec41 0b18 	vmov	d8, r0, r1
 80051ea:	4610      	mov	r0, r2
 80051ec:	4619      	mov	r1, r3
 80051ee:	f7fb f9a7 	bl	8000540 <__aeabi_dmul>
 80051f2:	a37d      	add	r3, pc, #500	; (adr r3, 80053e8 <__ieee754_pow+0x6f0>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	4604      	mov	r4, r0
 80051fa:	460d      	mov	r5, r1
 80051fc:	f7fb f9a0 	bl	8000540 <__aeabi_dmul>
 8005200:	a37b      	add	r3, pc, #492	; (adr r3, 80053f0 <__ieee754_pow+0x6f8>)
 8005202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005206:	f7fa ffe5 	bl	80001d4 <__adddf3>
 800520a:	4622      	mov	r2, r4
 800520c:	462b      	mov	r3, r5
 800520e:	f7fb f997 	bl	8000540 <__aeabi_dmul>
 8005212:	a379      	add	r3, pc, #484	; (adr r3, 80053f8 <__ieee754_pow+0x700>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f7fa ffdc 	bl	80001d4 <__adddf3>
 800521c:	4622      	mov	r2, r4
 800521e:	462b      	mov	r3, r5
 8005220:	f7fb f98e 	bl	8000540 <__aeabi_dmul>
 8005224:	a376      	add	r3, pc, #472	; (adr r3, 8005400 <__ieee754_pow+0x708>)
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f7fa ffd3 	bl	80001d4 <__adddf3>
 800522e:	4622      	mov	r2, r4
 8005230:	462b      	mov	r3, r5
 8005232:	f7fb f985 	bl	8000540 <__aeabi_dmul>
 8005236:	a374      	add	r3, pc, #464	; (adr r3, 8005408 <__ieee754_pow+0x710>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f7fa ffca 	bl	80001d4 <__adddf3>
 8005240:	4622      	mov	r2, r4
 8005242:	462b      	mov	r3, r5
 8005244:	f7fb f97c 	bl	8000540 <__aeabi_dmul>
 8005248:	a371      	add	r3, pc, #452	; (adr r3, 8005410 <__ieee754_pow+0x718>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f7fa ffc1 	bl	80001d4 <__adddf3>
 8005252:	4622      	mov	r2, r4
 8005254:	4606      	mov	r6, r0
 8005256:	460f      	mov	r7, r1
 8005258:	462b      	mov	r3, r5
 800525a:	4620      	mov	r0, r4
 800525c:	4629      	mov	r1, r5
 800525e:	f7fb f96f 	bl	8000540 <__aeabi_dmul>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4630      	mov	r0, r6
 8005268:	4639      	mov	r1, r7
 800526a:	f7fb f969 	bl	8000540 <__aeabi_dmul>
 800526e:	4642      	mov	r2, r8
 8005270:	4604      	mov	r4, r0
 8005272:	460d      	mov	r5, r1
 8005274:	464b      	mov	r3, r9
 8005276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800527a:	f7fa ffab 	bl	80001d4 <__adddf3>
 800527e:	ec53 2b18 	vmov	r2, r3, d8
 8005282:	f7fb f95d 	bl	8000540 <__aeabi_dmul>
 8005286:	4622      	mov	r2, r4
 8005288:	462b      	mov	r3, r5
 800528a:	f7fa ffa3 	bl	80001d4 <__adddf3>
 800528e:	4642      	mov	r2, r8
 8005290:	4682      	mov	sl, r0
 8005292:	468b      	mov	fp, r1
 8005294:	464b      	mov	r3, r9
 8005296:	4640      	mov	r0, r8
 8005298:	4649      	mov	r1, r9
 800529a:	f7fb f951 	bl	8000540 <__aeabi_dmul>
 800529e:	4b6c      	ldr	r3, [pc, #432]	; (8005450 <__ieee754_pow+0x758>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	4606      	mov	r6, r0
 80052a4:	460f      	mov	r7, r1
 80052a6:	f7fa ff95 	bl	80001d4 <__adddf3>
 80052aa:	4652      	mov	r2, sl
 80052ac:	465b      	mov	r3, fp
 80052ae:	f7fa ff91 	bl	80001d4 <__adddf3>
 80052b2:	9c04      	ldr	r4, [sp, #16]
 80052b4:	460d      	mov	r5, r1
 80052b6:	4622      	mov	r2, r4
 80052b8:	460b      	mov	r3, r1
 80052ba:	4640      	mov	r0, r8
 80052bc:	4649      	mov	r1, r9
 80052be:	f7fb f93f 	bl	8000540 <__aeabi_dmul>
 80052c2:	4b63      	ldr	r3, [pc, #396]	; (8005450 <__ieee754_pow+0x758>)
 80052c4:	4680      	mov	r8, r0
 80052c6:	4689      	mov	r9, r1
 80052c8:	2200      	movs	r2, #0
 80052ca:	4620      	mov	r0, r4
 80052cc:	4629      	mov	r1, r5
 80052ce:	f7fa ff7f 	bl	80001d0 <__aeabi_dsub>
 80052d2:	4632      	mov	r2, r6
 80052d4:	463b      	mov	r3, r7
 80052d6:	f7fa ff7b 	bl	80001d0 <__aeabi_dsub>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4650      	mov	r0, sl
 80052e0:	4659      	mov	r1, fp
 80052e2:	f7fa ff75 	bl	80001d0 <__aeabi_dsub>
 80052e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052ea:	f7fb f929 	bl	8000540 <__aeabi_dmul>
 80052ee:	4622      	mov	r2, r4
 80052f0:	4606      	mov	r6, r0
 80052f2:	460f      	mov	r7, r1
 80052f4:	462b      	mov	r3, r5
 80052f6:	ec51 0b18 	vmov	r0, r1, d8
 80052fa:	f7fb f921 	bl	8000540 <__aeabi_dmul>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4630      	mov	r0, r6
 8005304:	4639      	mov	r1, r7
 8005306:	f7fa ff65 	bl	80001d4 <__adddf3>
 800530a:	4606      	mov	r6, r0
 800530c:	460f      	mov	r7, r1
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4640      	mov	r0, r8
 8005314:	4649      	mov	r1, r9
 8005316:	f7fa ff5d 	bl	80001d4 <__adddf3>
 800531a:	9c04      	ldr	r4, [sp, #16]
 800531c:	a33e      	add	r3, pc, #248	; (adr r3, 8005418 <__ieee754_pow+0x720>)
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	4620      	mov	r0, r4
 8005324:	460d      	mov	r5, r1
 8005326:	f7fb f90b 	bl	8000540 <__aeabi_dmul>
 800532a:	4642      	mov	r2, r8
 800532c:	ec41 0b18 	vmov	d8, r0, r1
 8005330:	464b      	mov	r3, r9
 8005332:	4620      	mov	r0, r4
 8005334:	4629      	mov	r1, r5
 8005336:	f7fa ff4b 	bl	80001d0 <__aeabi_dsub>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4630      	mov	r0, r6
 8005340:	4639      	mov	r1, r7
 8005342:	f7fa ff45 	bl	80001d0 <__aeabi_dsub>
 8005346:	a336      	add	r3, pc, #216	; (adr r3, 8005420 <__ieee754_pow+0x728>)
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f7fb f8f8 	bl	8000540 <__aeabi_dmul>
 8005350:	a335      	add	r3, pc, #212	; (adr r3, 8005428 <__ieee754_pow+0x730>)
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	4606      	mov	r6, r0
 8005358:	460f      	mov	r7, r1
 800535a:	4620      	mov	r0, r4
 800535c:	4629      	mov	r1, r5
 800535e:	f7fb f8ef 	bl	8000540 <__aeabi_dmul>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4630      	mov	r0, r6
 8005368:	4639      	mov	r1, r7
 800536a:	f7fa ff33 	bl	80001d4 <__adddf3>
 800536e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005370:	4b38      	ldr	r3, [pc, #224]	; (8005454 <__ieee754_pow+0x75c>)
 8005372:	4413      	add	r3, r2
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f7fa ff2c 	bl	80001d4 <__adddf3>
 800537c:	4682      	mov	sl, r0
 800537e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005380:	468b      	mov	fp, r1
 8005382:	f7fb f873 	bl	800046c <__aeabi_i2d>
 8005386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005388:	4b33      	ldr	r3, [pc, #204]	; (8005458 <__ieee754_pow+0x760>)
 800538a:	4413      	add	r3, r2
 800538c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005390:	4606      	mov	r6, r0
 8005392:	460f      	mov	r7, r1
 8005394:	4652      	mov	r2, sl
 8005396:	465b      	mov	r3, fp
 8005398:	ec51 0b18 	vmov	r0, r1, d8
 800539c:	f7fa ff1a 	bl	80001d4 <__adddf3>
 80053a0:	4642      	mov	r2, r8
 80053a2:	464b      	mov	r3, r9
 80053a4:	f7fa ff16 	bl	80001d4 <__adddf3>
 80053a8:	4632      	mov	r2, r6
 80053aa:	463b      	mov	r3, r7
 80053ac:	f7fa ff12 	bl	80001d4 <__adddf3>
 80053b0:	9c04      	ldr	r4, [sp, #16]
 80053b2:	4632      	mov	r2, r6
 80053b4:	463b      	mov	r3, r7
 80053b6:	4620      	mov	r0, r4
 80053b8:	460d      	mov	r5, r1
 80053ba:	f7fa ff09 	bl	80001d0 <__aeabi_dsub>
 80053be:	4642      	mov	r2, r8
 80053c0:	464b      	mov	r3, r9
 80053c2:	f7fa ff05 	bl	80001d0 <__aeabi_dsub>
 80053c6:	ec53 2b18 	vmov	r2, r3, d8
 80053ca:	f7fa ff01 	bl	80001d0 <__aeabi_dsub>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4650      	mov	r0, sl
 80053d4:	4659      	mov	r1, fp
 80053d6:	e606      	b.n	8004fe6 <__ieee754_pow+0x2ee>
 80053d8:	2401      	movs	r4, #1
 80053da:	e6a0      	b.n	800511e <__ieee754_pow+0x426>
 80053dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005430 <__ieee754_pow+0x738>
 80053e0:	e60d      	b.n	8004ffe <__ieee754_pow+0x306>
 80053e2:	bf00      	nop
 80053e4:	f3af 8000 	nop.w
 80053e8:	4a454eef 	.word	0x4a454eef
 80053ec:	3fca7e28 	.word	0x3fca7e28
 80053f0:	93c9db65 	.word	0x93c9db65
 80053f4:	3fcd864a 	.word	0x3fcd864a
 80053f8:	a91d4101 	.word	0xa91d4101
 80053fc:	3fd17460 	.word	0x3fd17460
 8005400:	518f264d 	.word	0x518f264d
 8005404:	3fd55555 	.word	0x3fd55555
 8005408:	db6fabff 	.word	0xdb6fabff
 800540c:	3fdb6db6 	.word	0x3fdb6db6
 8005410:	33333303 	.word	0x33333303
 8005414:	3fe33333 	.word	0x3fe33333
 8005418:	e0000000 	.word	0xe0000000
 800541c:	3feec709 	.word	0x3feec709
 8005420:	dc3a03fd 	.word	0xdc3a03fd
 8005424:	3feec709 	.word	0x3feec709
 8005428:	145b01f5 	.word	0x145b01f5
 800542c:	be3e2fe0 	.word	0xbe3e2fe0
 8005430:	00000000 	.word	0x00000000
 8005434:	3ff00000 	.word	0x3ff00000
 8005438:	7ff00000 	.word	0x7ff00000
 800543c:	43400000 	.word	0x43400000
 8005440:	0003988e 	.word	0x0003988e
 8005444:	000bb679 	.word	0x000bb679
 8005448:	08005d10 	.word	0x08005d10
 800544c:	3ff00000 	.word	0x3ff00000
 8005450:	40080000 	.word	0x40080000
 8005454:	08005d30 	.word	0x08005d30
 8005458:	08005d20 	.word	0x08005d20
 800545c:	a3b5      	add	r3, pc, #724	; (adr r3, 8005734 <__ieee754_pow+0xa3c>)
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	4640      	mov	r0, r8
 8005464:	4649      	mov	r1, r9
 8005466:	f7fa feb5 	bl	80001d4 <__adddf3>
 800546a:	4622      	mov	r2, r4
 800546c:	ec41 0b1a 	vmov	d10, r0, r1
 8005470:	462b      	mov	r3, r5
 8005472:	4630      	mov	r0, r6
 8005474:	4639      	mov	r1, r7
 8005476:	f7fa feab 	bl	80001d0 <__aeabi_dsub>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	ec51 0b1a 	vmov	r0, r1, d10
 8005482:	f7fb faed 	bl	8000a60 <__aeabi_dcmpgt>
 8005486:	2800      	cmp	r0, #0
 8005488:	f47f adf8 	bne.w	800507c <__ieee754_pow+0x384>
 800548c:	4aa4      	ldr	r2, [pc, #656]	; (8005720 <__ieee754_pow+0xa28>)
 800548e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005492:	4293      	cmp	r3, r2
 8005494:	f340 810b 	ble.w	80056ae <__ieee754_pow+0x9b6>
 8005498:	151b      	asrs	r3, r3, #20
 800549a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800549e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80054a2:	fa4a f303 	asr.w	r3, sl, r3
 80054a6:	445b      	add	r3, fp
 80054a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80054ac:	4e9d      	ldr	r6, [pc, #628]	; (8005724 <__ieee754_pow+0xa2c>)
 80054ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80054b2:	4116      	asrs	r6, r2
 80054b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80054b8:	2000      	movs	r0, #0
 80054ba:	ea23 0106 	bic.w	r1, r3, r6
 80054be:	f1c2 0214 	rsb	r2, r2, #20
 80054c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80054c6:	fa4a fa02 	asr.w	sl, sl, r2
 80054ca:	f1bb 0f00 	cmp.w	fp, #0
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4620      	mov	r0, r4
 80054d4:	4629      	mov	r1, r5
 80054d6:	bfb8      	it	lt
 80054d8:	f1ca 0a00 	rsblt	sl, sl, #0
 80054dc:	f7fa fe78 	bl	80001d0 <__aeabi_dsub>
 80054e0:	ec41 0b19 	vmov	d9, r0, r1
 80054e4:	4642      	mov	r2, r8
 80054e6:	464b      	mov	r3, r9
 80054e8:	ec51 0b19 	vmov	r0, r1, d9
 80054ec:	f7fa fe72 	bl	80001d4 <__adddf3>
 80054f0:	2400      	movs	r4, #0
 80054f2:	a379      	add	r3, pc, #484	; (adr r3, 80056d8 <__ieee754_pow+0x9e0>)
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	4620      	mov	r0, r4
 80054fa:	460d      	mov	r5, r1
 80054fc:	f7fb f820 	bl	8000540 <__aeabi_dmul>
 8005500:	ec53 2b19 	vmov	r2, r3, d9
 8005504:	4606      	mov	r6, r0
 8005506:	460f      	mov	r7, r1
 8005508:	4620      	mov	r0, r4
 800550a:	4629      	mov	r1, r5
 800550c:	f7fa fe60 	bl	80001d0 <__aeabi_dsub>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4640      	mov	r0, r8
 8005516:	4649      	mov	r1, r9
 8005518:	f7fa fe5a 	bl	80001d0 <__aeabi_dsub>
 800551c:	a370      	add	r3, pc, #448	; (adr r3, 80056e0 <__ieee754_pow+0x9e8>)
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	f7fb f80d 	bl	8000540 <__aeabi_dmul>
 8005526:	a370      	add	r3, pc, #448	; (adr r3, 80056e8 <__ieee754_pow+0x9f0>)
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	4680      	mov	r8, r0
 800552e:	4689      	mov	r9, r1
 8005530:	4620      	mov	r0, r4
 8005532:	4629      	mov	r1, r5
 8005534:	f7fb f804 	bl	8000540 <__aeabi_dmul>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4640      	mov	r0, r8
 800553e:	4649      	mov	r1, r9
 8005540:	f7fa fe48 	bl	80001d4 <__adddf3>
 8005544:	4604      	mov	r4, r0
 8005546:	460d      	mov	r5, r1
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4630      	mov	r0, r6
 800554e:	4639      	mov	r1, r7
 8005550:	f7fa fe40 	bl	80001d4 <__adddf3>
 8005554:	4632      	mov	r2, r6
 8005556:	463b      	mov	r3, r7
 8005558:	4680      	mov	r8, r0
 800555a:	4689      	mov	r9, r1
 800555c:	f7fa fe38 	bl	80001d0 <__aeabi_dsub>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4620      	mov	r0, r4
 8005566:	4629      	mov	r1, r5
 8005568:	f7fa fe32 	bl	80001d0 <__aeabi_dsub>
 800556c:	4642      	mov	r2, r8
 800556e:	4606      	mov	r6, r0
 8005570:	460f      	mov	r7, r1
 8005572:	464b      	mov	r3, r9
 8005574:	4640      	mov	r0, r8
 8005576:	4649      	mov	r1, r9
 8005578:	f7fa ffe2 	bl	8000540 <__aeabi_dmul>
 800557c:	a35c      	add	r3, pc, #368	; (adr r3, 80056f0 <__ieee754_pow+0x9f8>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	4604      	mov	r4, r0
 8005584:	460d      	mov	r5, r1
 8005586:	f7fa ffdb 	bl	8000540 <__aeabi_dmul>
 800558a:	a35b      	add	r3, pc, #364	; (adr r3, 80056f8 <__ieee754_pow+0xa00>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fa fe1e 	bl	80001d0 <__aeabi_dsub>
 8005594:	4622      	mov	r2, r4
 8005596:	462b      	mov	r3, r5
 8005598:	f7fa ffd2 	bl	8000540 <__aeabi_dmul>
 800559c:	a358      	add	r3, pc, #352	; (adr r3, 8005700 <__ieee754_pow+0xa08>)
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	f7fa fe17 	bl	80001d4 <__adddf3>
 80055a6:	4622      	mov	r2, r4
 80055a8:	462b      	mov	r3, r5
 80055aa:	f7fa ffc9 	bl	8000540 <__aeabi_dmul>
 80055ae:	a356      	add	r3, pc, #344	; (adr r3, 8005708 <__ieee754_pow+0xa10>)
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f7fa fe0c 	bl	80001d0 <__aeabi_dsub>
 80055b8:	4622      	mov	r2, r4
 80055ba:	462b      	mov	r3, r5
 80055bc:	f7fa ffc0 	bl	8000540 <__aeabi_dmul>
 80055c0:	a353      	add	r3, pc, #332	; (adr r3, 8005710 <__ieee754_pow+0xa18>)
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f7fa fe05 	bl	80001d4 <__adddf3>
 80055ca:	4622      	mov	r2, r4
 80055cc:	462b      	mov	r3, r5
 80055ce:	f7fa ffb7 	bl	8000540 <__aeabi_dmul>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4640      	mov	r0, r8
 80055d8:	4649      	mov	r1, r9
 80055da:	f7fa fdf9 	bl	80001d0 <__aeabi_dsub>
 80055de:	4604      	mov	r4, r0
 80055e0:	460d      	mov	r5, r1
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4640      	mov	r0, r8
 80055e8:	4649      	mov	r1, r9
 80055ea:	f7fa ffa9 	bl	8000540 <__aeabi_dmul>
 80055ee:	2200      	movs	r2, #0
 80055f0:	ec41 0b19 	vmov	d9, r0, r1
 80055f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055f8:	4620      	mov	r0, r4
 80055fa:	4629      	mov	r1, r5
 80055fc:	f7fa fde8 	bl	80001d0 <__aeabi_dsub>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	ec51 0b19 	vmov	r0, r1, d9
 8005608:	f7fb f8c4 	bl	8000794 <__aeabi_ddiv>
 800560c:	4632      	mov	r2, r6
 800560e:	4604      	mov	r4, r0
 8005610:	460d      	mov	r5, r1
 8005612:	463b      	mov	r3, r7
 8005614:	4640      	mov	r0, r8
 8005616:	4649      	mov	r1, r9
 8005618:	f7fa ff92 	bl	8000540 <__aeabi_dmul>
 800561c:	4632      	mov	r2, r6
 800561e:	463b      	mov	r3, r7
 8005620:	f7fa fdd8 	bl	80001d4 <__adddf3>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4620      	mov	r0, r4
 800562a:	4629      	mov	r1, r5
 800562c:	f7fa fdd0 	bl	80001d0 <__aeabi_dsub>
 8005630:	4642      	mov	r2, r8
 8005632:	464b      	mov	r3, r9
 8005634:	f7fa fdcc 	bl	80001d0 <__aeabi_dsub>
 8005638:	460b      	mov	r3, r1
 800563a:	4602      	mov	r2, r0
 800563c:	493a      	ldr	r1, [pc, #232]	; (8005728 <__ieee754_pow+0xa30>)
 800563e:	2000      	movs	r0, #0
 8005640:	f7fa fdc6 	bl	80001d0 <__aeabi_dsub>
 8005644:	e9cd 0100 	strd	r0, r1, [sp]
 8005648:	9b01      	ldr	r3, [sp, #4]
 800564a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800564e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005652:	da2f      	bge.n	80056b4 <__ieee754_pow+0x9bc>
 8005654:	4650      	mov	r0, sl
 8005656:	ed9d 0b00 	vldr	d0, [sp]
 800565a:	f000 f9cd 	bl	80059f8 <scalbn>
 800565e:	ec51 0b10 	vmov	r0, r1, d0
 8005662:	ec53 2b18 	vmov	r2, r3, d8
 8005666:	f7ff bbe0 	b.w	8004e2a <__ieee754_pow+0x132>
 800566a:	4b30      	ldr	r3, [pc, #192]	; (800572c <__ieee754_pow+0xa34>)
 800566c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005670:	429e      	cmp	r6, r3
 8005672:	f77f af0b 	ble.w	800548c <__ieee754_pow+0x794>
 8005676:	4b2e      	ldr	r3, [pc, #184]	; (8005730 <__ieee754_pow+0xa38>)
 8005678:	440b      	add	r3, r1
 800567a:	4303      	orrs	r3, r0
 800567c:	d00b      	beq.n	8005696 <__ieee754_pow+0x99e>
 800567e:	a326      	add	r3, pc, #152	; (adr r3, 8005718 <__ieee754_pow+0xa20>)
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	ec51 0b18 	vmov	r0, r1, d8
 8005688:	f7fa ff5a 	bl	8000540 <__aeabi_dmul>
 800568c:	a322      	add	r3, pc, #136	; (adr r3, 8005718 <__ieee754_pow+0xa20>)
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f7ff bbca 	b.w	8004e2a <__ieee754_pow+0x132>
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	f7fa fd99 	bl	80001d0 <__aeabi_dsub>
 800569e:	4642      	mov	r2, r8
 80056a0:	464b      	mov	r3, r9
 80056a2:	f7fb f9d3 	bl	8000a4c <__aeabi_dcmpge>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f43f aef0 	beq.w	800548c <__ieee754_pow+0x794>
 80056ac:	e7e7      	b.n	800567e <__ieee754_pow+0x986>
 80056ae:	f04f 0a00 	mov.w	sl, #0
 80056b2:	e717      	b.n	80054e4 <__ieee754_pow+0x7ec>
 80056b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056b8:	4619      	mov	r1, r3
 80056ba:	e7d2      	b.n	8005662 <__ieee754_pow+0x96a>
 80056bc:	491a      	ldr	r1, [pc, #104]	; (8005728 <__ieee754_pow+0xa30>)
 80056be:	2000      	movs	r0, #0
 80056c0:	f7ff bb9e 	b.w	8004e00 <__ieee754_pow+0x108>
 80056c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056c8:	f7ff bb9a 	b.w	8004e00 <__ieee754_pow+0x108>
 80056cc:	9000      	str	r0, [sp, #0]
 80056ce:	f7ff bb76 	b.w	8004dbe <__ieee754_pow+0xc6>
 80056d2:	2100      	movs	r1, #0
 80056d4:	f7ff bb60 	b.w	8004d98 <__ieee754_pow+0xa0>
 80056d8:	00000000 	.word	0x00000000
 80056dc:	3fe62e43 	.word	0x3fe62e43
 80056e0:	fefa39ef 	.word	0xfefa39ef
 80056e4:	3fe62e42 	.word	0x3fe62e42
 80056e8:	0ca86c39 	.word	0x0ca86c39
 80056ec:	be205c61 	.word	0xbe205c61
 80056f0:	72bea4d0 	.word	0x72bea4d0
 80056f4:	3e663769 	.word	0x3e663769
 80056f8:	c5d26bf1 	.word	0xc5d26bf1
 80056fc:	3ebbbd41 	.word	0x3ebbbd41
 8005700:	af25de2c 	.word	0xaf25de2c
 8005704:	3f11566a 	.word	0x3f11566a
 8005708:	16bebd93 	.word	0x16bebd93
 800570c:	3f66c16c 	.word	0x3f66c16c
 8005710:	5555553e 	.word	0x5555553e
 8005714:	3fc55555 	.word	0x3fc55555
 8005718:	c2f8f359 	.word	0xc2f8f359
 800571c:	01a56e1f 	.word	0x01a56e1f
 8005720:	3fe00000 	.word	0x3fe00000
 8005724:	000fffff 	.word	0x000fffff
 8005728:	3ff00000 	.word	0x3ff00000
 800572c:	4090cbff 	.word	0x4090cbff
 8005730:	3f6f3400 	.word	0x3f6f3400
 8005734:	652b82fe 	.word	0x652b82fe
 8005738:	3c971547 	.word	0x3c971547

0800573c <__ieee754_sqrt>:
 800573c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005740:	ec55 4b10 	vmov	r4, r5, d0
 8005744:	4e56      	ldr	r6, [pc, #344]	; (80058a0 <__ieee754_sqrt+0x164>)
 8005746:	43ae      	bics	r6, r5
 8005748:	ee10 0a10 	vmov	r0, s0
 800574c:	ee10 3a10 	vmov	r3, s0
 8005750:	4629      	mov	r1, r5
 8005752:	462a      	mov	r2, r5
 8005754:	d110      	bne.n	8005778 <__ieee754_sqrt+0x3c>
 8005756:	ee10 2a10 	vmov	r2, s0
 800575a:	462b      	mov	r3, r5
 800575c:	f7fa fef0 	bl	8000540 <__aeabi_dmul>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4620      	mov	r0, r4
 8005766:	4629      	mov	r1, r5
 8005768:	f7fa fd34 	bl	80001d4 <__adddf3>
 800576c:	4604      	mov	r4, r0
 800576e:	460d      	mov	r5, r1
 8005770:	ec45 4b10 	vmov	d0, r4, r5
 8005774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005778:	2d00      	cmp	r5, #0
 800577a:	dc10      	bgt.n	800579e <__ieee754_sqrt+0x62>
 800577c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005780:	4330      	orrs	r0, r6
 8005782:	d0f5      	beq.n	8005770 <__ieee754_sqrt+0x34>
 8005784:	b15d      	cbz	r5, 800579e <__ieee754_sqrt+0x62>
 8005786:	ee10 2a10 	vmov	r2, s0
 800578a:	462b      	mov	r3, r5
 800578c:	ee10 0a10 	vmov	r0, s0
 8005790:	f7fa fd1e 	bl	80001d0 <__aeabi_dsub>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	f7fa fffc 	bl	8000794 <__aeabi_ddiv>
 800579c:	e7e6      	b.n	800576c <__ieee754_sqrt+0x30>
 800579e:	1509      	asrs	r1, r1, #20
 80057a0:	d076      	beq.n	8005890 <__ieee754_sqrt+0x154>
 80057a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80057a6:	07ce      	lsls	r6, r1, #31
 80057a8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80057ac:	bf5e      	ittt	pl
 80057ae:	0fda      	lsrpl	r2, r3, #31
 80057b0:	005b      	lslpl	r3, r3, #1
 80057b2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80057b6:	0fda      	lsrs	r2, r3, #31
 80057b8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80057bc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80057c0:	2000      	movs	r0, #0
 80057c2:	106d      	asrs	r5, r5, #1
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	f04f 0e16 	mov.w	lr, #22
 80057ca:	4684      	mov	ip, r0
 80057cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057d0:	eb0c 0401 	add.w	r4, ip, r1
 80057d4:	4294      	cmp	r4, r2
 80057d6:	bfde      	ittt	le
 80057d8:	1b12      	suble	r2, r2, r4
 80057da:	eb04 0c01 	addle.w	ip, r4, r1
 80057de:	1840      	addle	r0, r0, r1
 80057e0:	0052      	lsls	r2, r2, #1
 80057e2:	f1be 0e01 	subs.w	lr, lr, #1
 80057e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80057ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80057ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80057f2:	d1ed      	bne.n	80057d0 <__ieee754_sqrt+0x94>
 80057f4:	4671      	mov	r1, lr
 80057f6:	2720      	movs	r7, #32
 80057f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80057fc:	4562      	cmp	r2, ip
 80057fe:	eb04 060e 	add.w	r6, r4, lr
 8005802:	dc02      	bgt.n	800580a <__ieee754_sqrt+0xce>
 8005804:	d113      	bne.n	800582e <__ieee754_sqrt+0xf2>
 8005806:	429e      	cmp	r6, r3
 8005808:	d811      	bhi.n	800582e <__ieee754_sqrt+0xf2>
 800580a:	2e00      	cmp	r6, #0
 800580c:	eb06 0e04 	add.w	lr, r6, r4
 8005810:	da43      	bge.n	800589a <__ieee754_sqrt+0x15e>
 8005812:	f1be 0f00 	cmp.w	lr, #0
 8005816:	db40      	blt.n	800589a <__ieee754_sqrt+0x15e>
 8005818:	f10c 0801 	add.w	r8, ip, #1
 800581c:	eba2 020c 	sub.w	r2, r2, ip
 8005820:	429e      	cmp	r6, r3
 8005822:	bf88      	it	hi
 8005824:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8005828:	1b9b      	subs	r3, r3, r6
 800582a:	4421      	add	r1, r4
 800582c:	46c4      	mov	ip, r8
 800582e:	0052      	lsls	r2, r2, #1
 8005830:	3f01      	subs	r7, #1
 8005832:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005836:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800583a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800583e:	d1dd      	bne.n	80057fc <__ieee754_sqrt+0xc0>
 8005840:	4313      	orrs	r3, r2
 8005842:	d006      	beq.n	8005852 <__ieee754_sqrt+0x116>
 8005844:	1c4c      	adds	r4, r1, #1
 8005846:	bf13      	iteet	ne
 8005848:	3101      	addne	r1, #1
 800584a:	3001      	addeq	r0, #1
 800584c:	4639      	moveq	r1, r7
 800584e:	f021 0101 	bicne.w	r1, r1, #1
 8005852:	1043      	asrs	r3, r0, #1
 8005854:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005858:	0849      	lsrs	r1, r1, #1
 800585a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800585e:	07c2      	lsls	r2, r0, #31
 8005860:	bf48      	it	mi
 8005862:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005866:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800586a:	460c      	mov	r4, r1
 800586c:	463d      	mov	r5, r7
 800586e:	e77f      	b.n	8005770 <__ieee754_sqrt+0x34>
 8005870:	0ada      	lsrs	r2, r3, #11
 8005872:	3815      	subs	r0, #21
 8005874:	055b      	lsls	r3, r3, #21
 8005876:	2a00      	cmp	r2, #0
 8005878:	d0fa      	beq.n	8005870 <__ieee754_sqrt+0x134>
 800587a:	02d7      	lsls	r7, r2, #11
 800587c:	d50a      	bpl.n	8005894 <__ieee754_sqrt+0x158>
 800587e:	f1c1 0420 	rsb	r4, r1, #32
 8005882:	fa23 f404 	lsr.w	r4, r3, r4
 8005886:	1e4d      	subs	r5, r1, #1
 8005888:	408b      	lsls	r3, r1
 800588a:	4322      	orrs	r2, r4
 800588c:	1b41      	subs	r1, r0, r5
 800588e:	e788      	b.n	80057a2 <__ieee754_sqrt+0x66>
 8005890:	4608      	mov	r0, r1
 8005892:	e7f0      	b.n	8005876 <__ieee754_sqrt+0x13a>
 8005894:	0052      	lsls	r2, r2, #1
 8005896:	3101      	adds	r1, #1
 8005898:	e7ef      	b.n	800587a <__ieee754_sqrt+0x13e>
 800589a:	46e0      	mov	r8, ip
 800589c:	e7be      	b.n	800581c <__ieee754_sqrt+0xe0>
 800589e:	bf00      	nop
 80058a0:	7ff00000 	.word	0x7ff00000

080058a4 <fabs>:
 80058a4:	ec51 0b10 	vmov	r0, r1, d0
 80058a8:	ee10 2a10 	vmov	r2, s0
 80058ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80058b0:	ec43 2b10 	vmov	d0, r2, r3
 80058b4:	4770      	bx	lr

080058b6 <finite>:
 80058b6:	b082      	sub	sp, #8
 80058b8:	ed8d 0b00 	vstr	d0, [sp]
 80058bc:	9801      	ldr	r0, [sp, #4]
 80058be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80058c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80058c6:	0fc0      	lsrs	r0, r0, #31
 80058c8:	b002      	add	sp, #8
 80058ca:	4770      	bx	lr
 80058cc:	0000      	movs	r0, r0
	...

080058d0 <nan>:
 80058d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80058d8 <nan+0x8>
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	00000000 	.word	0x00000000
 80058dc:	7ff80000 	.word	0x7ff80000

080058e0 <rint>:
 80058e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058e2:	ec51 0b10 	vmov	r0, r1, d0
 80058e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80058ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80058ee:	2e13      	cmp	r6, #19
 80058f0:	ee10 4a10 	vmov	r4, s0
 80058f4:	460b      	mov	r3, r1
 80058f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80058fa:	dc58      	bgt.n	80059ae <rint+0xce>
 80058fc:	2e00      	cmp	r6, #0
 80058fe:	da2b      	bge.n	8005958 <rint+0x78>
 8005900:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005904:	4302      	orrs	r2, r0
 8005906:	d023      	beq.n	8005950 <rint+0x70>
 8005908:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800590c:	4302      	orrs	r2, r0
 800590e:	4254      	negs	r4, r2
 8005910:	4314      	orrs	r4, r2
 8005912:	0c4b      	lsrs	r3, r1, #17
 8005914:	0b24      	lsrs	r4, r4, #12
 8005916:	045b      	lsls	r3, r3, #17
 8005918:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800591c:	ea44 0103 	orr.w	r1, r4, r3
 8005920:	4b32      	ldr	r3, [pc, #200]	; (80059ec <rint+0x10c>)
 8005922:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005926:	e9d3 6700 	ldrd	r6, r7, [r3]
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4630      	mov	r0, r6
 8005930:	4639      	mov	r1, r7
 8005932:	f7fa fc4f 	bl	80001d4 <__adddf3>
 8005936:	e9cd 0100 	strd	r0, r1, [sp]
 800593a:	463b      	mov	r3, r7
 800593c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005940:	4632      	mov	r2, r6
 8005942:	f7fa fc45 	bl	80001d0 <__aeabi_dsub>
 8005946:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800594a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800594e:	4639      	mov	r1, r7
 8005950:	ec41 0b10 	vmov	d0, r0, r1
 8005954:	b003      	add	sp, #12
 8005956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005958:	4a25      	ldr	r2, [pc, #148]	; (80059f0 <rint+0x110>)
 800595a:	4132      	asrs	r2, r6
 800595c:	ea01 0702 	and.w	r7, r1, r2
 8005960:	4307      	orrs	r7, r0
 8005962:	d0f5      	beq.n	8005950 <rint+0x70>
 8005964:	0851      	lsrs	r1, r2, #1
 8005966:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800596a:	4314      	orrs	r4, r2
 800596c:	d00c      	beq.n	8005988 <rint+0xa8>
 800596e:	ea23 0201 	bic.w	r2, r3, r1
 8005972:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005976:	2e13      	cmp	r6, #19
 8005978:	fa43 f606 	asr.w	r6, r3, r6
 800597c:	bf0c      	ite	eq
 800597e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005982:	2400      	movne	r4, #0
 8005984:	ea42 0306 	orr.w	r3, r2, r6
 8005988:	4918      	ldr	r1, [pc, #96]	; (80059ec <rint+0x10c>)
 800598a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800598e:	4622      	mov	r2, r4
 8005990:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005994:	4620      	mov	r0, r4
 8005996:	4629      	mov	r1, r5
 8005998:	f7fa fc1c 	bl	80001d4 <__adddf3>
 800599c:	e9cd 0100 	strd	r0, r1, [sp]
 80059a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059a4:	4622      	mov	r2, r4
 80059a6:	462b      	mov	r3, r5
 80059a8:	f7fa fc12 	bl	80001d0 <__aeabi_dsub>
 80059ac:	e7d0      	b.n	8005950 <rint+0x70>
 80059ae:	2e33      	cmp	r6, #51	; 0x33
 80059b0:	dd07      	ble.n	80059c2 <rint+0xe2>
 80059b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80059b6:	d1cb      	bne.n	8005950 <rint+0x70>
 80059b8:	ee10 2a10 	vmov	r2, s0
 80059bc:	f7fa fc0a 	bl	80001d4 <__adddf3>
 80059c0:	e7c6      	b.n	8005950 <rint+0x70>
 80059c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80059c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80059ca:	40d6      	lsrs	r6, r2
 80059cc:	4230      	tst	r0, r6
 80059ce:	d0bf      	beq.n	8005950 <rint+0x70>
 80059d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80059d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80059d8:	bf1f      	itttt	ne
 80059da:	ea24 0101 	bicne.w	r1, r4, r1
 80059de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80059e2:	fa44 f202 	asrne.w	r2, r4, r2
 80059e6:	ea41 0402 	orrne.w	r4, r1, r2
 80059ea:	e7cd      	b.n	8005988 <rint+0xa8>
 80059ec:	08005d40 	.word	0x08005d40
 80059f0:	000fffff 	.word	0x000fffff
 80059f4:	00000000 	.word	0x00000000

080059f8 <scalbn>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	ec55 4b10 	vmov	r4, r5, d0
 80059fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005a02:	4606      	mov	r6, r0
 8005a04:	462b      	mov	r3, r5
 8005a06:	b99a      	cbnz	r2, 8005a30 <scalbn+0x38>
 8005a08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005a0c:	4323      	orrs	r3, r4
 8005a0e:	d036      	beq.n	8005a7e <scalbn+0x86>
 8005a10:	4b39      	ldr	r3, [pc, #228]	; (8005af8 <scalbn+0x100>)
 8005a12:	4629      	mov	r1, r5
 8005a14:	ee10 0a10 	vmov	r0, s0
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f7fa fd91 	bl	8000540 <__aeabi_dmul>
 8005a1e:	4b37      	ldr	r3, [pc, #220]	; (8005afc <scalbn+0x104>)
 8005a20:	429e      	cmp	r6, r3
 8005a22:	4604      	mov	r4, r0
 8005a24:	460d      	mov	r5, r1
 8005a26:	da10      	bge.n	8005a4a <scalbn+0x52>
 8005a28:	a32b      	add	r3, pc, #172	; (adr r3, 8005ad8 <scalbn+0xe0>)
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	e03a      	b.n	8005aa6 <scalbn+0xae>
 8005a30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005a34:	428a      	cmp	r2, r1
 8005a36:	d10c      	bne.n	8005a52 <scalbn+0x5a>
 8005a38:	ee10 2a10 	vmov	r2, s0
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	4629      	mov	r1, r5
 8005a40:	f7fa fbc8 	bl	80001d4 <__adddf3>
 8005a44:	4604      	mov	r4, r0
 8005a46:	460d      	mov	r5, r1
 8005a48:	e019      	b.n	8005a7e <scalbn+0x86>
 8005a4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a4e:	460b      	mov	r3, r1
 8005a50:	3a36      	subs	r2, #54	; 0x36
 8005a52:	4432      	add	r2, r6
 8005a54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005a58:	428a      	cmp	r2, r1
 8005a5a:	dd08      	ble.n	8005a6e <scalbn+0x76>
 8005a5c:	2d00      	cmp	r5, #0
 8005a5e:	a120      	add	r1, pc, #128	; (adr r1, 8005ae0 <scalbn+0xe8>)
 8005a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a64:	da1c      	bge.n	8005aa0 <scalbn+0xa8>
 8005a66:	a120      	add	r1, pc, #128	; (adr r1, 8005ae8 <scalbn+0xf0>)
 8005a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a6c:	e018      	b.n	8005aa0 <scalbn+0xa8>
 8005a6e:	2a00      	cmp	r2, #0
 8005a70:	dd08      	ble.n	8005a84 <scalbn+0x8c>
 8005a72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005a7e:	ec45 4b10 	vmov	d0, r4, r5
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005a88:	da19      	bge.n	8005abe <scalbn+0xc6>
 8005a8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005a8e:	429e      	cmp	r6, r3
 8005a90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005a94:	dd0a      	ble.n	8005aac <scalbn+0xb4>
 8005a96:	a112      	add	r1, pc, #72	; (adr r1, 8005ae0 <scalbn+0xe8>)
 8005a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e2      	bne.n	8005a66 <scalbn+0x6e>
 8005aa0:	a30f      	add	r3, pc, #60	; (adr r3, 8005ae0 <scalbn+0xe8>)
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	f7fa fd4b 	bl	8000540 <__aeabi_dmul>
 8005aaa:	e7cb      	b.n	8005a44 <scalbn+0x4c>
 8005aac:	a10a      	add	r1, pc, #40	; (adr r1, 8005ad8 <scalbn+0xe0>)
 8005aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0b8      	beq.n	8005a28 <scalbn+0x30>
 8005ab6:	a10e      	add	r1, pc, #56	; (adr r1, 8005af0 <scalbn+0xf8>)
 8005ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005abc:	e7b4      	b.n	8005a28 <scalbn+0x30>
 8005abe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ac2:	3236      	adds	r2, #54	; 0x36
 8005ac4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ac8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005acc:	4620      	mov	r0, r4
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <scalbn+0x108>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	e7e8      	b.n	8005aa6 <scalbn+0xae>
 8005ad4:	f3af 8000 	nop.w
 8005ad8:	c2f8f359 	.word	0xc2f8f359
 8005adc:	01a56e1f 	.word	0x01a56e1f
 8005ae0:	8800759c 	.word	0x8800759c
 8005ae4:	7e37e43c 	.word	0x7e37e43c
 8005ae8:	8800759c 	.word	0x8800759c
 8005aec:	fe37e43c 	.word	0xfe37e43c
 8005af0:	c2f8f359 	.word	0xc2f8f359
 8005af4:	81a56e1f 	.word	0x81a56e1f
 8005af8:	43500000 	.word	0x43500000
 8005afc:	ffff3cb0 	.word	0xffff3cb0
 8005b00:	3c900000 	.word	0x3c900000

08005b04 <__errno>:
 8005b04:	4b01      	ldr	r3, [pc, #4]	; (8005b0c <__errno+0x8>)
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000020 	.word	0x20000020

08005b10 <_init>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	bf00      	nop
 8005b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b16:	bc08      	pop	{r3}
 8005b18:	469e      	mov	lr, r3
 8005b1a:	4770      	bx	lr

08005b1c <_fini>:
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	bf00      	nop
 8005b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b22:	bc08      	pop	{r3}
 8005b24:	469e      	mov	lr, r3
 8005b26:	4770      	bx	lr
