
full_pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a68  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08005bf0  08005bf0  00015bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e80  08005e80  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e88  08005e88  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000098  08005f28  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08005f28  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cba9  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6e  00000000  00000000  0002cc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002f498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e9d  00000000  00000000  0002ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd16  00000000  00000000  00052e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d77e8  00000000  00000000  0005fb5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00137343  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000358c  00000000  00000000  00137398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005bd8 	.word	0x08005bd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08005bd8 	.word	0x08005bd8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <main>:
  	  	  "Da li ste bili u kontaktu s nekim ko je bio pozitivan na COVID-19?"};
char* warning = "Molimo Vas da se javite na najblize COVID odjeljenje.";


int main(void)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f001 fcdd 	bl	80027fc <HAL_Init>
 // SystemClock_Config();
  /* Initialize all configured peripherals */
  initUSART2(921600);
 8000e42:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 8000e46:	f001 fa39 	bl	80022bc <initUSART2>
  MX_GPIO_Init();
 8000e4a:	f000 fc43 	bl	80016d4 <MX_GPIO_Init>
  MX_TIM12_Init();
 8000e4e:	f000 fbb5 	bl	80015bc <MX_TIM12_Init>
  MX_USART2_UART_Init();
 8000e52:	f000 fc15 	bl	8001680 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e56:	f000 fb5f 	bl	8001518 <MX_ADC1_Init>


  HAL_TIM_Base_Start(&htim12); //Initialize stm32 timer for DC motor
 8000e5a:	488b      	ldr	r0, [pc, #556]	; (8001088 <main+0x250>)
 8000e5c:	f002 fcb8 	bl	80037d0 <HAL_TIM_Base_Start>
  float cels;
  float raw;
  while(1){
	  /* run this while loop until IR sensor detects object
	  - this stops the program from running until an object is detected */
	  while(!movementDetected())
 8000e60:	e003      	b.n	8000e6a <main+0x32>
	  HAL_Delay(1000);
 8000e62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e66:	f001 fd3b 	bl	80028e0 <HAL_Delay>
	  while(!movementDetected())
 8000e6a:	f000 f999 	bl	80011a0 <movementDetected>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f6      	beq.n	8000e62 <main+0x2a>

	  printUSART2("Dobrodosli.\n");
 8000e74:	4885      	ldr	r0, [pc, #532]	; (800108c <main+0x254>)
 8000e76:	f001 fa8f 	bl	8002398 <printUSART2>
	  printUSART2("Molimo Vas dodirnite senzor za mjerenje temperature i sacekajte da se Vasa temperatura izmjeri.\n");
 8000e7a:	4885      	ldr	r0, [pc, #532]	; (8001090 <main+0x258>)
 8000e7c:	f001 fa8c 	bl	8002398 <printUSART2>
	  HAL_Delay(5000); // give time for person to touch the sensor
 8000e80:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e84:	f001 fd2c 	bl	80028e0 <HAL_Delay>

	    // thermistor temperature logic
        raw = getADC();
 8000e88:	f000 fb2e 	bl	80014e8 <getADC>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e96:	edc7 7a03 	vstr	s15, [r7, #12]
 	    R2 = R1 * (1023.0 / (float)raw - 1.0);
 8000e9a:	4b7e      	ldr	r3, [pc, #504]	; (8001094 <main+0x25c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff faf6 	bl	8000490 <__aeabi_f2d>
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	460d      	mov	r5, r1
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f7ff faf1 	bl	8000490 <__aeabi_f2d>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	a16f      	add	r1, pc, #444	; (adr r1, 8001070 <main+0x238>)
 8000eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000eb8:	f7ff fc6c 	bl	8000794 <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	4b73      	ldr	r3, [pc, #460]	; (8001098 <main+0x260>)
 8000eca:	f7ff f981 	bl	80001d0 <__aeabi_dsub>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	4629      	mov	r1, r5
 8000ed6:	f7ff fb33 	bl	8000540 <__aeabi_dmul>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f7ff fddd 	bl	8000aa0 <__aeabi_d2f>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a6c      	ldr	r2, [pc, #432]	; (800109c <main+0x264>)
 8000eea:	6013      	str	r3, [r2, #0]
 	    logR2 = log(R2);
 8000eec:	4b6b      	ldr	r3, [pc, #428]	; (800109c <main+0x264>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff facd 	bl	8000490 <__aeabi_f2d>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	ec43 2b10 	vmov	d0, r2, r3
 8000efe:	f003 fcab 	bl	8004858 <log>
 8000f02:	ec53 2b10 	vmov	r2, r3, d0
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fdc9 	bl	8000aa0 <__aeabi_d2f>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a63      	ldr	r2, [pc, #396]	; (80010a0 <main+0x268>)
 8000f12:	6013      	str	r3, [r2, #0]
 	    T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
 8000f14:	4b63      	ldr	r3, [pc, #396]	; (80010a4 <main+0x26c>)
 8000f16:	ed93 7a00 	vldr	s14, [r3]
 8000f1a:	4b61      	ldr	r3, [pc, #388]	; (80010a0 <main+0x268>)
 8000f1c:	edd3 7a00 	vldr	s15, [r3]
 8000f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f24:	4b60      	ldr	r3, [pc, #384]	; (80010a8 <main+0x270>)
 8000f26:	edd3 7a00 	vldr	s15, [r3]
 8000f2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f2e:	4b5f      	ldr	r3, [pc, #380]	; (80010ac <main+0x274>)
 8000f30:	edd3 6a00 	vldr	s13, [r3]
 8000f34:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <main+0x268>)
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f3e:	4b58      	ldr	r3, [pc, #352]	; (80010a0 <main+0x268>)
 8000f40:	edd3 7a00 	vldr	s15, [r3]
 8000f44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f48:	4b55      	ldr	r3, [pc, #340]	; (80010a0 <main+0x268>)
 8000f4a:	edd3 7a00 	vldr	s15, [r3]
 8000f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f5e:	4b54      	ldr	r3, [pc, #336]	; (80010b0 <main+0x278>)
 8000f60:	edc3 7a00 	vstr	s15, [r3]
 	    T = T - 273.15;
 8000f64:	4b52      	ldr	r3, [pc, #328]	; (80010b0 <main+0x278>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa91 	bl	8000490 <__aeabi_f2d>
 8000f6e:	a342      	add	r3, pc, #264	; (adr r3, 8001078 <main+0x240>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff f92c 	bl	80001d0 <__aeabi_dsub>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fd8e 	bl	8000aa0 <__aeabi_d2f>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a4a      	ldr	r2, [pc, #296]	; (80010b0 <main+0x278>)
 8000f88:	6013      	str	r3, [r2, #0]
 	    T = (T * 9.0)/ 5.0 + 32.0;
 8000f8a:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <main+0x278>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fa7e 	bl	8000490 <__aeabi_f2d>
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <main+0x27c>)
 8000f9a:	f7ff fad1 	bl	8000540 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <main+0x280>)
 8000fac:	f7ff fbf2 	bl	8000794 <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <main+0x284>)
 8000fbe:	f7ff f909 	bl	80001d4 <__adddf3>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fd69 	bl	8000aa0 <__aeabi_d2f>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a37      	ldr	r2, [pc, #220]	; (80010b0 <main+0x278>)
 8000fd2:	6013      	str	r3, [r2, #0]
 	    cels = (T - 32) * 5 / 9;
 8000fd4:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <main+0x278>)
 8000fd6:	edd3 7a00 	vldr	s15, [r3]
 8000fda:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80010c0 <main+0x288>
 8000fde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fe2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000fe6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fea:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8000fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff2:	edc7 7a02 	vstr	s15, [r7, #8]

 	 
	  	 // check if user has touched the thermistor
	  	 // no room temperature is over 30 deg. Celsius and no person's temperature is under 30 deg. C
	  	 if(cels> 30){
 8000ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ffa:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001006:	dd06      	ble.n	8001016 <main+0x1de>
	  	 	 printUSART2("Mjerenje ...\n");
 8001008:	482e      	ldr	r0, [pc, #184]	; (80010c4 <main+0x28c>)
 800100a:	f001 f9c5 	bl	8002398 <printUSART2>
	  	 	 HAL_Delay(5000); // wait aprox. 5sec for sensor to measure the temperature
 800100e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001012:	f001 fc65 	bl	80028e0 <HAL_Delay>
	  	 }

	  	 // output temperature
	  	 char res[4];
	  	 ftoa(cels, res, 1);
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2101      	movs	r1, #1
 800101a:	4618      	mov	r0, r3
 800101c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001020:	f000 fa06 	bl	8001430 <ftoa>
	  	 printUSART2("Vasa temperatura iznosi %s stepeni Celzijusa.\n", res);
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4619      	mov	r1, r3
 8001028:	4827      	ldr	r0, [pc, #156]	; (80010c8 <main+0x290>)
 800102a:	f001 f9b5 	bl	8002398 <printUSART2>

	 	 // if a person's temperature is higher than normal, stop the program and output the warning message
		 if(cels > 36.9) yesAnswer();
 800102e:	68b8      	ldr	r0, [r7, #8]
 8001030:	f7ff fa2e 	bl	8000490 <__aeabi_f2d>
 8001034:	a312      	add	r3, pc, #72	; (adr r3, 8001080 <main+0x248>)
 8001036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103a:	f7ff fd11 	bl	8000a60 <__aeabi_dcmpgt>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <main+0x212>
 8001044:	f000 f8d2 	bl	80011ec <yesAnswer>
 8001048:	e001      	b.n	800104e <main+0x216>
		 else  outputQuestions();
 800104a:	f000 f841 	bl	80010d0 <outputQuestions>
		 HAL_Delay(3000);
 800104e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001052:	f001 fc45 	bl	80028e0 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOD,red_Pin,GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800105c:	481b      	ldr	r0, [pc, #108]	; (80010cc <main+0x294>)
 800105e:	f002 faf5 	bl	800364c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD,green_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	4818      	ldr	r0, [pc, #96]	; (80010cc <main+0x294>)
 800106a:	f002 faef 	bl	800364c <HAL_GPIO_WritePin>
  while(1){
 800106e:	e6f7      	b.n	8000e60 <main+0x28>
 8001070:	00000000 	.word	0x00000000
 8001074:	408ff800 	.word	0x408ff800
 8001078:	66666666 	.word	0x66666666
 800107c:	40711266 	.word	0x40711266
 8001080:	33333333 	.word	0x33333333
 8001084:	40427333 	.word	0x40427333
 8001088:	20000154 	.word	0x20000154
 800108c:	08005d4c 	.word	0x08005d4c
 8001090:	08005d5c 	.word	0x08005d5c
 8001094:	20000000 	.word	0x20000000
 8001098:	3ff00000 	.word	0x3ff00000
 800109c:	2000010c 	.word	0x2000010c
 80010a0:	2000019c 	.word	0x2000019c
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	200000bc 	.word	0x200000bc
 80010b4:	40220000 	.word	0x40220000
 80010b8:	40140000 	.word	0x40140000
 80010bc:	40400000 	.word	0x40400000
 80010c0:	42000000 	.word	0x42000000
 80010c4:	08005dc0 	.word	0x08005dc0
 80010c8:	08005dd0 	.word	0x08005dd0
 80010cc:	40020c00 	.word	0x40020c00

080010d0 <outputQuestions>:

  }

}

void outputQuestions(void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	while(1){
		HAL_Delay(100);
 80010d4:	2064      	movs	r0, #100	; 0x64
 80010d6:	f001 fc03 	bl	80028e0 <HAL_Delay>
		counter = 0; // counter for questions[] array
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <outputQuestions+0xbc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
		// should be initialized to 0 every time the program goes trough loop again

	// first question
	printUSART2("%s ", nextQuestion());
 80010e0:	f000 f870 	bl	80011c4 <nextQuestion>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4619      	mov	r1, r3
 80010e8:	4829      	ldr	r0, [pc, #164]	; (8001190 <outputQuestions+0xc0>)
 80010ea:	f001 f955 	bl	8002398 <printUSART2>

	// check for YES button press
	if(checkYes()) { yesAnswer(); return; }
 80010ee:	f000 f893 	bl	8001218 <checkYes>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <outputQuestions+0x2e>
 80010f8:	f000 f878 	bl	80011ec <yesAnswer>
 80010fc:	e044      	b.n	8001188 <outputQuestions+0xb8>
	else {
		// second question
		printUSART2("%s ", nextQuestion());
 80010fe:	f000 f861 	bl	80011c4 <nextQuestion>
 8001102:	4603      	mov	r3, r0
 8001104:	4619      	mov	r1, r3
 8001106:	4822      	ldr	r0, [pc, #136]	; (8001190 <outputQuestions+0xc0>)
 8001108:	f001 f946 	bl	8002398 <printUSART2>
		if(checkYes()) { yesAnswer(); return; }
 800110c:	f000 f884 	bl	8001218 <checkYes>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <outputQuestions+0x4c>
 8001116:	f000 f869 	bl	80011ec <yesAnswer>
 800111a:	e035      	b.n	8001188 <outputQuestions+0xb8>
		else{
			// 3rd question
			printUSART2("%s ", nextQuestion());
 800111c:	f000 f852 	bl	80011c4 <nextQuestion>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	481a      	ldr	r0, [pc, #104]	; (8001190 <outputQuestions+0xc0>)
 8001126:	f001 f937 	bl	8002398 <printUSART2>
			if(checkYes()) { yesAnswer(); return; }
 800112a:	f000 f875 	bl	8001218 <checkYes>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <outputQuestions+0x6a>
 8001134:	f000 f85a 	bl	80011ec <yesAnswer>
 8001138:	e026      	b.n	8001188 <outputQuestions+0xb8>
				else {
					// 4th question
					printUSART2("%s ", nextQuestion());
 800113a:	f000 f843 	bl	80011c4 <nextQuestion>
 800113e:	4603      	mov	r3, r0
 8001140:	4619      	mov	r1, r3
 8001142:	4813      	ldr	r0, [pc, #76]	; (8001190 <outputQuestions+0xc0>)
 8001144:	f001 f928 	bl	8002398 <printUSART2>
					if(checkYes()) { yesAnswer(); return; }
 8001148:	f000 f866 	bl	8001218 <checkYes>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <outputQuestions+0x88>
 8001152:	f000 f84b 	bl	80011ec <yesAnswer>
 8001156:	e017      	b.n	8001188 <outputQuestions+0xb8>
					else{
						 HAL_GPIO_WritePin(GPIOD,green_Pin, GPIO_PIN_SET); // turn on green LED
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <outputQuestions+0xc4>)
 8001160:	f002 fa74 	bl	800364c <HAL_GPIO_WritePin>
						 printUSART2("Mozete uci u prostoriju.\n\n");
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <outputQuestions+0xc8>)
 8001166:	f001 f917 	bl	8002398 <printUSART2>
						 HAL_Delay(3000);
 800116a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800116e:	f001 fbb7 	bl	80028e0 <HAL_Delay>
						 HAL_GPIO_WritePin(GPIOA,DC_in1_Pin,GPIO_PIN_SET);   // Start motor clockwise rotation
 8001172:	2201      	movs	r2, #1
 8001174:	2110      	movs	r1, #16
 8001176:	4809      	ldr	r0, [pc, #36]	; (800119c <outputQuestions+0xcc>)
 8001178:	f002 fa68 	bl	800364c <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOA,DC_in2_Pin,GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2120      	movs	r1, #32
 8001180:	4806      	ldr	r0, [pc, #24]	; (800119c <outputQuestions+0xcc>)
 8001182:	f002 fa63 	bl	800364c <HAL_GPIO_WritePin>
						 return;
 8001186:	bf00      	nop
				}
		}
	}
	HAL_Delay(1000);
  }
}
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000108 	.word	0x20000108
 8001190:	08005e00 	.word	0x08005e00
 8001194:	40020c00 	.word	0x40020c00
 8001198:	08005e04 	.word	0x08005e04
 800119c:	40020000 	.word	0x40020000

080011a0 <movementDetected>:


int movementDetected(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	// IR sensor returns LOW (0) when an object is detected
	if(HAL_GPIO_ReadPin(IR_sensor_GPIO_Port, IR_sensor_Pin) == GPIO_PIN_RESET){
 80011a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <movementDetected+0x20>)
 80011aa:	f002 fa37 	bl	800361c <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <movementDetected+0x18>
		return 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e000      	b.n	80011ba <movementDetected+0x1a>
	}
	else return 0;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40020000 	.word	0x40020000

080011c4 <nextQuestion>:

char* nextQuestion(){
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	return questions[counter++];
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <nextQuestion+0x20>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1c5a      	adds	r2, r3, #1
 80011ce:	4905      	ldr	r1, [pc, #20]	; (80011e4 <nextQuestion+0x20>)
 80011d0:	600a      	str	r2, [r1, #0]
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <nextQuestion+0x24>)
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000108 	.word	0x20000108
 80011e8:	20000010 	.word	0x20000010

080011ec <yesAnswer>:

void yesAnswer(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	// turn on red LED
	HAL_GPIO_WritePin(GPIOD,red_Pin,GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <yesAnswer+0x20>)
 80011f8:	f002 fa28 	bl	800364c <HAL_GPIO_WritePin>
	printUSART2("%s\n\n", warning);
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <yesAnswer+0x24>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <yesAnswer+0x28>)
 8001204:	f001 f8c8 	bl	8002398 <printUSART2>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40020c00 	.word	0x40020c00
 8001210:	20000020 	.word	0x20000020
 8001214:	08005e20 	.word	0x08005e20

08001218 <checkYes>:

int checkYes(){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	while(!HAL_GPIO_ReadPin(GPIOA,yes_button_Pin) && !HAL_GPIO_ReadPin(GPIOD, no_button_Pin)){
 800121c:	e01f      	b.n	800125e <checkYes+0x46>

		if(HAL_GPIO_ReadPin(GPIOD, no_button_Pin)){
 800121e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001222:	4840      	ldr	r0, [pc, #256]	; (8001324 <checkYes+0x10c>)
 8001224:	f002 f9fa 	bl	800361c <HAL_GPIO_ReadPin>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d008      	beq.n	8001240 <checkYes+0x28>
			stateNo = HAL_GPIO_ReadPin(GPIOD, no_button_Pin);
 800122e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001232:	483c      	ldr	r0, [pc, #240]	; (8001324 <checkYes+0x10c>)
 8001234:	f002 f9f2 	bl	800361c <HAL_GPIO_ReadPin>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b3a      	ldr	r3, [pc, #232]	; (8001328 <checkYes+0x110>)
 800123e:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA,yes_button_Pin)){
 8001240:	2101      	movs	r1, #1
 8001242:	483a      	ldr	r0, [pc, #232]	; (800132c <checkYes+0x114>)
 8001244:	f002 f9ea 	bl	800361c <HAL_GPIO_ReadPin>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <checkYes+0x46>
			stateYes = HAL_GPIO_ReadPin(GPIOA,yes_button_Pin);
 800124e:	2101      	movs	r1, #1
 8001250:	4836      	ldr	r0, [pc, #216]	; (800132c <checkYes+0x114>)
 8001252:	f002 f9e3 	bl	800361c <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b35      	ldr	r3, [pc, #212]	; (8001330 <checkYes+0x118>)
 800125c:	601a      	str	r2, [r3, #0]
	while(!HAL_GPIO_ReadPin(GPIOA,yes_button_Pin) && !HAL_GPIO_ReadPin(GPIOD, no_button_Pin)){
 800125e:	2101      	movs	r1, #1
 8001260:	4832      	ldr	r0, [pc, #200]	; (800132c <checkYes+0x114>)
 8001262:	f002 f9db 	bl	800361c <HAL_GPIO_ReadPin>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d107      	bne.n	800127c <checkYes+0x64>
 800126c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001270:	482c      	ldr	r0, [pc, #176]	; (8001324 <checkYes+0x10c>)
 8001272:	f002 f9d3 	bl	800361c <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0d0      	beq.n	800121e <checkYes+0x6>
		}

	}

	if(HAL_GPIO_ReadPin(GPIOD, no_button_Pin)){
 800127c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001280:	4828      	ldr	r0, [pc, #160]	; (8001324 <checkYes+0x10c>)
 8001282:	f002 f9cb 	bl	800361c <HAL_GPIO_ReadPin>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <checkYes+0x86>
		stateNo = HAL_GPIO_ReadPin(GPIOD, no_button_Pin);
 800128c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001290:	4824      	ldr	r0, [pc, #144]	; (8001324 <checkYes+0x10c>)
 8001292:	f002 f9c3 	bl	800361c <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <checkYes+0x110>)
 800129c:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOA,yes_button_Pin)){
 800129e:	2101      	movs	r1, #1
 80012a0:	4822      	ldr	r0, [pc, #136]	; (800132c <checkYes+0x114>)
 80012a2:	f002 f9bb 	bl	800361c <HAL_GPIO_ReadPin>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d007      	beq.n	80012bc <checkYes+0xa4>
		stateYes = HAL_GPIO_ReadPin(GPIOA,yes_button_Pin);
 80012ac:	2101      	movs	r1, #1
 80012ae:	481f      	ldr	r0, [pc, #124]	; (800132c <checkYes+0x114>)
 80012b0:	f002 f9b4 	bl	800361c <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <checkYes+0x118>)
 80012ba:	601a      	str	r2, [r3, #0]
	}

	while(HAL_GPIO_ReadPin(GPIOA,yes_button_Pin) || HAL_GPIO_ReadPin(GPIOD, no_button_Pin));
 80012bc:	bf00      	nop
 80012be:	2101      	movs	r1, #1
 80012c0:	481a      	ldr	r0, [pc, #104]	; (800132c <checkYes+0x114>)
 80012c2:	f002 f9ab 	bl	800361c <HAL_GPIO_ReadPin>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f8      	bne.n	80012be <checkYes+0xa6>
 80012cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d0:	4814      	ldr	r0, [pc, #80]	; (8001324 <checkYes+0x10c>)
 80012d2:	f002 f9a3 	bl	800361c <HAL_GPIO_ReadPin>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f0      	bne.n	80012be <checkYes+0xa6>
	if(stateYes) {
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <checkYes+0x118>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00b      	beq.n	80012fc <checkYes+0xe4>
		stateYes = stateNo = 0;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <checkYes+0x110>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <checkYes+0x110>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <checkYes+0x118>)
 80012f0:	6013      	str	r3, [r2, #0]
		printUSART2("DA\n");
 80012f2:	4810      	ldr	r0, [pc, #64]	; (8001334 <checkYes+0x11c>)
 80012f4:	f001 f850 	bl	8002398 <printUSART2>

		return 1; // return 1 for yes
 80012f8:	2301      	movs	r3, #1
 80012fa:	e011      	b.n	8001320 <checkYes+0x108>
	}
	if(stateNo){
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <checkYes+0x110>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00b      	beq.n	800131c <checkYes+0x104>
		stateYes = stateNo = 0;
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <checkYes+0x110>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <checkYes+0x110>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a08      	ldr	r2, [pc, #32]	; (8001330 <checkYes+0x118>)
 8001310:	6013      	str	r3, [r2, #0]
		printUSART2("NE\n");
 8001312:	4809      	ldr	r0, [pc, #36]	; (8001338 <checkYes+0x120>)
 8001314:	f001 f840 	bl	8002398 <printUSART2>
		return 0; // return 0 for no
 8001318:	2300      	movs	r3, #0
 800131a:	e001      	b.n	8001320 <checkYes+0x108>
	}
	return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001320:	4618      	mov	r0, r3
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40020c00 	.word	0x40020c00
 8001328:	200000b8 	.word	0x200000b8
 800132c:	40020000 	.word	0x40020000
 8001330:	200000b4 	.word	0x200000b4
 8001334:	08005e28 	.word	0x08005e28
 8001338:	08005e2c 	.word	0x08005e2c

0800133c <reverse>:



void reverse(char* str, int len)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001350:	e018      	b.n	8001384 <reverse+0x48>
        temp = str[i];
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	441a      	add	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	440b      	add	r3, r1
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	701a      	strb	r2, [r3, #0]
        i++;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
        j--;
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	3b01      	subs	r3, #1
 8001382:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbe2      	blt.n	8001352 <reverse+0x16>
    }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	371c      	adds	r7, #28
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
    int i = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
    while (x) {
 80013ac:	e01d      	b.n	80013ea <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <intToStr+0x8c>)
 80013b2:	fb83 1302 	smull	r1, r3, r3, r2
 80013b6:	1099      	asrs	r1, r3, #2
 80013b8:	17d3      	asrs	r3, r2, #31
 80013ba:	1ac9      	subs	r1, r1, r3
 80013bc:	460b      	mov	r3, r1
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	1ad1      	subs	r1, r2, r3
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	1c59      	adds	r1, r3, #1
 80013cc:	6179      	str	r1, [r7, #20]
 80013ce:	4619      	mov	r1, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	440b      	add	r3, r1
 80013d4:	3230      	adds	r2, #48	; 0x30
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <intToStr+0x8c>)
 80013de:	fb82 1203 	smull	r1, r2, r2, r3
 80013e2:	1092      	asrs	r2, r2, #2
 80013e4:	17db      	asrs	r3, r3, #31
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	60fb      	str	r3, [r7, #12]
    while (x) {
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1de      	bne.n	80013ae <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80013f0:	e007      	b.n	8001402 <intToStr+0x66>
        str[i++] = '0';
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	617a      	str	r2, [r7, #20]
 80013f8:	461a      	mov	r2, r3
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	4413      	add	r3, r2
 80013fe:	2230      	movs	r2, #48	; 0x30
 8001400:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbf3      	blt.n	80013f2 <intToStr+0x56>

    reverse(str, i);
 800140a:	6979      	ldr	r1, [r7, #20]
 800140c:	68b8      	ldr	r0, [r7, #8]
 800140e:	f7ff ff95 	bl	800133c <reverse>
    str[i] = '\0';
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	4413      	add	r3, r2
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
    return i;
 800141c:	697b      	ldr	r3, [r7, #20]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	66666667 	.word	0x66666667
 800142c:	00000000 	.word	0x00000000

08001430 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a03 	vstr	s0, [r7, #12]
 800143a:	60b8      	str	r0, [r7, #8]
 800143c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800143e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001446:	ee17 3a90 	vmov	r3, s15
 800144a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001456:	ed97 7a03 	vldr	s14, [r7, #12]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	69f8      	ldr	r0, [r7, #28]
 8001468:	f7ff ff98 	bl	800139c <intToStr>
 800146c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d030      	beq.n	80014d6 <ftoa+0xa6>
        res[i] = '.'; // add dot
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	4413      	add	r3, r2
 800147a:	222e      	movs	r2, #46	; 0x2e
 800147c:	701a      	strb	r2, [r3, #0]

        /* Get the value of fraction part up to given no.
         of points after dot. The third parameter
         is needed to handle cases like 233.007*/
        fpart = fpart * pow(10, afterpoint);
 800147e:	69b8      	ldr	r0, [r7, #24]
 8001480:	f7ff f806 	bl	8000490 <__aeabi_f2d>
 8001484:	4604      	mov	r4, r0
 8001486:	460d      	mov	r5, r1
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7fe ffef 	bl	800046c <__aeabi_i2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	ec43 2b11 	vmov	d1, r2, r3
 8001496:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80014e0 <ftoa+0xb0>
 800149a:	f003 fa25 	bl	80048e8 <pow>
 800149e:	ec53 2b10 	vmov	r2, r3, d0
 80014a2:	4620      	mov	r0, r4
 80014a4:	4629      	mov	r1, r5
 80014a6:	f7ff f84b 	bl	8000540 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff faf5 	bl	8000aa0 <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80014ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80014be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	4413      	add	r3, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	4619      	mov	r1, r3
 80014ce:	ee17 0a90 	vmov	r0, s15
 80014d2:	f7ff ff63 	bl	800139c <intToStr>
    }
}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bdb0      	pop	{r4, r5, r7, pc}
 80014de:	bf00      	nop
 80014e0:	00000000 	.word	0x00000000
 80014e4:	40240000 	.word	0x40240000

080014e8 <getADC>:


uint16_t getADC(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	HAL_ADC_Start (&hadc1);
 80014ec:	4809      	ldr	r0, [pc, #36]	; (8001514 <getADC+0x2c>)
 80014ee:	f001 fa5f 	bl	80029b0 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1,10000) != HAL_OK);
 80014f2:	bf00      	nop
 80014f4:	f242 7110 	movw	r1, #10000	; 0x2710
 80014f8:	4806      	ldr	r0, [pc, #24]	; (8001514 <getADC+0x2c>)
 80014fa:	f001 fb2b 	bl	8002b54 <HAL_ADC_PollForConversion>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f7      	bne.n	80014f4 <getADC+0xc>
	// HAL_ADC_PollForConversion(&hadc1,10000);

	return HAL_ADC_GetValue(&hadc1);
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <getADC+0x2c>)
 8001506:	f001 fbb0 	bl	8002c6a <HAL_ADC_GetValue>
 800150a:	4603      	mov	r3, r0
 800150c:	b29b      	uxth	r3, r3
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000c0 	.word	0x200000c0

08001518 <MX_ADC1_Init>:
  }
}


static void MX_ADC1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 800151e:	463b      	mov	r3, r7
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <MX_ADC1_Init+0x98>)
 800152c:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <MX_ADC1_Init+0x9c>)
 800152e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001532:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001536:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <MX_ADC1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <MX_ADC1_Init+0x98>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001554:	2200      	movs	r2, #0
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <MX_ADC1_Init+0x98>)
 800155a:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <MX_ADC1_Init+0xa0>)
 800155c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001566:	2201      	movs	r2, #1
 8001568:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_ADC1_Init+0x98>)
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_ADC1_Init+0x98>)
 8001574:	2201      	movs	r2, #1
 8001576:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <MX_ADC1_Init+0x98>)
 800157a:	f001 f9d5 	bl	8002928 <HAL_ADC_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001584:	f000 f93c 	bl	8001800 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 8001588:	2301      	movs	r3, #1
 800158a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800158c:	2301      	movs	r3, #1
 800158e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_ADC1_Init+0x98>)
 800159a:	f001 fb73 	bl	8002c84 <HAL_ADC_ConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015a4:	f000 f92c 	bl	8001800 <Error_Handler>
  }

}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200000c0 	.word	0x200000c0
 80015b4:	40012000 	.word	0x40012000
 80015b8:	0f000001 	.word	0x0f000001

080015bc <MX_TIM12_Init>:


static void MX_TIM12_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 80015e2:	4b25      	ldr	r3, [pc, #148]	; (8001678 <MX_TIM12_Init+0xbc>)
 80015e4:	4a25      	ldr	r2, [pc, #148]	; (800167c <MX_TIM12_Init+0xc0>)
 80015e6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <MX_TIM12_Init+0xbc>)
 80015ea:	2253      	movs	r2, #83	; 0x53
 80015ec:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <MX_TIM12_Init+0xbc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <MX_TIM12_Init+0xbc>)
 80015f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015fa:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <MX_TIM12_Init+0xbc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <MX_TIM12_Init+0xbc>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001608:	481b      	ldr	r0, [pc, #108]	; (8001678 <MX_TIM12_Init+0xbc>)
 800160a:	f002 f891 	bl	8003730 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001614:	f000 f8f4 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800161e:	f107 0320 	add.w	r3, r7, #32
 8001622:	4619      	mov	r1, r3
 8001624:	4814      	ldr	r0, [pc, #80]	; (8001678 <MX_TIM12_Init+0xbc>)
 8001626:	f002 fa53 	bl	8003ad0 <HAL_TIM_ConfigClockSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001630:	f000 f8e6 	bl	8001800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001634:	4810      	ldr	r0, [pc, #64]	; (8001678 <MX_TIM12_Init+0xbc>)
 8001636:	f002 f933 	bl	80038a0 <HAL_TIM_PWM_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001640:	f000 f8de 	bl	8001800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001644:	2360      	movs	r3, #96	; 0x60
 8001646:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	4619      	mov	r1, r3
 800165a:	4807      	ldr	r0, [pc, #28]	; (8001678 <MX_TIM12_Init+0xbc>)
 800165c:	f002 f97a 	bl	8003954 <HAL_TIM_PWM_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001666:	f000 f8cb 	bl	8001800 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 800166a:	4803      	ldr	r0, [pc, #12]	; (8001678 <MX_TIM12_Init+0xbc>)
 800166c:	f000 fcbe 	bl	8001fec <HAL_TIM_MspPostInit>

}
 8001670:	bf00      	nop
 8001672:	3730      	adds	r7, #48	; 0x30
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000154 	.word	0x20000154
 800167c:	40001800 	.word	0x40001800

08001680 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <MX_USART2_UART_Init+0x50>)
 8001688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_USART2_UART_Init+0x4c>)
 80016b8:	f002 fdb8 	bl	800422c <HAL_UART_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016c2:	f000 f89d 	bl	8001800 <Error_Handler>
  }

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000110 	.word	0x20000110
 80016d0:	40004400 	.word	0x40004400

080016d4 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <MX_GPIO_Init+0x120>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a40      	ldr	r2, [pc, #256]	; (80017f4 <MX_GPIO_Init+0x120>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b3e      	ldr	r3, [pc, #248]	; (80017f4 <MX_GPIO_Init+0x120>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <MX_GPIO_Init+0x120>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a39      	ldr	r2, [pc, #228]	; (80017f4 <MX_GPIO_Init+0x120>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b37      	ldr	r3, [pc, #220]	; (80017f4 <MX_GPIO_Init+0x120>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <MX_GPIO_Init+0x120>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a32      	ldr	r2, [pc, #200]	; (80017f4 <MX_GPIO_Init+0x120>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <MX_GPIO_Init+0x120>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_in1_Pin|DC_in2_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2130      	movs	r1, #48	; 0x30
 8001742:	482d      	ldr	r0, [pc, #180]	; (80017f8 <MX_GPIO_Init+0x124>)
 8001744:	f001 ff82 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_Pin|red_Pin, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800174e:	482b      	ldr	r0, [pc, #172]	; (80017fc <MX_GPIO_Init+0x128>)
 8001750:	f001 ff7c 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : yes_button_Pin */
  GPIO_InitStruct.Pin = yes_button_Pin;
 8001754:	2301      	movs	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(yes_button_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4619      	mov	r1, r3
 8001766:	4824      	ldr	r0, [pc, #144]	; (80017f8 <MX_GPIO_Init+0x124>)
 8001768:	f001 fdbc 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_in1_Pin DC_in2_Pin */
  GPIO_InitStruct.Pin = DC_in1_Pin|DC_in2_Pin;
 800176c:	2330      	movs	r3, #48	; 0x30
 800176e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	4619      	mov	r1, r3
 8001782:	481d      	ldr	r0, [pc, #116]	; (80017f8 <MX_GPIO_Init+0x124>)
 8001784:	f001 fdae 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : no_button_Pin */
  GPIO_InitStruct.Pin = no_button_Pin;
 8001788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800178c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(no_button_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4619      	mov	r1, r3
 800179c:	4817      	ldr	r0, [pc, #92]	; (80017fc <MX_GPIO_Init+0x128>)
 800179e:	f001 fda1 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_Pin red_Pin */
  GPIO_InitStruct.Pin = green_Pin|red_Pin;
 80017a2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80017a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4619      	mov	r1, r3
 80017ba:	4810      	ldr	r0, [pc, #64]	; (80017fc <MX_GPIO_Init+0x128>)
 80017bc:	f001 fd92 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_sensor_Pin */
  GPIO_InitStruct.Pin = IR_sensor_Pin;
 80017c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ca:	2302      	movs	r3, #2
 80017cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_sensor_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	4619      	mov	r1, r3
 80017d4:	4808      	ldr	r0, [pc, #32]	; (80017f8 <MX_GPIO_Init+0x124>)
 80017d6:	f001 fd85 	bl	80032e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2028      	movs	r0, #40	; 0x28
 80017e0:	f001 fd49 	bl	8003276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017e4:	2028      	movs	r0, #40	; 0x28
 80017e6:	f001 fd62 	bl	80032ae <HAL_NVIC_EnableIRQ>

}
 80017ea:	bf00      	nop
 80017ec:	3720      	adds	r7, #32
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020c00 	.word	0x40020c00

08001800 <Error_Handler>:


void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop

  __disable_irq();
  while (1)
 8001808:	e7fe      	b.n	8001808 <Error_Handler+0x8>
	...

0800180c <getDNumMISC>:
#include "misc.h"

void getDNumMISC(uint8_t *dnum, uint32_t num)
{ /// calculate decimal digits from integer number 'num' and store them as ASCII char in dnum array
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    uint8_t k;
    uint32_t step = 1000000000;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <getDNumMISC+0x70>)
 8001818:	60bb      	str	r3, [r7, #8]

    for (k = 0; k < 10; k++)
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	e023      	b.n	8001868 <getDNumMISC+0x5c>
    {                     // convert integer value in hex format to decimal format
        dnum[9 - k] = 48; // set char value
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	f1c3 0309 	rsb	r3, r3, #9
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	2230      	movs	r2, #48	; 0x30
 800182e:	701a      	strb	r2, [r3, #0]
        while (num >= step)
 8001830:	e00d      	b.n	800184e <getDNumMISC+0x42>
        {
            dnum[9 - k]++;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	f1c3 0309 	rsb	r3, r3, #9
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	3201      	adds	r2, #1
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]
            num -= step;
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	603b      	str	r3, [r7, #0]
        while (num >= step)
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	429a      	cmp	r2, r3
 8001854:	d2ed      	bcs.n	8001832 <getDNumMISC+0x26>
        }
        step /= 10;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	4a09      	ldr	r2, [pc, #36]	; (8001880 <getDNumMISC+0x74>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	08db      	lsrs	r3, r3, #3
 8001860:	60bb      	str	r3, [r7, #8]
    for (k = 0; k < 10; k++)
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	3301      	adds	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	2b09      	cmp	r3, #9
 800186c:	d9d8      	bls.n	8001820 <getDNumMISC+0x14>
    }
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	3b9aca00 	.word	0x3b9aca00
 8001880:	cccccccd 	.word	0xcccccccd

08001884 <putDNumMISC>:

void putDNumMISC(uint8_t *dnum, uint16_t *m, uint8_t *r_str)
{ /// add unsigned integer number digits into string r_str
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
    uint8_t k = 0, flag = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	75fb      	strb	r3, [r7, #23]
 8001894:	2300      	movs	r3, #0
 8001896:	75bb      	strb	r3, [r7, #22]

    for (k = 0; k < 10; k++)
 8001898:	2300      	movs	r3, #0
 800189a:	75fb      	strb	r3, [r7, #23]
 800189c:	e03a      	b.n	8001914 <putDNumMISC+0x90>
    { // convert integer value in hex format to decimal format
        if (flag == 0)
 800189e:	7dbb      	ldrb	r3, [r7, #22]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d121      	bne.n	80018e8 <putDNumMISC+0x64>
        {
            if ((dnum[9 - k] != 48) || (k == 9)) // include the 0x00000000 number
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	f1c3 0309 	rsb	r3, r3, #9
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b30      	cmp	r3, #48	; 0x30
 80018b4:	d102      	bne.n	80018bc <putDNumMISC+0x38>
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	2b09      	cmp	r3, #9
 80018ba:	d128      	bne.n	800190e <putDNumMISC+0x8a>
            {
                flag = 1;
 80018bc:	2301      	movs	r3, #1
 80018be:	75bb      	strb	r3, [r7, #22]
                r_str[(*m)] = dnum[9 - k];
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	f1c3 0309 	rsb	r3, r3, #9
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	441a      	add	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	440b      	add	r3, r1
 80018d6:	7812      	ldrb	r2, [r2, #0]
 80018d8:	701a      	strb	r2, [r3, #0]
                (*m)++;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	801a      	strh	r2, [r3, #0]
 80018e6:	e012      	b.n	800190e <putDNumMISC+0x8a>
            }
        }
        else
        {
            r_str[(*m)] = dnum[9 - k];
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	f1c3 0309 	rsb	r3, r3, #9
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	441a      	add	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	440b      	add	r3, r1
 80018fe:	7812      	ldrb	r2, [r2, #0]
 8001900:	701a      	strb	r2, [r3, #0]
            (*m)++;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	801a      	strh	r2, [r3, #0]
    for (k = 0; k < 10; k++)
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	3301      	adds	r3, #1
 8001912:	75fb      	strb	r3, [r7, #23]
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b09      	cmp	r3, #9
 8001918:	d9c1      	bls.n	800189e <putDNumMISC+0x1a>
        }
    }
     r_str[(*m)] = 0x00;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	0000      	movs	r0, r0
	...

08001938 <getStr4NumMISC>:

void getStr4NumMISC(uint16_t type, uint32_t  * num, uint8_t * rstr)
{   /// print text and one signed integer or float number
 8001938:	b580      	push	{r7, lr}
 800193a:	b090      	sub	sp, #64	; 0x40
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	81fb      	strh	r3, [r7, #14]
    // the 'num' number is not modified!
    int32_t * p_int32;
    uint8_t dnum[11];
    uint8_t k;
    uint16_t m = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	827b      	strh	r3, [r7, #18]
    rstr[0] = 0x00;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
    
    switch(type)
 8001950:	89fb      	ldrh	r3, [r7, #14]
 8001952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001956:	f000 826f 	beq.w	8001e38 <getStr4NumMISC+0x500>
 800195a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800195e:	f300 82a4 	bgt.w	8001eaa <getStr4NumMISC+0x572>
 8001962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001966:	f000 822b 	beq.w	8001dc0 <getStr4NumMISC+0x488>
 800196a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196e:	f300 829c 	bgt.w	8001eaa <getStr4NumMISC+0x572>
 8001972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001976:	f000 81e7 	beq.w	8001d48 <getStr4NumMISC+0x410>
 800197a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800197e:	f300 8294 	bgt.w	8001eaa <getStr4NumMISC+0x572>
 8001982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001986:	f000 8104 	beq.w	8001b92 <getStr4NumMISC+0x25a>
 800198a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800198e:	f300 828c 	bgt.w	8001eaa <getStr4NumMISC+0x572>
 8001992:	2b80      	cmp	r3, #128	; 0x80
 8001994:	f000 828d 	beq.w	8001eb2 <getStr4NumMISC+0x57a>
 8001998:	2b80      	cmp	r3, #128	; 0x80
 800199a:	f300 8286 	bgt.w	8001eaa <getStr4NumMISC+0x572>
 800199e:	2b20      	cmp	r3, #32
 80019a0:	dc4a      	bgt.n	8001a38 <getStr4NumMISC+0x100>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f340 8281 	ble.w	8001eaa <getStr4NumMISC+0x572>
 80019a8:	3b01      	subs	r3, #1
 80019aa:	2b1f      	cmp	r3, #31
 80019ac:	f200 827d 	bhi.w	8001eaa <getStr4NumMISC+0x572>
 80019b0:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <getStr4NumMISC+0x80>)
 80019b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b6:	bf00      	nop
 80019b8:	08001a41 	.word	0x08001a41
 80019bc:	08001a99 	.word	0x08001a99
 80019c0:	08001eab 	.word	0x08001eab
 80019c4:	08001af1 	.word	0x08001af1
 80019c8:	08001eab 	.word	0x08001eab
 80019cc:	08001eab 	.word	0x08001eab
 80019d0:	08001eab 	.word	0x08001eab
 80019d4:	08001b45 	.word	0x08001b45
 80019d8:	08001eab 	.word	0x08001eab
 80019dc:	08001eab 	.word	0x08001eab
 80019e0:	08001eab 	.word	0x08001eab
 80019e4:	08001eab 	.word	0x08001eab
 80019e8:	08001eab 	.word	0x08001eab
 80019ec:	08001eab 	.word	0x08001eab
 80019f0:	08001eab 	.word	0x08001eab
 80019f4:	08001b45 	.word	0x08001b45
 80019f8:	08001eab 	.word	0x08001eab
 80019fc:	08001eab 	.word	0x08001eab
 8001a00:	08001eab 	.word	0x08001eab
 8001a04:	08001eab 	.word	0x08001eab
 8001a08:	08001eab 	.word	0x08001eab
 8001a0c:	08001eab 	.word	0x08001eab
 8001a10:	08001eab 	.word	0x08001eab
 8001a14:	08001eab 	.word	0x08001eab
 8001a18:	08001eab 	.word	0x08001eab
 8001a1c:	08001eab 	.word	0x08001eab
 8001a20:	08001eab 	.word	0x08001eab
 8001a24:	08001eab 	.word	0x08001eab
 8001a28:	08001eab 	.word	0x08001eab
 8001a2c:	08001eab 	.word	0x08001eab
 8001a30:	08001eab 	.word	0x08001eab
 8001a34:	08001b45 	.word	0x08001b45
 8001a38:	2b40      	cmp	r3, #64	; 0x40
 8001a3a:	f000 823c 	beq.w	8001eb6 <getStr4NumMISC+0x57e>
 8001a3e:	e234      	b.n	8001eaa <getStr4NumMISC+0x572>
    {
		case(PRINT_ARG_TYPE_BINARY_BYTE):
		{// 8 bit binary representation
			for(k=0;k<8;k++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a46:	e01c      	b.n	8001a82 <getStr4NumMISC+0x14a>
			{
				if((*num) & 0x00000080)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <getStr4NumMISC+0x12a>
				{
					rstr[k] = '1';
 8001a54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	2231      	movs	r2, #49	; 0x31
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e005      	b.n	8001a6e <getStr4NumMISC+0x136>
				}
				else
				{
					rstr[k] = '0';
 8001a62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	2230      	movs	r2, #48	; 0x30
 8001a6c:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	005a      	lsls	r2, r3, #1
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	601a      	str	r2, [r3, #0]
			for(k=0;k<8;k++)
 8001a78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a86:	2b07      	cmp	r3, #7
 8001a88:	d9de      	bls.n	8001a48 <getStr4NumMISC+0x110>
			}
			rstr[k] = 0x00;
 8001a8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
			break;
 8001a96:	e20f      	b.n	8001eb8 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_BINARY_HALFWORD):
		{// 16 bit binary representation
			for(k=0;k<16;k++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a9e:	e01c      	b.n	8001ada <getStr4NumMISC+0x1a2>
			{
				if((*num) & 0x00008000)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <getStr4NumMISC+0x182>
				{
					rstr[k] = '1';
 8001aac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	2231      	movs	r2, #49	; 0x31
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e005      	b.n	8001ac6 <getStr4NumMISC+0x18e>
				}
				else
				{
					rstr[k] = '0';
 8001aba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	2230      	movs	r2, #48	; 0x30
 8001ac4:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	005a      	lsls	r2, r3, #1
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	601a      	str	r2, [r3, #0]
			for(k=0;k<16;k++)
 8001ad0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001ada:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	d9de      	bls.n	8001aa0 <getStr4NumMISC+0x168>
			}
			rstr[k] = 0x00;
 8001ae2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
			break;
 8001aee:	e1e3      	b.n	8001eb8 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_BINARY_WORD):
		{// 32 bit binary representation
			for(k=0;k<32;k++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001af6:	e01a      	b.n	8001b2e <getStr4NumMISC+0x1f6>
			{
				if((*num) & 0x80000000)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	da06      	bge.n	8001b0e <getStr4NumMISC+0x1d6>
				{
					rstr[k] = '1';
 8001b00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	2231      	movs	r2, #49	; 0x31
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	e005      	b.n	8001b1a <getStr4NumMISC+0x1e2>
				}
				else
				{
					rstr[k] = '0';
 8001b0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	2230      	movs	r2, #48	; 0x30
 8001b18:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	005a      	lsls	r2, r3, #1
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	601a      	str	r2, [r3, #0]
			for(k=0;k<32;k++)
 8001b24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001b2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b32:	2b1f      	cmp	r3, #31
 8001b34:	d9e0      	bls.n	8001af8 <getStr4NumMISC+0x1c0>
			}
			rstr[k] = 0x00;
 8001b36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
			break;
 8001b42:	e1b9      	b.n	8001eb8 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_DECIMAL_BYTE):
		case(PRINT_ARG_TYPE_DECIMAL_HALFWORD):
		case(PRINT_ARG_TYPE_DECIMAL_WORD):
		{// conver integer number into appropriate string
			p_int32 = (int32_t *)num;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	623b      	str	r3, [r7, #32]
            if (*p_int32 < 0)
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da0e      	bge.n	8001b6e <getStr4NumMISC+0x236>
            { // print the sign character
                rstr[m] = '-';
 8001b50:	8a7b      	ldrh	r3, [r7, #18]
 8001b52:	461a      	mov	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	222d      	movs	r2, #45	; 0x2d
 8001b5a:	701a      	strb	r2, [r3, #0]
                m++;
 8001b5c:	8a7b      	ldrh	r3, [r7, #18]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	827b      	strh	r3, [r7, #18]
                *p_int32 = (*p_int32)*(-1);
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	425a      	negs	r2, r3
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	601a      	str	r2, [r3, #0]
            }

            getDNumMISC(dnum, (uint32_t)(*p_int32));
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fe46 	bl	800180c <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001b80:	f107 0112 	add.w	r1, r7, #18
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fe7a 	bl	8001884 <putDNumMISC>
			break;
 8001b90:	e192      	b.n	8001eb8 <getStr4NumMISC+0x580>
			//getDNumMISC(dnum, exp);
            //putDNumMISC(dnum, &m, rstr);
			
			
			float f_step;
			float f_num = *((float *)num); // convert pointer
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t sige = ' ';
 8001b98:	2320      	movs	r3, #32
 8001b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			uint16_t e_part;
			uint32_t d_part, i_part;
			
            if (f_num < 0)
 8001b9e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ba2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	d50f      	bpl.n	8001bcc <getStr4NumMISC+0x294>
            { // negative float number
                rstr[m] = '-';
 8001bac:	8a7b      	ldrh	r3, [r7, #18]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	222d      	movs	r2, #45	; 0x2d
 8001bb6:	701a      	strb	r2, [r3, #0]
                m++;
 8001bb8:	8a7b      	ldrh	r3, [r7, #18]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	827b      	strh	r3, [r7, #18]
                f_num = (-1) * f_num;
 8001bc0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bc4:	eef1 7a67 	vneg.f32	s15, s15
 8001bc8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            }

            if (f_num < 1)
 8001bcc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d524      	bpl.n	8001c28 <getStr4NumMISC+0x2f0>
            {
                sige = '-';
 8001bde:	232d      	movs	r3, #45	; 0x2d
 8001be0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                f_step = 0.1;
 8001be4:	4bb8      	ldr	r3, [pc, #736]	; (8001ec8 <getStr4NumMISC+0x590>)
 8001be6:	63bb      	str	r3, [r7, #56]	; 0x38
                e_part = 1;
 8001be8:	2301      	movs	r3, #1
 8001bea:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num < f_step)
 8001bec:	e012      	b.n	8001c14 <getStr4NumMISC+0x2dc>
                {
                    f_step = f_step * 0.1;
 8001bee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001bf0:	f7fe fc4e 	bl	8000490 <__aeabi_f2d>
 8001bf4:	a3b2      	add	r3, pc, #712	; (adr r3, 8001ec0 <getStr4NumMISC+0x588>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fca1 	bl	8000540 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7fe ff4b 	bl	8000aa0 <__aeabi_d2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	63bb      	str	r3, [r7, #56]	; 0x38
                    e_part++;
 8001c0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001c10:	3301      	adds	r3, #1
 8001c12:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num < f_step)
 8001c14:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c18:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	d4e3      	bmi.n	8001bee <getStr4NumMISC+0x2b6>
 8001c26:	e024      	b.n	8001c72 <getStr4NumMISC+0x33a>
                }
            }
            else
            {
                f_step = 1.0;
 8001c28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c2c:	63bb      	str	r3, [r7, #56]	; 0x38
                e_part = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num > f_step)
 8001c32:	e00a      	b.n	8001c4a <getStr4NumMISC+0x312>
                {
                    f_step = f_step * 10;
 8001c34:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c40:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    e_part++;
 8001c44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001c46:	3301      	adds	r3, #1
 8001c48:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num > f_step)
 8001c4a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c4e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	dceb      	bgt.n	8001c34 <getStr4NumMISC+0x2fc>
                }
                f_step = f_step / 10;
 8001c5c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c60:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                e_part--;
 8001c6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	863b      	strh	r3, [r7, #48]	; 0x30
            }

            f_num = f_num / f_step;
 8001c72:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001c76:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c7e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            i_part = (uint32_t)f_num;
 8001c82:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8a:	ee17 3a90 	vmov	r3, s15
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28

            f_num = f_num - (float)i_part;
 8001c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c9a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            d_part = (uint32_t)(1000 * f_num);
 8001ca6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001caa:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001ecc <getStr4NumMISC+0x594>
 8001cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb6:	ee17 3a90 	vmov	r3, s15
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24

            getDNumMISC(dnum, i_part);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fda2 	bl	800180c <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001cc8:	f107 0112 	add.w	r1, r7, #18
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fdd6 	bl	8001884 <putDNumMISC>

            getDNumMISC(dnum, d_part);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fd94 	bl	800180c <getDNumMISC>
            dnum[3] = '.';
 8001ce4:	232e      	movs	r3, #46	; 0x2e
 8001ce6:	75fb      	strb	r3, [r7, #23]
            putDNumMISC(dnum, &m, rstr);
 8001ce8:	f107 0112 	add.w	r1, r7, #18
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fdc6 	bl	8001884 <putDNumMISC>

            rstr[m] = 'e';
 8001cf8:	8a7b      	ldrh	r3, [r7, #18]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	2265      	movs	r2, #101	; 0x65
 8001d02:	701a      	strb	r2, [r3, #0]
            m++;
 8001d04:	8a7b      	ldrh	r3, [r7, #18]
 8001d06:	3301      	adds	r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	827b      	strh	r3, [r7, #18]

            if (sige == '-')
 8001d0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d10:	2b2d      	cmp	r3, #45	; 0x2d
 8001d12:	d109      	bne.n	8001d28 <getStr4NumMISC+0x3f0>
            {
                rstr[m] = '-';
 8001d14:	8a7b      	ldrh	r3, [r7, #18]
 8001d16:	461a      	mov	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	222d      	movs	r2, #45	; 0x2d
 8001d1e:	701a      	strb	r2, [r3, #0]
                m++;
 8001d20:	8a7b      	ldrh	r3, [r7, #18]
 8001d22:	3301      	adds	r3, #1
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	827b      	strh	r3, [r7, #18]
            }

            getDNumMISC(dnum, e_part);
 8001d28:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fd6b 	bl	800180c <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001d36:	f107 0112 	add.w	r1, r7, #18
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fd9f 	bl	8001884 <putDNumMISC>
				
			break;
 8001d46:	e0b7      	b.n	8001eb8 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_HEXADECIMAL_BYTE):
		{// 8 bit hex string representation
			uint8_t t_rez;
            for (k=0;k<2;k++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d4e:	e02c      	b.n	8001daa <getStr4NumMISC+0x472>
            {
                t_rez = ((*num) & 0x000000F0) >> 4;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                if (t_rez < 0x0A)
 8001d60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d64:	2b09      	cmp	r3, #9
 8001d66:	d809      	bhi.n	8001d7c <getStr4NumMISC+0x444>
                {
                    rstr[m] = t_rez + 0x30;
 8001d68:	8a7b      	ldrh	r3, [r7, #18]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001d74:	3230      	adds	r2, #48	; 0x30
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	e008      	b.n	8001d8e <getStr4NumMISC+0x456>
                }
                else
                {
                    rstr[m] = t_rez + 0x41 - 0x0A;
 8001d7c:	8a7b      	ldrh	r3, [r7, #18]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001d88:	3237      	adds	r2, #55	; 0x37
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	011a      	lsls	r2, r3, #4
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	601a      	str	r2, [r3, #0]
                m++;
 8001d98:	8a7b      	ldrh	r3, [r7, #18]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	827b      	strh	r3, [r7, #18]
            for (k=0;k<2;k++)
 8001da0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001da4:	3301      	adds	r3, #1
 8001da6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001daa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d9ce      	bls.n	8001d50 <getStr4NumMISC+0x418>
            }
            rstr[m] = 0x00;
 8001db2:	8a7b      	ldrh	r3, [r7, #18]
 8001db4:	461a      	mov	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
			break;
 8001dbe:	e07b      	b.n	8001eb8 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_HEXADECIMAL_HALFWORD):
		{// 16 bit hex string representation
			uint8_t t_rez;
            for (k=0;k<4;k++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001dc6:	e02c      	b.n	8001e22 <getStr4NumMISC+0x4ea>
            {
                t_rez = ((*num) & 0x0000F000) >> 12;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0b1b      	lsrs	r3, r3, #12
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                if (t_rez < 0x0A)
 8001dd8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ddc:	2b09      	cmp	r3, #9
 8001dde:	d809      	bhi.n	8001df4 <getStr4NumMISC+0x4bc>
                {
                    rstr[m] = t_rez + 0x30;
 8001de0:	8a7b      	ldrh	r3, [r7, #18]
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001dec:	3230      	adds	r2, #48	; 0x30
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]
 8001df2:	e008      	b.n	8001e06 <getStr4NumMISC+0x4ce>
                }
                else
                {
                    rstr[m] = t_rez + 0x41 - 0x0A;
 8001df4:	8a7b      	ldrh	r3, [r7, #18]
 8001df6:	461a      	mov	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001e00:	3237      	adds	r2, #55	; 0x37
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	011a      	lsls	r2, r3, #4
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	601a      	str	r2, [r3, #0]
                m++;
 8001e10:	8a7b      	ldrh	r3, [r7, #18]
 8001e12:	3301      	adds	r3, #1
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	827b      	strh	r3, [r7, #18]
            for (k=0;k<4;k++)
 8001e18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d9ce      	bls.n	8001dc8 <getStr4NumMISC+0x490>
            }
            rstr[m] = 0x00;
 8001e2a:	8a7b      	ldrh	r3, [r7, #18]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
			break;
 8001e36:	e03f      	b.n	8001eb8 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_HEXADECIMAL_WORD):
		{// 32 bit hex string representation
            uint8_t t_rez;
            for (k=0;k<8;k++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e3e:	e029      	b.n	8001e94 <getStr4NumMISC+0x55c>
            {
                t_rez = ((*num) & 0xF0000000) >> 28;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0f1b      	lsrs	r3, r3, #28
 8001e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if (t_rez < 0x0A)
 8001e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e4e:	2b09      	cmp	r3, #9
 8001e50:	d809      	bhi.n	8001e66 <getStr4NumMISC+0x52e>
                {
                    rstr[m] = t_rez + 0x30;
 8001e52:	8a7b      	ldrh	r3, [r7, #18]
 8001e54:	461a      	mov	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001e5e:	3230      	adds	r2, #48	; 0x30
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e008      	b.n	8001e78 <getStr4NumMISC+0x540>
                }
                else
                {
                    rstr[m] = t_rez + 0x41 - 0x0A;
 8001e66:	8a7b      	ldrh	r3, [r7, #18]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001e72:	3237      	adds	r2, #55	; 0x37
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	011a      	lsls	r2, r3, #4
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	601a      	str	r2, [r3, #0]
                m++;
 8001e82:	8a7b      	ldrh	r3, [r7, #18]
 8001e84:	3301      	adds	r3, #1
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	827b      	strh	r3, [r7, #18]
            for (k=0;k<8;k++)
 8001e8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e98:	2b07      	cmp	r3, #7
 8001e9a:	d9d1      	bls.n	8001e40 <getStr4NumMISC+0x508>
            }
            rstr[m] = 0x00;
 8001e9c:	8a7b      	ldrh	r3, [r7, #18]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
			break;
 8001ea8:	e006      	b.n	8001eb8 <getStr4NumMISC+0x580>
		}
		default:
		{
			rstr[0] = 0x00;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
			break;
 8001eb0:	e002      	b.n	8001eb8 <getStr4NumMISC+0x580>
			break;
 8001eb2:	bf00      	nop
 8001eb4:	e000      	b.n	8001eb8 <getStr4NumMISC+0x580>
			break;
 8001eb6:	bf00      	nop
		}
	}
}
 8001eb8:	bf00      	nop
 8001eba:	3740      	adds	r7, #64	; 0x40
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	9999999a 	.word	0x9999999a
 8001ec4:	3fb99999 	.word	0x3fb99999
 8001ec8:	3dcccccd 	.word	0x3dcccccd
 8001ecc:	447a0000 	.word	0x447a0000

08001ed0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_MspInit+0x4c>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_MspInit+0x4c>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_MspInit+0x4c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_MspInit+0x4c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <HAL_MspInit+0x4c>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_ADC_MspInit+0x7c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d127      	bne.n	8001f92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_ADC_MspInit+0x80>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <HAL_ADC_MspInit+0x80>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_ADC_MspInit+0x80>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_ADC_MspInit+0x80>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <HAL_ADC_MspInit+0x80>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_ADC_MspInit+0x80>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = thermistor_Pin;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(thermistor_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <HAL_ADC_MspInit+0x84>)
 8001f8e:	f001 f9a9 	bl	80032e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f92:	bf00      	nop
 8001f94:	3728      	adds	r7, #40	; 0x28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40012000 	.word	0x40012000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020000 	.word	0x40020000

08001fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <HAL_TIM_Base_MspInit+0x3c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_TIM_Base_MspInit+0x40>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_TIM_Base_MspInit+0x40>)
 8001fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <HAL_TIM_Base_MspInit+0x40>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40001800 	.word	0x40001800
 8001fe8:	40023800 	.word	0x40023800

08001fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a12      	ldr	r2, [pc, #72]	; (8002054 <HAL_TIM_MspPostInit+0x68>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d11e      	bne.n	800204c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_TIM_MspPostInit+0x6c>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_TIM_MspPostInit+0x6c>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_TIM_MspPostInit+0x6c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800202a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800202e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800203c:	2309      	movs	r3, #9
 800203e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	4619      	mov	r1, r3
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <HAL_TIM_MspPostInit+0x70>)
 8002048:	f001 f94c 	bl	80032e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800204c:	bf00      	nop
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40001800 	.word	0x40001800
 8002058:	40023800 	.word	0x40023800
 800205c:	40020400 	.word	0x40020400

08002060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a19      	ldr	r2, [pc, #100]	; (80020e4 <HAL_UART_MspInit+0x84>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d12b      	bne.n	80020da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <HAL_UART_MspInit+0x88>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a17      	ldr	r2, [pc, #92]	; (80020e8 <HAL_UART_MspInit+0x88>)
 800208c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_UART_MspInit+0x88>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_UART_MspInit+0x88>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <HAL_UART_MspInit+0x88>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_UART_MspInit+0x88>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020ba:	230c      	movs	r3, #12
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020ca:	2307      	movs	r3, #7
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <HAL_UART_MspInit+0x8c>)
 80020d6:	f001 f905 	bl	80032e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40004400 	.word	0x40004400
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40020000 	.word	0x40020000

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <HardFault_Handler+0x4>

08002104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <MemManage_Handler+0x4>

0800210a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <BusFault_Handler+0x4>

08002110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <UsageFault_Handler+0x4>

08002116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002144:	f000 fbac 	bl	80028a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002150:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002154:	f001 fa94 	bl	8003680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}

0800215c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <SystemInit+0x60>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a15      	ldr	r2, [pc, #84]	; (80021bc <SystemInit+0x60>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <SystemInit+0x60>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <SystemInit+0x60>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <SystemInit+0x60>)
 8002178:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800217c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <SystemInit+0x60>)
 8002184:	4a0e      	ldr	r2, [pc, #56]	; (80021c0 <SystemInit+0x64>)
 8002186:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <SystemInit+0x60>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <SystemInit+0x60>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002192:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <SystemInit+0x60>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800219a:	f000 f815 	bl	80021c8 <SetSysClock>
  // ENABLE FPU!!!!!!!!!!!!!
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <SystemInit+0x68>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <SystemInit+0x68>)
 80021a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SystemInit+0x68>)
 80021b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021b4:	609a      	str	r2, [r3, #8]
#endif
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	24003010 	.word	0x24003010
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	2300      	movs	r3, #0
 80021d4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80021d6:	4b35      	ldr	r3, [pc, #212]	; (80022ac <SetSysClock+0xe4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a34      	ldr	r2, [pc, #208]	; (80022ac <SetSysClock+0xe4>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80021e2:	4b32      	ldr	r3, [pc, #200]	; (80022ac <SetSysClock+0xe4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3301      	adds	r3, #1
 80021f0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <SetSysClock+0x36>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d1f1      	bne.n	80021e2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80021fe:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <SetSysClock+0xe4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <SetSysClock+0x48>
  {
    HSEStatus = (uint32_t)0x01;
 800220a:	2301      	movs	r3, #1
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	e001      	b.n	8002214 <SetSysClock+0x4c>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002210:	2300      	movs	r3, #0
 8002212:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d142      	bne.n	80022a0 <SetSysClock+0xd8>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <SetSysClock+0xe4>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a23      	ldr	r2, [pc, #140]	; (80022ac <SetSysClock+0xe4>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <SetSysClock+0xe8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a21      	ldr	r2, [pc, #132]	; (80022b0 <SetSysClock+0xe8>)
 800222c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002230:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <SetSysClock+0xe4>)
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <SetSysClock+0xe4>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <SetSysClock+0xe4>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <SetSysClock+0xe4>)
 8002240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002244:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <SetSysClock+0xe4>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	4a18      	ldr	r2, [pc, #96]	; (80022ac <SetSysClock+0xe4>)
 800224c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002250:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <SetSysClock+0xe4>)
 8002254:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <SetSysClock+0xec>)
 8002256:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002258:	4b14      	ldr	r3, [pc, #80]	; (80022ac <SetSysClock+0xe4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a13      	ldr	r2, [pc, #76]	; (80022ac <SetSysClock+0xe4>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002262:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002264:	bf00      	nop
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <SetSysClock+0xe4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f9      	beq.n	8002266 <SetSysClock+0x9e>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <SetSysClock+0xf0>)
 8002274:	f240 6205 	movw	r2, #1541	; 0x605
 8002278:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <SetSysClock+0xe4>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <SetSysClock+0xe4>)
 8002280:	f023 0303 	bic.w	r3, r3, #3
 8002284:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <SetSysClock+0xe4>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4a08      	ldr	r2, [pc, #32]	; (80022ac <SetSysClock+0xe4>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002292:	bf00      	nop
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <SetSysClock+0xe4>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	d1f9      	bne.n	8002294 <SetSysClock+0xcc>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40007000 	.word	0x40007000
 80022b4:	07405408 	.word	0x07405408
 80022b8:	40023c00 	.word	0x40023c00

080022bc <initUSART2>:
#include "usart.h"

UART_HandleTypeDef UART_HandleStruct;

void initUSART2(uint32_t baudrate)
{
 80022bc:	b5b0      	push	{r4, r5, r7, lr}
 80022be:	b090      	sub	sp, #64	; 0x40
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	
	//wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
	//Configure pins
	//
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	4b26      	ldr	r3, [pc, #152]	; (8002364 <initUSART2+0xa8>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	4a25      	ldr	r2, [pc, #148]	; (8002364 <initUSART2+0xa8>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6313      	str	r3, [r2, #48]	; 0x30
 80022d4:	4b23      	ldr	r3, [pc, #140]	; (8002364 <initUSART2+0xa8>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022e0:	2304      	movs	r3, #4
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ec:	2302      	movs	r3, #2
 80022ee:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022f0:	2307      	movs	r3, #7
 80022f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f8:	4619      	mov	r1, r3
 80022fa:	481b      	ldr	r0, [pc, #108]	; (8002368 <initUSART2+0xac>)
 80022fc:	f000 fff2 	bl	80032e4 <HAL_GPIO_Init>
	

	UART_InitTypeDef UART_InitStruct;
	__HAL_RCC_USART2_CLK_ENABLE();
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <initUSART2+0xa8>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	4a16      	ldr	r2, [pc, #88]	; (8002364 <initUSART2+0xa8>)
 800230a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230e:	6413      	str	r3, [r2, #64]	; 0x40
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <initUSART2+0xa8>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
	UART_InitStruct.BaudRate = baudrate;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	613b      	str	r3, [r7, #16]
	UART_InitStruct.WordLength = UART_WORDLENGTH_8B;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
	UART_InitStruct.StopBits = UART_STOPBITS_1;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
	UART_InitStruct.Parity = UART_PARITY_NONE;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
	UART_InitStruct.Mode = UART_MODE_TX;
 800232c:	2308      	movs	r3, #8
 800232e:	623b      	str	r3, [r7, #32]
	UART_InitStruct.HwFlowCtl = UART_HWCONTROL_NONE;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
	UART_InitStruct.OverSampling = UART_OVERSAMPLING_8;
 8002334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28

	UART_HandleStruct.Instance = USART2;
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <initUSART2+0xb0>)
 800233c:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <initUSART2+0xb4>)
 800233e:	601a      	str	r2, [r3, #0]
	UART_HandleStruct.Init = UART_InitStruct;
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <initUSART2+0xb0>)
 8002342:	1d1c      	adds	r4, r3, #4
 8002344:	f107 0510 	add.w	r5, r7, #16
 8002348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800234a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800234c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Init(&UART_HandleStruct);
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <initUSART2+0xb0>)
 8002356:	f001 ff69 	bl	800422c <HAL_UART_Init>
	
}
 800235a:	bf00      	nop
 800235c:	3740      	adds	r7, #64	; 0x40
 800235e:	46bd      	mov	sp, r7
 8002360:	bdb0      	pop	{r4, r5, r7, pc}
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800
 8002368:	40020000 	.word	0x40020000
 800236c:	200001a0 	.word	0x200001a0
 8002370:	40004400 	.word	0x40004400

08002374 <putcharUSART2>:

void putcharUSART2(uint8_t data)
{/// print one character to USART2
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&UART_HandleStruct, & data,1,10000);
 800237e:	1df9      	adds	r1, r7, #7
 8002380:	f242 7310 	movw	r3, #10000	; 0x2710
 8002384:	2201      	movs	r2, #1
 8002386:	4803      	ldr	r0, [pc, #12]	; (8002394 <putcharUSART2+0x20>)
 8002388:	f001 ff9d 	bl	80042c6 <HAL_UART_Transmit>
	// while(!(USART2->SR & USART_SR_TC));									

	// USART2->DR = data;	
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200001a0 	.word	0x200001a0

08002398 <printUSART2>:

void printUSART2(char *str, ... )
{ /// print text and up to 10 arguments!
 8002398:	b40f      	push	{r0, r1, r2, r3}
 800239a:	b5b0      	push	{r4, r5, r7, lr}
 800239c:	b094      	sub	sp, #80	; 0x50
 800239e:	af00      	add	r7, sp, #0
    uint8_t rstr[40];													// 33 max -> 32 ASCII for 32 bits and NULL 
    uint16_t k = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint32_t * p_uint32; 
	char * p_char;
	va_list vl;
	
	//va_start(vl, 10);													// always pass the last named parameter to va_start, for compatibility with older compilers
	va_start(vl, str);													// always pass the last named parameter to va_start, for compatibility with older compilers
 80023a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023aa:	603b      	str	r3, [r7, #0]
	while(str[k] != 0x00)
 80023ac:	e1c2      	b.n	8002734 <printUSART2+0x39c>
	{
		if(str[k] == '%')
 80023ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023b4:	4413      	add	r3, r2
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b25      	cmp	r3, #37	; 0x25
 80023ba:	f040 81a4 	bne.w	8002706 <printUSART2+0x36e>
		{
			if(str[k+1] != 0x00)
 80023be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023c2:	3301      	adds	r3, #1
 80023c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023c6:	4413      	add	r3, r2
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 81ad 	beq.w	800272a <printUSART2+0x392>
			{
				switch(str[k+1])
 80023d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023d4:	3301      	adds	r3, #1
 80023d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023d8:	4413      	add	r3, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	3b62      	subs	r3, #98	; 0x62
 80023de:	2b16      	cmp	r3, #22
 80023e0:	f200 8170 	bhi.w	80026c4 <printUSART2+0x32c>
 80023e4:	a201      	add	r2, pc, #4	; (adr r2, 80023ec <printUSART2+0x54>)
 80023e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ea:	bf00      	nop
 80023ec:	08002449 	.word	0x08002449
 80023f0:	08002569 	.word	0x08002569
 80023f4:	080024d9 	.word	0x080024d9
 80023f8:	080026c5 	.word	0x080026c5
 80023fc:	0800259f 	.word	0x0800259f
 8002400:	080026c5 	.word	0x080026c5
 8002404:	080026c5 	.word	0x080026c5
 8002408:	080026c5 	.word	0x080026c5
 800240c:	080026c5 	.word	0x080026c5
 8002410:	080026c5 	.word	0x080026c5
 8002414:	080026c5 	.word	0x080026c5
 8002418:	080026c5 	.word	0x080026c5
 800241c:	080026c5 	.word	0x080026c5
 8002420:	080026c5 	.word	0x080026c5
 8002424:	080026c5 	.word	0x080026c5
 8002428:	080026c5 	.word	0x080026c5
 800242c:	080026c5 	.word	0x080026c5
 8002430:	08002587 	.word	0x08002587
 8002434:	080026c5 	.word	0x080026c5
 8002438:	080026c5 	.word	0x080026c5
 800243c:	080026c5 	.word	0x080026c5
 8002440:	080026c5 	.word	0x080026c5
 8002444:	0800262d 	.word	0x0800262d
				{
					case('b'):
					{// binary
						if(str[k+2] == 'b')
 8002448:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800244c:	3302      	adds	r3, #2
 800244e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002450:	4413      	add	r3, r2
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b62      	cmp	r3, #98	; 0x62
 8002456:	d108      	bne.n	800246a <printUSART2+0xd2>
						{// byte
							utmp32 = va_arg(vl, int);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	1d1a      	adds	r2, r3, #4
 800245c:	603a      	str	r2, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_BYTE);
 8002462:	2301      	movs	r3, #1
 8002464:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002468:	e02e      	b.n	80024c8 <printUSART2+0x130>
						}
						else if(str[k+2] == 'h')
 800246a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800246e:	3302      	adds	r3, #2
 8002470:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b68      	cmp	r3, #104	; 0x68
 8002478:	d108      	bne.n	800248c <printUSART2+0xf4>
						{// half word
							utmp32 = va_arg(vl, int);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	1d1a      	adds	r2, r3, #4
 800247e:	603a      	str	r2, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_HALFWORD);
 8002484:	2302      	movs	r3, #2
 8002486:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800248a:	e01d      	b.n	80024c8 <printUSART2+0x130>
						}
						else if(str[k+2] == 'w')
 800248c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002490:	3302      	adds	r3, #2
 8002492:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002494:	4413      	add	r3, r2
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b77      	cmp	r3, #119	; 0x77
 800249a:	d108      	bne.n	80024ae <printUSART2+0x116>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	1d1a      	adds	r2, r3, #4
 80024a0:	603a      	str	r2, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
 80024a6:	2304      	movs	r3, #4
 80024a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80024ac:	e00c      	b.n	80024c8 <printUSART2+0x130>
						}
						else
						{// default word
							utmp32 = va_arg(vl, uint32_t);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	1d1a      	adds	r2, r3, #4
 80024b2:	603a      	str	r2, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
 80024b8:	2304      	movs	r3, #4
 80024ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 80024be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024c2:	3b01      	subs	r3, #1
 80024c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;	
 80024c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024cc:	3301      	adds	r3, #1
 80024ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 80024d6:	e0fd      	b.n	80026d4 <printUSART2+0x33c>
					}
					case('d'):
					{// decimal
						if(str[k+2] == 'b')
 80024d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024dc:	3302      	adds	r3, #2
 80024de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024e0:	4413      	add	r3, r2
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b62      	cmp	r3, #98	; 0x62
 80024e6:	d108      	bne.n	80024fa <printUSART2+0x162>
						{// byte
							utmp32 = va_arg(vl, int);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	1d1a      	adds	r2, r3, #4
 80024ec:	603a      	str	r2, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_BYTE);
 80024f2:	2308      	movs	r3, #8
 80024f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80024f8:	e02e      	b.n	8002558 <printUSART2+0x1c0>
						}
						else if(str[k+2] == 'h')
 80024fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024fe:	3302      	adds	r3, #2
 8002500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002502:	4413      	add	r3, r2
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b68      	cmp	r3, #104	; 0x68
 8002508:	d108      	bne.n	800251c <printUSART2+0x184>
						{// half word
							utmp32 = va_arg(vl, int);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	1d1a      	adds	r2, r3, #4
 800250e:	603a      	str	r2, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_HALFWORD);
 8002514:	2310      	movs	r3, #16
 8002516:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800251a:	e01d      	b.n	8002558 <printUSART2+0x1c0>
						}
						else if(str[k+2] == 'w')
 800251c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002520:	3302      	adds	r3, #2
 8002522:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002524:	4413      	add	r3, r2
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b77      	cmp	r3, #119	; 0x77
 800252a:	d108      	bne.n	800253e <printUSART2+0x1a6>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	1d1a      	adds	r2, r3, #4
 8002530:	603a      	str	r2, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_WORD);
 8002536:	2320      	movs	r3, #32
 8002538:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800253c:	e00c      	b.n	8002558 <printUSART2+0x1c0>
						}
						else
						{// default word
							utmp32 = va_arg(vl, uint32_t);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	1d1a      	adds	r2, r3, #4
 8002542:	603a      	str	r2, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_WORD);
 8002548:	2320      	movs	r3, #32
 800254a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 800254e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002552:	3b01      	subs	r3, #1
 8002554:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;	
 8002558:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800255c:	3301      	adds	r3, #1
 800255e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 8002566:	e0b5      	b.n	80026d4 <printUSART2+0x33c>
					}
					case('c'):
					{// character
						char tchar = va_arg(vl, int);	
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	1d1a      	adds	r2, r3, #4
 800256c:	603a      	str	r2, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
						putcharUSART2(tchar);
 8002574:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fefb 	bl	8002374 <putcharUSART2>
						arg_type = (PRINT_ARG_TYPE_CHARACTER);
 800257e:	2340      	movs	r3, #64	; 0x40
 8002580:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 8002584:	e0a6      	b.n	80026d4 <printUSART2+0x33c>
					}
					case('s'):
					{// string 
						p_char = va_arg(vl, char *);	
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	1d1a      	adds	r2, r3, #4
 800258a:	603a      	str	r2, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	647b      	str	r3, [r7, #68]	; 0x44
						sprintUSART2((uint8_t *)p_char);
 8002590:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002592:	f000 f8df 	bl	8002754 <sprintUSART2>
						arg_type = (PRINT_ARG_TYPE_STRING);
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 800259c:	e09a      	b.n	80026d4 <printUSART2+0x33c>
					}
					case('f'):
					{// float
						uint64_t utmp64 = va_arg(vl, uint64_t);			// convert double to float representation IEEE 754
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	3307      	adds	r3, #7
 80025a2:	f023 0307 	bic.w	r3, r3, #7
 80025a6:	f103 0208 	add.w	r2, r3, #8
 80025aa:	603a      	str	r2, [r7, #0]
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
						uint32_t tmp1 = utmp64&0x00000000FFFFFFFF;
 80025b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
						tmp1 = tmp1>>29;
 80025b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ba:	0f5b      	lsrs	r3, r3, #29
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
						utmp32 = utmp64>>32;
 80025be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	000a      	movs	r2, r1
 80025cc:	2300      	movs	r3, #0
 80025ce:	4613      	mov	r3, r2
 80025d0:	607b      	str	r3, [r7, #4]
						utmp32 &= 0x07FFFFFF;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80025d8:	607b      	str	r3, [r7, #4]
						utmp32 = utmp32<<3;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	607b      	str	r3, [r7, #4]
						utmp32 |= tmp1;
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e4:	4313      	orrs	r3, r2
 80025e6:	607b      	str	r3, [r7, #4]
						if(utmp64 & 0x8000000000000000)
 80025e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025ec:	2a00      	cmp	r2, #0
 80025ee:	f173 0300 	sbcs.w	r3, r3, #0
 80025f2:	da03      	bge.n	80025fc <printUSART2+0x264>
							utmp32 |= 0x80000000;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025fa:	607b      	str	r3, [r7, #4]
							
						if(utmp64 & 0x4000000000000000)
 80025fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002600:	f04f 0000 	mov.w	r0, #0
 8002604:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002608:	ea02 0400 	and.w	r4, r2, r0
 800260c:	ea03 0501 	and.w	r5, r3, r1
 8002610:	ea54 0305 	orrs.w	r3, r4, r5
 8002614:	d003      	beq.n	800261e <printUSART2+0x286>
							utmp32 |= 0x40000000;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800261c:	607b      	str	r3, [r7, #4]
							
						p_uint32 = &utmp32;
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	64bb      	str	r3, [r7, #72]	; 0x48
						
						arg_type = (PRINT_ARG_TYPE_FLOAT);
 8002622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002626:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						//arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
						//arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
						break;
 800262a:	e053      	b.n	80026d4 <printUSART2+0x33c>
					}
					case('x'):
					{// hexadecimal 
						if(str[k+2] == 'b')
 800262c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002630:	3302      	adds	r3, #2
 8002632:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002634:	4413      	add	r3, r2
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b62      	cmp	r3, #98	; 0x62
 800263a:	d109      	bne.n	8002650 <printUSART2+0x2b8>
						{// byte
							utmp32 = (uint32_t)va_arg(vl, int);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	1d1a      	adds	r2, r3, #4
 8002640:	603a      	str	r2, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_BYTE);
 8002646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800264a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800264e:	e031      	b.n	80026b4 <printUSART2+0x31c>
						}
						else if(str[k+2] == 'h')
 8002650:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002654:	3302      	adds	r3, #2
 8002656:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002658:	4413      	add	r3, r2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b68      	cmp	r3, #104	; 0x68
 800265e:	d109      	bne.n	8002674 <printUSART2+0x2dc>
						{// half word
							utmp32 = (uint32_t)va_arg(vl, int);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	1d1a      	adds	r2, r3, #4
 8002664:	603a      	str	r2, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_HALFWORD);
 800266a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800266e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002672:	e01f      	b.n	80026b4 <printUSART2+0x31c>
						}
						else if(str[k+2] == 'w')
 8002674:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002678:	3302      	adds	r3, #2
 800267a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800267c:	4413      	add	r3, r2
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b77      	cmp	r3, #119	; 0x77
 8002682:	d109      	bne.n	8002698 <printUSART2+0x300>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	1d1a      	adds	r2, r3, #4
 8002688:	603a      	str	r2, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
 800268e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002692:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002696:	e00d      	b.n	80026b4 <printUSART2+0x31c>
						}
						else
						{
							utmp32 = va_arg(vl, uint32_t);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	1d1a      	adds	r2, r3, #4
 800269c:	603a      	str	r2, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
 80026a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026a6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 80026aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026ae:	3b01      	subs	r3, #1
 80026b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;
 80026b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026b8:	3301      	adds	r3, #1
 80026ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 80026c2:	e007      	b.n	80026d4 <printUSART2+0x33c>
					}
					default:
					{
						utmp32 = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	607b      	str	r3, [r7, #4]
						p_uint32 = &utmp32;
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	64bb      	str	r3, [r7, #72]	; 0x48
						arg_type = (PRINT_ARG_TYPE_UNKNOWN);
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 80026d2:	bf00      	nop
					}
				}
					
				if(arg_type&(PRINT_ARG_TYPE_MASK_CHAR_STRING))	
 80026d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00c      	beq.n	80026fa <printUSART2+0x362>
				{
					getStr4NumMISC(arg_type, p_uint32, rstr);
 80026e0:	f107 0208 	add.w	r2, r7, #8
 80026e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff f924 	bl	8001938 <getStr4NumMISC>
					sprintUSART2(rstr);	
 80026f0:	f107 0308 	add.w	r3, r7, #8
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f82d 	bl	8002754 <sprintUSART2>
				}
				k++;
 80026fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026fe:	3301      	adds	r3, #1
 8002700:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002704:	e011      	b.n	800272a <printUSART2+0x392>
			}
		}
		else
		{// not a '%' char -> print the char
			putcharUSART2(str[k]);
 8002706:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800270c:	4413      	add	r3, r2
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fe2f 	bl	8002374 <putcharUSART2>
			if (str[k] == '\n')
 8002716:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800271a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800271c:	4413      	add	r3, r2
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b0a      	cmp	r3, #10
 8002722:	d102      	bne.n	800272a <printUSART2+0x392>
				putcharUSART2('\r');
 8002724:	200d      	movs	r0, #13
 8002726:	f7ff fe25 	bl	8002374 <putcharUSART2>
		}
		k++;
 800272a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800272e:	3301      	adds	r3, #1
 8002730:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while(str[k] != 0x00)
 8002734:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002738:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800273a:	4413      	add	r3, r2
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f47f ae35 	bne.w	80023ae <printUSART2+0x16>
	}
	
	va_end(vl);
	return;
 8002744:	bf00      	nop
}
 8002746:	3750      	adds	r7, #80	; 0x50
 8002748:	46bd      	mov	sp, r7
 800274a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800274e:	b004      	add	sp, #16
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop

08002754 <sprintUSART2>:

void sprintUSART2(uint8_t * str)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	uint16_t k = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	81fb      	strh	r3, [r7, #14]
	
	while (str[k] != '\0')
 8002760:	e016      	b.n	8002790 <sprintUSART2+0x3c>
    {
        putcharUSART2(str[k]);
 8002762:	89fb      	ldrh	r3, [r7, #14]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fe02 	bl	8002374 <putcharUSART2>
        if (str[k] == '\n')
 8002770:	89fb      	ldrh	r3, [r7, #14]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b0a      	cmp	r3, #10
 800277a:	d102      	bne.n	8002782 <sprintUSART2+0x2e>
            putcharUSART2('\r');
 800277c:	200d      	movs	r0, #13
 800277e:	f7ff fdf9 	bl	8002374 <putcharUSART2>
        k++;
 8002782:	89fb      	ldrh	r3, [r7, #14]
 8002784:	3301      	adds	r3, #1
 8002786:	81fb      	strh	r3, [r7, #14]

        if (k == MAX_PRINT_STRING_SIZE)
 8002788:	89fb      	ldrh	r3, [r7, #14]
 800278a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278e:	d006      	beq.n	800279e <sprintUSART2+0x4a>
	while (str[k] != '\0')
 8002790:	89fb      	ldrh	r3, [r7, #14]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e2      	bne.n	8002762 <sprintUSART2+0xe>
            break;
    }
}
 800279c:	e000      	b.n	80027a0 <sprintUSART2+0x4c>
            break;
 800279e:	bf00      	nop
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <Reset_Handler>:
 80027a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e0 <LoopFillZerobss+0x12>
 80027ac:	480d      	ldr	r0, [pc, #52]	; (80027e4 <LoopFillZerobss+0x16>)
 80027ae:	490e      	ldr	r1, [pc, #56]	; (80027e8 <LoopFillZerobss+0x1a>)
 80027b0:	4a0e      	ldr	r2, [pc, #56]	; (80027ec <LoopFillZerobss+0x1e>)
 80027b2:	2300      	movs	r3, #0
 80027b4:	e002      	b.n	80027bc <LoopCopyDataInit>

080027b6 <CopyDataInit>:
 80027b6:	58d4      	ldr	r4, [r2, r3]
 80027b8:	50c4      	str	r4, [r0, r3]
 80027ba:	3304      	adds	r3, #4

080027bc <LoopCopyDataInit>:
 80027bc:	18c4      	adds	r4, r0, r3
 80027be:	428c      	cmp	r4, r1
 80027c0:	d3f9      	bcc.n	80027b6 <CopyDataInit>
 80027c2:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <LoopFillZerobss+0x22>)
 80027c4:	4c0b      	ldr	r4, [pc, #44]	; (80027f4 <LoopFillZerobss+0x26>)
 80027c6:	2300      	movs	r3, #0
 80027c8:	e001      	b.n	80027ce <LoopFillZerobss>

080027ca <FillZerobss>:
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	3204      	adds	r2, #4

080027ce <LoopFillZerobss>:
 80027ce:	42a2      	cmp	r2, r4
 80027d0:	d3fb      	bcc.n	80027ca <FillZerobss>
 80027d2:	f7ff fcc3 	bl	800215c <SystemInit>
 80027d6:	f002 f81b 	bl	8004810 <__libc_init_array>
 80027da:	f7fe fb2d 	bl	8000e38 <main>
 80027de:	4770      	bx	lr
 80027e0:	20020000 	.word	0x20020000
 80027e4:	20000000 	.word	0x20000000
 80027e8:	20000098 	.word	0x20000098
 80027ec:	08005e90 	.word	0x08005e90
 80027f0:	20000098 	.word	0x20000098
 80027f4:	200001e8 	.word	0x200001e8

080027f8 <ADC_IRQHandler>:
 80027f8:	e7fe      	b.n	80027f8 <ADC_IRQHandler>
	...

080027fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <HAL_Init+0x40>)
 8002806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_Init+0x40>)
 8002812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_Init+0x40>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_Init+0x40>)
 800281e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002824:	2003      	movs	r0, #3
 8002826:	f000 fd1b 	bl	8003260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f808 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002830:	f7ff fb4e 	bl	8001ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023c00 	.word	0x40023c00

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_InitTick+0x54>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_InitTick+0x58>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002856:	fbb3 f3f1 	udiv	r3, r3, r1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fd33 	bl	80032ca <HAL_SYSTICK_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d80a      	bhi.n	800288a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800287c:	f000 fcfb 	bl	8003276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <HAL_InitTick+0x5c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000024 	.word	0x20000024
 8002898:	2000002c 	.word	0x2000002c
 800289c:	20000028 	.word	0x20000028

080028a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x20>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_IncTick+0x24>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_IncTick+0x24>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	2000002c 	.word	0x2000002c
 80028c4:	200001e4 	.word	0x200001e4

080028c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_GetTick+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	200001e4 	.word	0x200001e4

080028e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff ffee 	bl	80028c8 <HAL_GetTick>
 80028ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f8:	d005      	beq.n	8002906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_Delay+0x44>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002906:	bf00      	nop
 8002908:	f7ff ffde 	bl	80028c8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	429a      	cmp	r2, r3
 8002916:	d8f7      	bhi.n	8002908 <HAL_Delay+0x28>
  {
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000002c 	.word	0x2000002c

08002928 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e033      	b.n	80029a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff faea 	bl	8001f20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d118      	bne.n	8002998 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800296e:	f023 0302 	bic.w	r3, r3, #2
 8002972:	f043 0202 	orr.w	r2, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 faa4 	bl	8002ec8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f023 0303 	bic.w	r3, r3, #3
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
 8002996:	e001      	b.n	800299c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_Start+0x1a>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e0b2      	b.n	8002b30 <HAL_ADC_Start+0x180>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d018      	beq.n	8002a12 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029f0:	4b52      	ldr	r3, [pc, #328]	; (8002b3c <HAL_ADC_Start+0x18c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_ADC_Start+0x190>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0c9a      	lsrs	r2, r3, #18
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a04:	e002      	b.n	8002a0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f9      	bne.n	8002a06 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d17a      	bne.n	8002b16 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5e:	d106      	bne.n	8002a6e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	f023 0206 	bic.w	r2, r3, #6
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	645a      	str	r2, [r3, #68]	; 0x44
 8002a6c:	e002      	b.n	8002a74 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a7c:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_ADC_Start+0x194>)
 8002a7e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a88:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d12a      	bne.n	8002aec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <HAL_ADC_Start+0x198>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d015      	beq.n	8002acc <HAL_ADC_Start+0x11c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a29      	ldr	r2, [pc, #164]	; (8002b4c <HAL_ADC_Start+0x19c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d105      	bne.n	8002ab6 <HAL_ADC_Start+0x106>
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <HAL_ADC_Start+0x194>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a25      	ldr	r2, [pc, #148]	; (8002b50 <HAL_ADC_Start+0x1a0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d136      	bne.n	8002b2e <HAL_ADC_Start+0x17e>
 8002ac0:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_ADC_Start+0x194>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d130      	bne.n	8002b2e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d129      	bne.n	8002b2e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	e020      	b.n	8002b2e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <HAL_ADC_Start+0x198>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d11b      	bne.n	8002b2e <HAL_ADC_Start+0x17e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d114      	bne.n	8002b2e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	e00b      	b.n	8002b2e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f043 0210 	orr.w	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	20000024 	.word	0x20000024
 8002b40:	431bde83 	.word	0x431bde83
 8002b44:	40012300 	.word	0x40012300
 8002b48:	40012000 	.word	0x40012000
 8002b4c:	40012100 	.word	0x40012100
 8002b50:	40012200 	.word	0x40012200

08002b54 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b70:	d113      	bne.n	8002b9a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b80:	d10b      	bne.n	8002b9a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e063      	b.n	8002c62 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b9a:	f7ff fe95 	bl	80028c8 <HAL_GetTick>
 8002b9e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ba0:	e021      	b.n	8002be6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba8:	d01d      	beq.n	8002be6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <HAL_ADC_PollForConversion+0x6c>
 8002bb0:	f7ff fe8a 	bl	80028c8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d212      	bcs.n	8002be6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d00b      	beq.n	8002be6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f043 0204 	orr.w	r2, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e03d      	b.n	8002c62 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d1d6      	bne.n	8002ba2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0212 	mvn.w	r2, #18
 8002bfc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d123      	bne.n	8002c60 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d11f      	bne.n	8002c60 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d006      	beq.n	8002c3c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d111      	bne.n	8002c60 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f043 0201 	orr.w	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1c>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e105      	b.n	8002eac <HAL_ADC_ConfigChannel+0x228>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b09      	cmp	r3, #9
 8002cae:	d925      	bls.n	8002cfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68d9      	ldr	r1, [r3, #12]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b1e      	subs	r3, #30
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68d9      	ldr	r1, [r3, #12]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	4603      	mov	r3, r0
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4403      	add	r3, r0
 8002cee:	3b1e      	subs	r3, #30
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	e022      	b.n	8002d42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6919      	ldr	r1, [r3, #16]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	2207      	movs	r2, #7
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6919      	ldr	r1, [r3, #16]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4618      	mov	r0, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4403      	add	r3, r0
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d824      	bhi.n	8002d94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	3b05      	subs	r3, #5
 8002d5c:	221f      	movs	r2, #31
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43da      	mvns	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	400a      	ands	r2, r1
 8002d6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	4618      	mov	r0, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	3b05      	subs	r3, #5
 8002d86:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34
 8002d92:	e04c      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d824      	bhi.n	8002de6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	3b23      	subs	r3, #35	; 0x23
 8002dae:	221f      	movs	r2, #31
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43da      	mvns	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	400a      	ands	r2, r1
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b23      	subs	r3, #35	; 0x23
 8002dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
 8002de4:	e023      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	3b41      	subs	r3, #65	; 0x41
 8002df8:	221f      	movs	r2, #31
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	400a      	ands	r2, r1
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4618      	mov	r0, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b41      	subs	r3, #65	; 0x41
 8002e22:	fa00 f203 	lsl.w	r2, r0, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e2e:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <HAL_ADC_ConfigChannel+0x234>)
 8002e30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a21      	ldr	r2, [pc, #132]	; (8002ebc <HAL_ADC_ConfigChannel+0x238>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d109      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x1cc>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b12      	cmp	r3, #18
 8002e42:	d105      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a19      	ldr	r2, [pc, #100]	; (8002ebc <HAL_ADC_ConfigChannel+0x238>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d123      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x21e>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d003      	beq.n	8002e6a <HAL_ADC_ConfigChannel+0x1e6>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b11      	cmp	r3, #17
 8002e68:	d11b      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d111      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_ADC_ConfigChannel+0x23c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <HAL_ADC_ConfigChannel+0x240>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	0c9a      	lsrs	r2, r3, #18
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e94:	e002      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f9      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	40012300 	.word	0x40012300
 8002ebc:	40012000 	.word	0x40012000
 8002ec0:	20000024 	.word	0x20000024
 8002ec4:	431bde83 	.word	0x431bde83

08002ec8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ed0:	4b79      	ldr	r3, [pc, #484]	; (80030b8 <ADC_Init+0x1f0>)
 8002ed2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002efc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	021a      	lsls	r2, r3, #8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6899      	ldr	r1, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	4a58      	ldr	r2, [pc, #352]	; (80030bc <ADC_Init+0x1f4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6899      	ldr	r1, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6899      	ldr	r1, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	e00f      	b.n	8002fc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0202 	bic.w	r2, r2, #2
 8002fd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6899      	ldr	r1, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7e1b      	ldrb	r3, [r3, #24]
 8002fe0:	005a      	lsls	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01b      	beq.n	800302c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003002:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003012:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	3b01      	subs	r3, #1
 8003020:	035a      	lsls	r2, r3, #13
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	e007      	b.n	800303c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	3b01      	subs	r3, #1
 8003058:	051a      	lsls	r2, r3, #20
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800307e:	025a      	lsls	r2, r3, #9
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6899      	ldr	r1, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	029a      	lsls	r2, r3, #10
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	609a      	str	r2, [r3, #8]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40012300 	.word	0x40012300
 80030bc:	0f000001 	.word	0x0f000001

080030c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030dc:	4013      	ands	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f2:	4a04      	ldr	r2, [pc, #16]	; (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	60d3      	str	r3, [r2, #12]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <__NVIC_GetPriorityGrouping+0x18>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f003 0307 	and.w	r3, r3, #7
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	2b00      	cmp	r3, #0
 8003134:	db0b      	blt.n	800314e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	f003 021f 	and.w	r2, r3, #31
 800313c:	4907      	ldr	r1, [pc, #28]	; (800315c <__NVIC_EnableIRQ+0x38>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	2001      	movs	r0, #1
 8003146:	fa00 f202 	lsl.w	r2, r0, r2
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000e100 	.word	0xe000e100

08003160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	6039      	str	r1, [r7, #0]
 800316a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003170:	2b00      	cmp	r3, #0
 8003172:	db0a      	blt.n	800318a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	490c      	ldr	r1, [pc, #48]	; (80031ac <__NVIC_SetPriority+0x4c>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	0112      	lsls	r2, r2, #4
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	440b      	add	r3, r1
 8003184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003188:	e00a      	b.n	80031a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	b2da      	uxtb	r2, r3
 800318e:	4908      	ldr	r1, [pc, #32]	; (80031b0 <__NVIC_SetPriority+0x50>)
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	3b04      	subs	r3, #4
 8003198:	0112      	lsls	r2, r2, #4
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	440b      	add	r3, r1
 800319e:	761a      	strb	r2, [r3, #24]
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000e100 	.word	0xe000e100
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	; 0x24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f1c3 0307 	rsb	r3, r3, #7
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	bf28      	it	cs
 80031d2:	2304      	movcs	r3, #4
 80031d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3304      	adds	r3, #4
 80031da:	2b06      	cmp	r3, #6
 80031dc:	d902      	bls.n	80031e4 <NVIC_EncodePriority+0x30>
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3b03      	subs	r3, #3
 80031e2:	e000      	b.n	80031e6 <NVIC_EncodePriority+0x32>
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43da      	mvns	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	401a      	ands	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	fa01 f303 	lsl.w	r3, r1, r3
 8003206:	43d9      	mvns	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320c:	4313      	orrs	r3, r2
         );
}
 800320e:	4618      	mov	r0, r3
 8003210:	3724      	adds	r7, #36	; 0x24
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
	...

0800321c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3b01      	subs	r3, #1
 8003228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800322c:	d301      	bcc.n	8003232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800322e:	2301      	movs	r3, #1
 8003230:	e00f      	b.n	8003252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <SysTick_Config+0x40>)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800323a:	210f      	movs	r1, #15
 800323c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003240:	f7ff ff8e 	bl	8003160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <SysTick_Config+0x40>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324a:	4b04      	ldr	r3, [pc, #16]	; (800325c <SysTick_Config+0x40>)
 800324c:	2207      	movs	r2, #7
 800324e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	e000e010 	.word	0xe000e010

08003260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff29 	bl	80030c0 <__NVIC_SetPriorityGrouping>
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003276:	b580      	push	{r7, lr}
 8003278:	b086      	sub	sp, #24
 800327a:	af00      	add	r7, sp, #0
 800327c:	4603      	mov	r3, r0
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003288:	f7ff ff3e 	bl	8003108 <__NVIC_GetPriorityGrouping>
 800328c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	6978      	ldr	r0, [r7, #20]
 8003294:	f7ff ff8e 	bl	80031b4 <NVIC_EncodePriority>
 8003298:	4602      	mov	r2, r0
 800329a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff5d 	bl	8003160 <__NVIC_SetPriority>
}
 80032a6:	bf00      	nop
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff31 	bl	8003124 <__NVIC_EnableIRQ>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ffa2 	bl	800321c <SysTick_Config>
 80032d8:	4603      	mov	r3, r0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	; 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	e16b      	b.n	80035d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003300:	2201      	movs	r2, #1
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	429a      	cmp	r2, r3
 800331a:	f040 815a 	bne.w	80035d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d005      	beq.n	8003336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003332:	2b02      	cmp	r3, #2
 8003334:	d130      	bne.n	8003398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	2203      	movs	r2, #3
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800336c:	2201      	movs	r2, #1
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 0201 	and.w	r2, r3, #1
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d017      	beq.n	80033d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d123      	bne.n	8003428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	08da      	lsrs	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3208      	adds	r2, #8
 80033e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	220f      	movs	r2, #15
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	08da      	lsrs	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3208      	adds	r2, #8
 8003422:	69b9      	ldr	r1, [r7, #24]
 8003424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2203      	movs	r2, #3
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0203 	and.w	r2, r3, #3
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80b4 	beq.w	80035d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	4b60      	ldr	r3, [pc, #384]	; (80035f0 <HAL_GPIO_Init+0x30c>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	4a5f      	ldr	r2, [pc, #380]	; (80035f0 <HAL_GPIO_Init+0x30c>)
 8003474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003478:	6453      	str	r3, [r2, #68]	; 0x44
 800347a:	4b5d      	ldr	r3, [pc, #372]	; (80035f0 <HAL_GPIO_Init+0x30c>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003486:	4a5b      	ldr	r2, [pc, #364]	; (80035f4 <HAL_GPIO_Init+0x310>)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	3302      	adds	r3, #2
 800348e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a52      	ldr	r2, [pc, #328]	; (80035f8 <HAL_GPIO_Init+0x314>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d02b      	beq.n	800350a <HAL_GPIO_Init+0x226>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a51      	ldr	r2, [pc, #324]	; (80035fc <HAL_GPIO_Init+0x318>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d025      	beq.n	8003506 <HAL_GPIO_Init+0x222>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a50      	ldr	r2, [pc, #320]	; (8003600 <HAL_GPIO_Init+0x31c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01f      	beq.n	8003502 <HAL_GPIO_Init+0x21e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4f      	ldr	r2, [pc, #316]	; (8003604 <HAL_GPIO_Init+0x320>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d019      	beq.n	80034fe <HAL_GPIO_Init+0x21a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4e      	ldr	r2, [pc, #312]	; (8003608 <HAL_GPIO_Init+0x324>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_GPIO_Init+0x216>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4d      	ldr	r2, [pc, #308]	; (800360c <HAL_GPIO_Init+0x328>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00d      	beq.n	80034f6 <HAL_GPIO_Init+0x212>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4c      	ldr	r2, [pc, #304]	; (8003610 <HAL_GPIO_Init+0x32c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <HAL_GPIO_Init+0x20e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4b      	ldr	r2, [pc, #300]	; (8003614 <HAL_GPIO_Init+0x330>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <HAL_GPIO_Init+0x20a>
 80034ea:	2307      	movs	r3, #7
 80034ec:	e00e      	b.n	800350c <HAL_GPIO_Init+0x228>
 80034ee:	2308      	movs	r3, #8
 80034f0:	e00c      	b.n	800350c <HAL_GPIO_Init+0x228>
 80034f2:	2306      	movs	r3, #6
 80034f4:	e00a      	b.n	800350c <HAL_GPIO_Init+0x228>
 80034f6:	2305      	movs	r3, #5
 80034f8:	e008      	b.n	800350c <HAL_GPIO_Init+0x228>
 80034fa:	2304      	movs	r3, #4
 80034fc:	e006      	b.n	800350c <HAL_GPIO_Init+0x228>
 80034fe:	2303      	movs	r3, #3
 8003500:	e004      	b.n	800350c <HAL_GPIO_Init+0x228>
 8003502:	2302      	movs	r3, #2
 8003504:	e002      	b.n	800350c <HAL_GPIO_Init+0x228>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_GPIO_Init+0x228>
 800350a:	2300      	movs	r3, #0
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	f002 0203 	and.w	r2, r2, #3
 8003512:	0092      	lsls	r2, r2, #2
 8003514:	4093      	lsls	r3, r2
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800351c:	4935      	ldr	r1, [pc, #212]	; (80035f4 <HAL_GPIO_Init+0x310>)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	089b      	lsrs	r3, r3, #2
 8003522:	3302      	adds	r3, #2
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <HAL_GPIO_Init+0x334>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800354e:	4a32      	ldr	r2, [pc, #200]	; (8003618 <HAL_GPIO_Init+0x334>)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003554:	4b30      	ldr	r3, [pc, #192]	; (8003618 <HAL_GPIO_Init+0x334>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003578:	4a27      	ldr	r2, [pc, #156]	; (8003618 <HAL_GPIO_Init+0x334>)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800357e:	4b26      	ldr	r3, [pc, #152]	; (8003618 <HAL_GPIO_Init+0x334>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035a2:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <HAL_GPIO_Init+0x334>)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035a8:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_GPIO_Init+0x334>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035cc:	4a12      	ldr	r2, [pc, #72]	; (8003618 <HAL_GPIO_Init+0x334>)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3301      	adds	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b0f      	cmp	r3, #15
 80035dc:	f67f ae90 	bls.w	8003300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40013800 	.word	0x40013800
 80035f8:	40020000 	.word	0x40020000
 80035fc:	40020400 	.word	0x40020400
 8003600:	40020800 	.word	0x40020800
 8003604:	40020c00 	.word	0x40020c00
 8003608:	40021000 	.word	0x40021000
 800360c:	40021400 	.word	0x40021400
 8003610:	40021800 	.word	0x40021800
 8003614:	40021c00 	.word	0x40021c00
 8003618:	40013c00 	.word	0x40013c00

0800361c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	e001      	b.n	800363e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800363e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
 8003658:	4613      	mov	r3, r2
 800365a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800365c:	787b      	ldrb	r3, [r7, #1]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003668:	e003      	b.n	8003672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800366a:	887b      	ldrh	r3, [r7, #2]
 800366c:	041a      	lsls	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	619a      	str	r2, [r3, #24]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d006      	beq.n	80036a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003696:	4a05      	ldr	r2, [pc, #20]	; (80036ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f806 	bl	80036b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40013c00 	.word	0x40013c00

080036b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036cc:	4b03      	ldr	r3, [pc, #12]	; (80036dc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000024 	.word	0x20000024

080036e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036e4:	f7ff fff0 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	0a9b      	lsrs	r3, r3, #10
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4903      	ldr	r1, [pc, #12]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f6:	5ccb      	ldrb	r3, [r1, r3]
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	08005e30 	.word	0x08005e30

08003708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800370c:	f7ff ffdc 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	0b5b      	lsrs	r3, r3, #13
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4903      	ldr	r1, [pc, #12]	; (800372c <HAL_RCC_GetPCLK2Freq+0x24>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40023800 	.word	0x40023800
 800372c:	08005e30 	.word	0x08005e30

08003730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e041      	b.n	80037c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe fc26 	bl	8001fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3304      	adds	r3, #4
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f000 fa72 	bl	8003c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d001      	beq.n	80037e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e046      	b.n	8003876 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a23      	ldr	r2, [pc, #140]	; (8003884 <HAL_TIM_Base_Start+0xb4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d022      	beq.n	8003840 <HAL_TIM_Base_Start+0x70>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003802:	d01d      	beq.n	8003840 <HAL_TIM_Base_Start+0x70>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1f      	ldr	r2, [pc, #124]	; (8003888 <HAL_TIM_Base_Start+0xb8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d018      	beq.n	8003840 <HAL_TIM_Base_Start+0x70>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1e      	ldr	r2, [pc, #120]	; (800388c <HAL_TIM_Base_Start+0xbc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_TIM_Base_Start+0x70>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <HAL_TIM_Base_Start+0xc0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_TIM_Base_Start+0x70>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1b      	ldr	r2, [pc, #108]	; (8003894 <HAL_TIM_Base_Start+0xc4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_TIM_Base_Start+0x70>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a19      	ldr	r2, [pc, #100]	; (8003898 <HAL_TIM_Base_Start+0xc8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_TIM_Base_Start+0x70>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a18      	ldr	r2, [pc, #96]	; (800389c <HAL_TIM_Base_Start+0xcc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d111      	bne.n	8003864 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b06      	cmp	r3, #6
 8003850:	d010      	beq.n	8003874 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003862:	e007      	b.n	8003874 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40010000 	.word	0x40010000
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00
 8003894:	40010400 	.word	0x40010400
 8003898:	40014000 	.word	0x40014000
 800389c:	40001800 	.word	0x40001800

080038a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e041      	b.n	8003936 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f839 	bl	800393e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f000 f9ba 	bl	8003c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800396a:	2302      	movs	r3, #2
 800396c:	e0ac      	b.n	8003ac8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b0c      	cmp	r3, #12
 800397a:	f200 809f 	bhi.w	8003abc <HAL_TIM_PWM_ConfigChannel+0x168>
 800397e:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003984:	080039b9 	.word	0x080039b9
 8003988:	08003abd 	.word	0x08003abd
 800398c:	08003abd 	.word	0x08003abd
 8003990:	08003abd 	.word	0x08003abd
 8003994:	080039f9 	.word	0x080039f9
 8003998:	08003abd 	.word	0x08003abd
 800399c:	08003abd 	.word	0x08003abd
 80039a0:	08003abd 	.word	0x08003abd
 80039a4:	08003a3b 	.word	0x08003a3b
 80039a8:	08003abd 	.word	0x08003abd
 80039ac:	08003abd 	.word	0x08003abd
 80039b0:	08003abd 	.word	0x08003abd
 80039b4:	08003a7b 	.word	0x08003a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f9ea 	bl	8003d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0208 	orr.w	r2, r2, #8
 80039d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0204 	bic.w	r2, r2, #4
 80039e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6999      	ldr	r1, [r3, #24]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	619a      	str	r2, [r3, #24]
      break;
 80039f6:	e062      	b.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fa3a 	bl	8003e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6999      	ldr	r1, [r3, #24]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	021a      	lsls	r2, r3, #8
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	619a      	str	r2, [r3, #24]
      break;
 8003a38:	e041      	b.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fa8f 	bl	8003f64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0208 	orr.w	r2, r2, #8
 8003a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0204 	bic.w	r2, r2, #4
 8003a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69d9      	ldr	r1, [r3, #28]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	61da      	str	r2, [r3, #28]
      break;
 8003a78:	e021      	b.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fae3 	bl	800404c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69d9      	ldr	r1, [r3, #28]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	021a      	lsls	r2, r3, #8
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	61da      	str	r2, [r3, #28]
      break;
 8003aba:	e000      	b.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003abc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIM_ConfigClockSource+0x18>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e0b3      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x180>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b20:	d03e      	beq.n	8003ba0 <HAL_TIM_ConfigClockSource+0xd0>
 8003b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b26:	f200 8087 	bhi.w	8003c38 <HAL_TIM_ConfigClockSource+0x168>
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2e:	f000 8085 	beq.w	8003c3c <HAL_TIM_ConfigClockSource+0x16c>
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b36:	d87f      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x168>
 8003b38:	2b70      	cmp	r3, #112	; 0x70
 8003b3a:	d01a      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0xa2>
 8003b3c:	2b70      	cmp	r3, #112	; 0x70
 8003b3e:	d87b      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x168>
 8003b40:	2b60      	cmp	r3, #96	; 0x60
 8003b42:	d050      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x116>
 8003b44:	2b60      	cmp	r3, #96	; 0x60
 8003b46:	d877      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x168>
 8003b48:	2b50      	cmp	r3, #80	; 0x50
 8003b4a:	d03c      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0xf6>
 8003b4c:	2b50      	cmp	r3, #80	; 0x50
 8003b4e:	d873      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x168>
 8003b50:	2b40      	cmp	r3, #64	; 0x40
 8003b52:	d058      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x136>
 8003b54:	2b40      	cmp	r3, #64	; 0x40
 8003b56:	d86f      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x168>
 8003b58:	2b30      	cmp	r3, #48	; 0x30
 8003b5a:	d064      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x156>
 8003b5c:	2b30      	cmp	r3, #48	; 0x30
 8003b5e:	d86b      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x168>
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d060      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x156>
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d867      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x168>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d05c      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x156>
 8003b6c:	2b10      	cmp	r3, #16
 8003b6e:	d05a      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b70:	e062      	b.n	8003c38 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6899      	ldr	r1, [r3, #8]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f000 fb33 	bl	80041ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	609a      	str	r2, [r3, #8]
      break;
 8003b9e:	e04e      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6899      	ldr	r1, [r3, #8]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f000 fb1c 	bl	80041ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc2:	609a      	str	r2, [r3, #8]
      break;
 8003bc4:	e03b      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f000 fa90 	bl	80040f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2150      	movs	r1, #80	; 0x50
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fae9 	bl	80041b6 <TIM_ITRx_SetConfig>
      break;
 8003be4:	e02b      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f000 faaf 	bl	8004156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2160      	movs	r1, #96	; 0x60
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fad9 	bl	80041b6 <TIM_ITRx_SetConfig>
      break;
 8003c04:	e01b      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f000 fa70 	bl	80040f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2140      	movs	r1, #64	; 0x40
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fac9 	bl	80041b6 <TIM_ITRx_SetConfig>
      break;
 8003c24:	e00b      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f000 fac0 	bl	80041b6 <TIM_ITRx_SetConfig>
        break;
 8003c36:	e002      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a40      	ldr	r2, [pc, #256]	; (8003d6c <TIM_Base_SetConfig+0x114>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c76:	d00f      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a3d      	ldr	r2, [pc, #244]	; (8003d70 <TIM_Base_SetConfig+0x118>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a3c      	ldr	r2, [pc, #240]	; (8003d74 <TIM_Base_SetConfig+0x11c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d007      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a3b      	ldr	r2, [pc, #236]	; (8003d78 <TIM_Base_SetConfig+0x120>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a3a      	ldr	r2, [pc, #232]	; (8003d7c <TIM_Base_SetConfig+0x124>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d108      	bne.n	8003caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a2f      	ldr	r2, [pc, #188]	; (8003d6c <TIM_Base_SetConfig+0x114>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d02b      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb8:	d027      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a2c      	ldr	r2, [pc, #176]	; (8003d70 <TIM_Base_SetConfig+0x118>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d023      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a2b      	ldr	r2, [pc, #172]	; (8003d74 <TIM_Base_SetConfig+0x11c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01f      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <TIM_Base_SetConfig+0x120>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01b      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a29      	ldr	r2, [pc, #164]	; (8003d7c <TIM_Base_SetConfig+0x124>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d017      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <TIM_Base_SetConfig+0x128>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <TIM_Base_SetConfig+0x12c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00f      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a26      	ldr	r2, [pc, #152]	; (8003d88 <TIM_Base_SetConfig+0x130>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a25      	ldr	r2, [pc, #148]	; (8003d8c <TIM_Base_SetConfig+0x134>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a24      	ldr	r2, [pc, #144]	; (8003d90 <TIM_Base_SetConfig+0x138>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a23      	ldr	r2, [pc, #140]	; (8003d94 <TIM_Base_SetConfig+0x13c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d108      	bne.n	8003d1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <TIM_Base_SetConfig+0x114>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_Base_SetConfig+0xf8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <TIM_Base_SetConfig+0x124>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d103      	bne.n	8003d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]
}
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	40000400 	.word	0x40000400
 8003d74:	40000800 	.word	0x40000800
 8003d78:	40000c00 	.word	0x40000c00
 8003d7c:	40010400 	.word	0x40010400
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800
 8003d8c:	40001800 	.word	0x40001800
 8003d90:	40001c00 	.word	0x40001c00
 8003d94:	40002000 	.word	0x40002000

08003d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f023 0201 	bic.w	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 0302 	bic.w	r3, r3, #2
 8003de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a20      	ldr	r2, [pc, #128]	; (8003e70 <TIM_OC1_SetConfig+0xd8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_OC1_SetConfig+0x64>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <TIM_OC1_SetConfig+0xdc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d10c      	bne.n	8003e16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f023 0308 	bic.w	r3, r3, #8
 8003e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <TIM_OC1_SetConfig+0xd8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_OC1_SetConfig+0x8e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a14      	ldr	r2, [pc, #80]	; (8003e74 <TIM_OC1_SetConfig+0xdc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d111      	bne.n	8003e4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	621a      	str	r2, [r3, #32]
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40010400 	.word	0x40010400

08003e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f023 0210 	bic.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0320 	bic.w	r3, r3, #32
 8003ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <TIM_OC2_SetConfig+0xe4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC2_SetConfig+0x68>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <TIM_OC2_SetConfig+0xe8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10d      	bne.n	8003efc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <TIM_OC2_SetConfig+0xe4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d003      	beq.n	8003f0c <TIM_OC2_SetConfig+0x94>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a16      	ldr	r2, [pc, #88]	; (8003f60 <TIM_OC2_SetConfig+0xe8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d113      	bne.n	8003f34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40010400 	.word	0x40010400

08003f64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a21      	ldr	r2, [pc, #132]	; (8004044 <TIM_OC3_SetConfig+0xe0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_OC3_SetConfig+0x66>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a20      	ldr	r2, [pc, #128]	; (8004048 <TIM_OC3_SetConfig+0xe4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10d      	bne.n	8003fe6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a16      	ldr	r2, [pc, #88]	; (8004044 <TIM_OC3_SetConfig+0xe0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_OC3_SetConfig+0x92>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a15      	ldr	r2, [pc, #84]	; (8004048 <TIM_OC3_SetConfig+0xe4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d113      	bne.n	800401e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	621a      	str	r2, [r3, #32]
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40010000 	.word	0x40010000
 8004048:	40010400 	.word	0x40010400

0800404c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	031b      	lsls	r3, r3, #12
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a12      	ldr	r2, [pc, #72]	; (80040f0 <TIM_OC4_SetConfig+0xa4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d003      	beq.n	80040b4 <TIM_OC4_SetConfig+0x68>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <TIM_OC4_SetConfig+0xa8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d109      	bne.n	80040c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	621a      	str	r2, [r3, #32]
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40010400 	.word	0x40010400

080040f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0201 	bic.w	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 030a 	bic.w	r3, r3, #10
 8004134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	621a      	str	r2, [r3, #32]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004156:	b480      	push	{r7}
 8004158:	b087      	sub	sp, #28
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0210 	bic.w	r2, r3, #16
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	031b      	lsls	r3, r3, #12
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004192:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b085      	sub	sp, #20
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f043 0307 	orr.w	r3, r3, #7
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	021a      	lsls	r2, r3, #8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	431a      	orrs	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e03f      	b.n	80042be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd ff04 	bl	8002060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2224      	movs	r2, #36	; 0x24
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800426e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f905 	bl	8004480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b08a      	sub	sp, #40	; 0x28
 80042ca:	af02      	add	r7, sp, #8
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	4613      	mov	r3, r2
 80042d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d17c      	bne.n	80043e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_UART_Transmit+0x2c>
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e075      	b.n	80043e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_UART_Transmit+0x3e>
 8004300:	2302      	movs	r3, #2
 8004302:	e06e      	b.n	80043e2 <HAL_UART_Transmit+0x11c>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2221      	movs	r2, #33	; 0x21
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800431a:	f7fe fad5 	bl	80028c8 <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	88fa      	ldrh	r2, [r7, #6]
 8004324:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	88fa      	ldrh	r2, [r7, #6]
 800432a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004334:	d108      	bne.n	8004348 <HAL_UART_Transmit+0x82>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d104      	bne.n	8004348 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	e003      	b.n	8004350 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004358:	e02a      	b.n	80043b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2200      	movs	r2, #0
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f840 	bl	80043ea <UART_WaitOnFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e036      	b.n	80043e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004388:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	3302      	adds	r3, #2
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	e007      	b.n	80043a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	3301      	adds	r3, #1
 80043a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1cf      	bne.n	800435a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2200      	movs	r2, #0
 80043c2:	2140      	movs	r1, #64	; 0x40
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f810 	bl	80043ea <UART_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e006      	b.n	80043e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3720      	adds	r7, #32
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fa:	e02c      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004402:	d028      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <UART_WaitOnFlagUntilTimeout+0x30>
 800440a:	f7fe fa5d 	bl	80028c8 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	429a      	cmp	r2, r3
 8004418:	d21d      	bcs.n	8004456 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004428:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e00f      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	429a      	cmp	r2, r3
 8004472:	d0c3      	beq.n	80043fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004484:	b09f      	sub	sp, #124	; 0x7c
 8004486:	af00      	add	r7, sp, #0
 8004488:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800448a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004496:	68d9      	ldr	r1, [r3, #12]
 8004498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	ea40 0301 	orr.w	r3, r0, r1
 80044a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044c4:	f021 010c 	bic.w	r1, r1, #12
 80044c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ce:	430b      	orrs	r3, r1
 80044d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	6999      	ldr	r1, [r3, #24]
 80044e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	ea40 0301 	orr.w	r3, r0, r1
 80044e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4bc5      	ldr	r3, [pc, #788]	; (8004804 <UART_SetConfig+0x384>)
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d004      	beq.n	80044fe <UART_SetConfig+0x7e>
 80044f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4bc3      	ldr	r3, [pc, #780]	; (8004808 <UART_SetConfig+0x388>)
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d103      	bne.n	8004506 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044fe:	f7ff f903 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8004502:	6778      	str	r0, [r7, #116]	; 0x74
 8004504:	e002      	b.n	800450c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004506:	f7ff f8eb 	bl	80036e0 <HAL_RCC_GetPCLK1Freq>
 800450a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004514:	f040 80b6 	bne.w	8004684 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800451a:	461c      	mov	r4, r3
 800451c:	f04f 0500 	mov.w	r5, #0
 8004520:	4622      	mov	r2, r4
 8004522:	462b      	mov	r3, r5
 8004524:	1891      	adds	r1, r2, r2
 8004526:	6439      	str	r1, [r7, #64]	; 0x40
 8004528:	415b      	adcs	r3, r3
 800452a:	647b      	str	r3, [r7, #68]	; 0x44
 800452c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004530:	1912      	adds	r2, r2, r4
 8004532:	eb45 0303 	adc.w	r3, r5, r3
 8004536:	f04f 0000 	mov.w	r0, #0
 800453a:	f04f 0100 	mov.w	r1, #0
 800453e:	00d9      	lsls	r1, r3, #3
 8004540:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004544:	00d0      	lsls	r0, r2, #3
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	1911      	adds	r1, r2, r4
 800454c:	6639      	str	r1, [r7, #96]	; 0x60
 800454e:	416b      	adcs	r3, r5
 8004550:	667b      	str	r3, [r7, #100]	; 0x64
 8004552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	461a      	mov	r2, r3
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	1891      	adds	r1, r2, r2
 800455e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004560:	415b      	adcs	r3, r3
 8004562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004568:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800456c:	f7fc fae8 	bl	8000b40 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4ba5      	ldr	r3, [pc, #660]	; (800480c <UART_SetConfig+0x38c>)
 8004576:	fba3 2302 	umull	r2, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	011e      	lsls	r6, r3, #4
 800457e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004580:	461c      	mov	r4, r3
 8004582:	f04f 0500 	mov.w	r5, #0
 8004586:	4622      	mov	r2, r4
 8004588:	462b      	mov	r3, r5
 800458a:	1891      	adds	r1, r2, r2
 800458c:	6339      	str	r1, [r7, #48]	; 0x30
 800458e:	415b      	adcs	r3, r3
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
 8004592:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004596:	1912      	adds	r2, r2, r4
 8004598:	eb45 0303 	adc.w	r3, r5, r3
 800459c:	f04f 0000 	mov.w	r0, #0
 80045a0:	f04f 0100 	mov.w	r1, #0
 80045a4:	00d9      	lsls	r1, r3, #3
 80045a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045aa:	00d0      	lsls	r0, r2, #3
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	1911      	adds	r1, r2, r4
 80045b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80045b4:	416b      	adcs	r3, r5
 80045b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	461a      	mov	r2, r3
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	1891      	adds	r1, r2, r2
 80045c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80045c6:	415b      	adcs	r3, r3
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045d2:	f7fc fab5 	bl	8000b40 <__aeabi_uldivmod>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4b8c      	ldr	r3, [pc, #560]	; (800480c <UART_SetConfig+0x38c>)
 80045dc:	fba3 1302 	umull	r1, r3, r3, r2
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	2164      	movs	r1, #100	; 0x64
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	3332      	adds	r3, #50	; 0x32
 80045ee:	4a87      	ldr	r2, [pc, #540]	; (800480c <UART_SetConfig+0x38c>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045fc:	441e      	add	r6, r3
 80045fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004600:	4618      	mov	r0, r3
 8004602:	f04f 0100 	mov.w	r1, #0
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	1894      	adds	r4, r2, r2
 800460c:	623c      	str	r4, [r7, #32]
 800460e:	415b      	adcs	r3, r3
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
 8004612:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004616:	1812      	adds	r2, r2, r0
 8004618:	eb41 0303 	adc.w	r3, r1, r3
 800461c:	f04f 0400 	mov.w	r4, #0
 8004620:	f04f 0500 	mov.w	r5, #0
 8004624:	00dd      	lsls	r5, r3, #3
 8004626:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800462a:	00d4      	lsls	r4, r2, #3
 800462c:	4622      	mov	r2, r4
 800462e:	462b      	mov	r3, r5
 8004630:	1814      	adds	r4, r2, r0
 8004632:	653c      	str	r4, [r7, #80]	; 0x50
 8004634:	414b      	adcs	r3, r1
 8004636:	657b      	str	r3, [r7, #84]	; 0x54
 8004638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	461a      	mov	r2, r3
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	1891      	adds	r1, r2, r2
 8004644:	61b9      	str	r1, [r7, #24]
 8004646:	415b      	adcs	r3, r3
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800464e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004652:	f7fc fa75 	bl	8000b40 <__aeabi_uldivmod>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4b6c      	ldr	r3, [pc, #432]	; (800480c <UART_SetConfig+0x38c>)
 800465c:	fba3 1302 	umull	r1, r3, r3, r2
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	2164      	movs	r1, #100	; 0x64
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	3332      	adds	r3, #50	; 0x32
 800466e:	4a67      	ldr	r2, [pc, #412]	; (800480c <UART_SetConfig+0x38c>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	f003 0207 	and.w	r2, r3, #7
 800467a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4432      	add	r2, r6
 8004680:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004682:	e0b9      	b.n	80047f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004686:	461c      	mov	r4, r3
 8004688:	f04f 0500 	mov.w	r5, #0
 800468c:	4622      	mov	r2, r4
 800468e:	462b      	mov	r3, r5
 8004690:	1891      	adds	r1, r2, r2
 8004692:	6139      	str	r1, [r7, #16]
 8004694:	415b      	adcs	r3, r3
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800469c:	1912      	adds	r2, r2, r4
 800469e:	eb45 0303 	adc.w	r3, r5, r3
 80046a2:	f04f 0000 	mov.w	r0, #0
 80046a6:	f04f 0100 	mov.w	r1, #0
 80046aa:	00d9      	lsls	r1, r3, #3
 80046ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046b0:	00d0      	lsls	r0, r2, #3
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	eb12 0804 	adds.w	r8, r2, r4
 80046ba:	eb43 0905 	adc.w	r9, r3, r5
 80046be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f04f 0100 	mov.w	r1, #0
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	008b      	lsls	r3, r1, #2
 80046d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046d6:	0082      	lsls	r2, r0, #2
 80046d8:	4640      	mov	r0, r8
 80046da:	4649      	mov	r1, r9
 80046dc:	f7fc fa30 	bl	8000b40 <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4b49      	ldr	r3, [pc, #292]	; (800480c <UART_SetConfig+0x38c>)
 80046e6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	011e      	lsls	r6, r3, #4
 80046ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046f0:	4618      	mov	r0, r3
 80046f2:	f04f 0100 	mov.w	r1, #0
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	1894      	adds	r4, r2, r2
 80046fc:	60bc      	str	r4, [r7, #8]
 80046fe:	415b      	adcs	r3, r3
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004706:	1812      	adds	r2, r2, r0
 8004708:	eb41 0303 	adc.w	r3, r1, r3
 800470c:	f04f 0400 	mov.w	r4, #0
 8004710:	f04f 0500 	mov.w	r5, #0
 8004714:	00dd      	lsls	r5, r3, #3
 8004716:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800471a:	00d4      	lsls	r4, r2, #3
 800471c:	4622      	mov	r2, r4
 800471e:	462b      	mov	r3, r5
 8004720:	1814      	adds	r4, r2, r0
 8004722:	64bc      	str	r4, [r7, #72]	; 0x48
 8004724:	414b      	adcs	r3, r1
 8004726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4618      	mov	r0, r3
 800472e:	f04f 0100 	mov.w	r1, #0
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	008b      	lsls	r3, r1, #2
 800473c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004740:	0082      	lsls	r2, r0, #2
 8004742:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004746:	f7fc f9fb 	bl	8000b40 <__aeabi_uldivmod>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4b2f      	ldr	r3, [pc, #188]	; (800480c <UART_SetConfig+0x38c>)
 8004750:	fba3 1302 	umull	r1, r3, r3, r2
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	2164      	movs	r1, #100	; 0x64
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	3332      	adds	r3, #50	; 0x32
 8004762:	4a2a      	ldr	r2, [pc, #168]	; (800480c <UART_SetConfig+0x38c>)
 8004764:	fba2 2303 	umull	r2, r3, r2, r3
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800476e:	441e      	add	r6, r3
 8004770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004772:	4618      	mov	r0, r3
 8004774:	f04f 0100 	mov.w	r1, #0
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	1894      	adds	r4, r2, r2
 800477e:	603c      	str	r4, [r7, #0]
 8004780:	415b      	adcs	r3, r3
 8004782:	607b      	str	r3, [r7, #4]
 8004784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004788:	1812      	adds	r2, r2, r0
 800478a:	eb41 0303 	adc.w	r3, r1, r3
 800478e:	f04f 0400 	mov.w	r4, #0
 8004792:	f04f 0500 	mov.w	r5, #0
 8004796:	00dd      	lsls	r5, r3, #3
 8004798:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800479c:	00d4      	lsls	r4, r2, #3
 800479e:	4622      	mov	r2, r4
 80047a0:	462b      	mov	r3, r5
 80047a2:	eb12 0a00 	adds.w	sl, r2, r0
 80047a6:	eb43 0b01 	adc.w	fp, r3, r1
 80047aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f04f 0100 	mov.w	r1, #0
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	008b      	lsls	r3, r1, #2
 80047be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047c2:	0082      	lsls	r2, r0, #2
 80047c4:	4650      	mov	r0, sl
 80047c6:	4659      	mov	r1, fp
 80047c8:	f7fc f9ba 	bl	8000b40 <__aeabi_uldivmod>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4b0e      	ldr	r3, [pc, #56]	; (800480c <UART_SetConfig+0x38c>)
 80047d2:	fba3 1302 	umull	r1, r3, r3, r2
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	2164      	movs	r1, #100	; 0x64
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	3332      	adds	r3, #50	; 0x32
 80047e4:	4a09      	ldr	r2, [pc, #36]	; (800480c <UART_SetConfig+0x38c>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	f003 020f 	and.w	r2, r3, #15
 80047f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4432      	add	r2, r6
 80047f6:	609a      	str	r2, [r3, #8]
}
 80047f8:	bf00      	nop
 80047fa:	377c      	adds	r7, #124	; 0x7c
 80047fc:	46bd      	mov	sp, r7
 80047fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004802:	bf00      	nop
 8004804:	40011000 	.word	0x40011000
 8004808:	40011400 	.word	0x40011400
 800480c:	51eb851f 	.word	0x51eb851f

08004810 <__libc_init_array>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	4d0d      	ldr	r5, [pc, #52]	; (8004848 <__libc_init_array+0x38>)
 8004814:	4c0d      	ldr	r4, [pc, #52]	; (800484c <__libc_init_array+0x3c>)
 8004816:	1b64      	subs	r4, r4, r5
 8004818:	10a4      	asrs	r4, r4, #2
 800481a:	2600      	movs	r6, #0
 800481c:	42a6      	cmp	r6, r4
 800481e:	d109      	bne.n	8004834 <__libc_init_array+0x24>
 8004820:	4d0b      	ldr	r5, [pc, #44]	; (8004850 <__libc_init_array+0x40>)
 8004822:	4c0c      	ldr	r4, [pc, #48]	; (8004854 <__libc_init_array+0x44>)
 8004824:	f001 f9d8 	bl	8005bd8 <_init>
 8004828:	1b64      	subs	r4, r4, r5
 800482a:	10a4      	asrs	r4, r4, #2
 800482c:	2600      	movs	r6, #0
 800482e:	42a6      	cmp	r6, r4
 8004830:	d105      	bne.n	800483e <__libc_init_array+0x2e>
 8004832:	bd70      	pop	{r4, r5, r6, pc}
 8004834:	f855 3b04 	ldr.w	r3, [r5], #4
 8004838:	4798      	blx	r3
 800483a:	3601      	adds	r6, #1
 800483c:	e7ee      	b.n	800481c <__libc_init_array+0xc>
 800483e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004842:	4798      	blx	r3
 8004844:	3601      	adds	r6, #1
 8004846:	e7f2      	b.n	800482e <__libc_init_array+0x1e>
 8004848:	08005e88 	.word	0x08005e88
 800484c:	08005e88 	.word	0x08005e88
 8004850:	08005e88 	.word	0x08005e88
 8004854:	08005e8c 	.word	0x08005e8c

08004858 <log>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	ed2d 8b02 	vpush	{d8}
 800485e:	ec55 4b10 	vmov	r4, r5, d0
 8004862:	f000 f8f1 	bl	8004a48 <__ieee754_log>
 8004866:	4b1e      	ldr	r3, [pc, #120]	; (80048e0 <log+0x88>)
 8004868:	eeb0 8a40 	vmov.f32	s16, s0
 800486c:	eef0 8a60 	vmov.f32	s17, s1
 8004870:	f993 3000 	ldrsb.w	r3, [r3]
 8004874:	3301      	adds	r3, #1
 8004876:	d01a      	beq.n	80048ae <log+0x56>
 8004878:	4622      	mov	r2, r4
 800487a:	462b      	mov	r3, r5
 800487c:	4620      	mov	r0, r4
 800487e:	4629      	mov	r1, r5
 8004880:	f7fc f8f8 	bl	8000a74 <__aeabi_dcmpun>
 8004884:	b998      	cbnz	r0, 80048ae <log+0x56>
 8004886:	2200      	movs	r2, #0
 8004888:	2300      	movs	r3, #0
 800488a:	4620      	mov	r0, r4
 800488c:	4629      	mov	r1, r5
 800488e:	f7fc f8e7 	bl	8000a60 <__aeabi_dcmpgt>
 8004892:	b960      	cbnz	r0, 80048ae <log+0x56>
 8004894:	2200      	movs	r2, #0
 8004896:	2300      	movs	r3, #0
 8004898:	4620      	mov	r0, r4
 800489a:	4629      	mov	r1, r5
 800489c:	f7fc f8b8 	bl	8000a10 <__aeabi_dcmpeq>
 80048a0:	b160      	cbz	r0, 80048bc <log+0x64>
 80048a2:	f001 f993 	bl	8005bcc <__errno>
 80048a6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 80048d8 <log+0x80>
 80048aa:	2322      	movs	r3, #34	; 0x22
 80048ac:	6003      	str	r3, [r0, #0]
 80048ae:	eeb0 0a48 	vmov.f32	s0, s16
 80048b2:	eef0 0a68 	vmov.f32	s1, s17
 80048b6:	ecbd 8b02 	vpop	{d8}
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	f001 f986 	bl	8005bcc <__errno>
 80048c0:	ecbd 8b02 	vpop	{d8}
 80048c4:	2321      	movs	r3, #33	; 0x21
 80048c6:	6003      	str	r3, [r0, #0]
 80048c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048cc:	4805      	ldr	r0, [pc, #20]	; (80048e4 <log+0x8c>)
 80048ce:	f001 b863 	b.w	8005998 <nan>
 80048d2:	bf00      	nop
 80048d4:	f3af 8000 	nop.w
 80048d8:	00000000 	.word	0x00000000
 80048dc:	fff00000 	.word	0xfff00000
 80048e0:	20000094 	.word	0x20000094
 80048e4:	08005e38 	.word	0x08005e38

080048e8 <pow>:
 80048e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048ec:	ec59 8b10 	vmov	r8, r9, d0
 80048f0:	ec57 6b11 	vmov	r6, r7, d1
 80048f4:	f000 fa64 	bl	8004dc0 <__ieee754_pow>
 80048f8:	4b4e      	ldr	r3, [pc, #312]	; (8004a34 <pow+0x14c>)
 80048fa:	f993 3000 	ldrsb.w	r3, [r3]
 80048fe:	3301      	adds	r3, #1
 8004900:	ec55 4b10 	vmov	r4, r5, d0
 8004904:	d015      	beq.n	8004932 <pow+0x4a>
 8004906:	4632      	mov	r2, r6
 8004908:	463b      	mov	r3, r7
 800490a:	4630      	mov	r0, r6
 800490c:	4639      	mov	r1, r7
 800490e:	f7fc f8b1 	bl	8000a74 <__aeabi_dcmpun>
 8004912:	b970      	cbnz	r0, 8004932 <pow+0x4a>
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	4640      	mov	r0, r8
 800491a:	4649      	mov	r1, r9
 800491c:	f7fc f8aa 	bl	8000a74 <__aeabi_dcmpun>
 8004920:	2200      	movs	r2, #0
 8004922:	2300      	movs	r3, #0
 8004924:	b148      	cbz	r0, 800493a <pow+0x52>
 8004926:	4630      	mov	r0, r6
 8004928:	4639      	mov	r1, r7
 800492a:	f7fc f871 	bl	8000a10 <__aeabi_dcmpeq>
 800492e:	2800      	cmp	r0, #0
 8004930:	d17d      	bne.n	8004a2e <pow+0x146>
 8004932:	ec45 4b10 	vmov	d0, r4, r5
 8004936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800493a:	4640      	mov	r0, r8
 800493c:	4649      	mov	r1, r9
 800493e:	f7fc f867 	bl	8000a10 <__aeabi_dcmpeq>
 8004942:	b1e0      	cbz	r0, 800497e <pow+0x96>
 8004944:	2200      	movs	r2, #0
 8004946:	2300      	movs	r3, #0
 8004948:	4630      	mov	r0, r6
 800494a:	4639      	mov	r1, r7
 800494c:	f7fc f860 	bl	8000a10 <__aeabi_dcmpeq>
 8004950:	2800      	cmp	r0, #0
 8004952:	d16c      	bne.n	8004a2e <pow+0x146>
 8004954:	ec47 6b10 	vmov	d0, r6, r7
 8004958:	f001 f811 	bl	800597e <finite>
 800495c:	2800      	cmp	r0, #0
 800495e:	d0e8      	beq.n	8004932 <pow+0x4a>
 8004960:	2200      	movs	r2, #0
 8004962:	2300      	movs	r3, #0
 8004964:	4630      	mov	r0, r6
 8004966:	4639      	mov	r1, r7
 8004968:	f7fc f85c 	bl	8000a24 <__aeabi_dcmplt>
 800496c:	2800      	cmp	r0, #0
 800496e:	d0e0      	beq.n	8004932 <pow+0x4a>
 8004970:	f001 f92c 	bl	8005bcc <__errno>
 8004974:	2321      	movs	r3, #33	; 0x21
 8004976:	6003      	str	r3, [r0, #0]
 8004978:	2400      	movs	r4, #0
 800497a:	4d2f      	ldr	r5, [pc, #188]	; (8004a38 <pow+0x150>)
 800497c:	e7d9      	b.n	8004932 <pow+0x4a>
 800497e:	ec45 4b10 	vmov	d0, r4, r5
 8004982:	f000 fffc 	bl	800597e <finite>
 8004986:	bbb8      	cbnz	r0, 80049f8 <pow+0x110>
 8004988:	ec49 8b10 	vmov	d0, r8, r9
 800498c:	f000 fff7 	bl	800597e <finite>
 8004990:	b390      	cbz	r0, 80049f8 <pow+0x110>
 8004992:	ec47 6b10 	vmov	d0, r6, r7
 8004996:	f000 fff2 	bl	800597e <finite>
 800499a:	b368      	cbz	r0, 80049f8 <pow+0x110>
 800499c:	4622      	mov	r2, r4
 800499e:	462b      	mov	r3, r5
 80049a0:	4620      	mov	r0, r4
 80049a2:	4629      	mov	r1, r5
 80049a4:	f7fc f866 	bl	8000a74 <__aeabi_dcmpun>
 80049a8:	b160      	cbz	r0, 80049c4 <pow+0xdc>
 80049aa:	f001 f90f 	bl	8005bcc <__errno>
 80049ae:	2321      	movs	r3, #33	; 0x21
 80049b0:	6003      	str	r3, [r0, #0]
 80049b2:	2200      	movs	r2, #0
 80049b4:	2300      	movs	r3, #0
 80049b6:	4610      	mov	r0, r2
 80049b8:	4619      	mov	r1, r3
 80049ba:	f7fb feeb 	bl	8000794 <__aeabi_ddiv>
 80049be:	4604      	mov	r4, r0
 80049c0:	460d      	mov	r5, r1
 80049c2:	e7b6      	b.n	8004932 <pow+0x4a>
 80049c4:	f001 f902 	bl	8005bcc <__errno>
 80049c8:	2322      	movs	r3, #34	; 0x22
 80049ca:	6003      	str	r3, [r0, #0]
 80049cc:	2200      	movs	r2, #0
 80049ce:	2300      	movs	r3, #0
 80049d0:	4640      	mov	r0, r8
 80049d2:	4649      	mov	r1, r9
 80049d4:	f7fc f826 	bl	8000a24 <__aeabi_dcmplt>
 80049d8:	2400      	movs	r4, #0
 80049da:	b158      	cbz	r0, 80049f4 <pow+0x10c>
 80049dc:	ec47 6b10 	vmov	d0, r6, r7
 80049e0:	f000 ffe2 	bl	80059a8 <rint>
 80049e4:	4632      	mov	r2, r6
 80049e6:	ec51 0b10 	vmov	r0, r1, d0
 80049ea:	463b      	mov	r3, r7
 80049ec:	f7fc f810 	bl	8000a10 <__aeabi_dcmpeq>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d0c2      	beq.n	800497a <pow+0x92>
 80049f4:	4d11      	ldr	r5, [pc, #68]	; (8004a3c <pow+0x154>)
 80049f6:	e79c      	b.n	8004932 <pow+0x4a>
 80049f8:	2200      	movs	r2, #0
 80049fa:	2300      	movs	r3, #0
 80049fc:	4620      	mov	r0, r4
 80049fe:	4629      	mov	r1, r5
 8004a00:	f7fc f806 	bl	8000a10 <__aeabi_dcmpeq>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d094      	beq.n	8004932 <pow+0x4a>
 8004a08:	ec49 8b10 	vmov	d0, r8, r9
 8004a0c:	f000 ffb7 	bl	800597e <finite>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d08e      	beq.n	8004932 <pow+0x4a>
 8004a14:	ec47 6b10 	vmov	d0, r6, r7
 8004a18:	f000 ffb1 	bl	800597e <finite>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d088      	beq.n	8004932 <pow+0x4a>
 8004a20:	f001 f8d4 	bl	8005bcc <__errno>
 8004a24:	2322      	movs	r3, #34	; 0x22
 8004a26:	6003      	str	r3, [r0, #0]
 8004a28:	2400      	movs	r4, #0
 8004a2a:	2500      	movs	r5, #0
 8004a2c:	e781      	b.n	8004932 <pow+0x4a>
 8004a2e:	4d04      	ldr	r5, [pc, #16]	; (8004a40 <pow+0x158>)
 8004a30:	2400      	movs	r4, #0
 8004a32:	e77e      	b.n	8004932 <pow+0x4a>
 8004a34:	20000094 	.word	0x20000094
 8004a38:	fff00000 	.word	0xfff00000
 8004a3c:	7ff00000 	.word	0x7ff00000
 8004a40:	3ff00000 	.word	0x3ff00000
 8004a44:	00000000 	.word	0x00000000

08004a48 <__ieee754_log>:
 8004a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	ec51 0b10 	vmov	r0, r1, d0
 8004a50:	ed2d 8b04 	vpush	{d8-d9}
 8004a54:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004a58:	b083      	sub	sp, #12
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	da29      	bge.n	8004ab2 <__ieee754_log+0x6a>
 8004a5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004a62:	4303      	orrs	r3, r0
 8004a64:	ee10 2a10 	vmov	r2, s0
 8004a68:	d10c      	bne.n	8004a84 <__ieee754_log+0x3c>
 8004a6a:	49cf      	ldr	r1, [pc, #828]	; (8004da8 <__ieee754_log+0x360>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2000      	movs	r0, #0
 8004a72:	f7fb fe8f 	bl	8000794 <__aeabi_ddiv>
 8004a76:	ec41 0b10 	vmov	d0, r0, r1
 8004a7a:	b003      	add	sp, #12
 8004a7c:	ecbd 8b04 	vpop	{d8-d9}
 8004a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a84:	2900      	cmp	r1, #0
 8004a86:	da05      	bge.n	8004a94 <__ieee754_log+0x4c>
 8004a88:	460b      	mov	r3, r1
 8004a8a:	f7fb fba1 	bl	80001d0 <__aeabi_dsub>
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2300      	movs	r3, #0
 8004a92:	e7ee      	b.n	8004a72 <__ieee754_log+0x2a>
 8004a94:	4bc5      	ldr	r3, [pc, #788]	; (8004dac <__ieee754_log+0x364>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	f7fb fd52 	bl	8000540 <__aeabi_dmul>
 8004a9c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8004aa0:	460d      	mov	r5, r1
 8004aa2:	4ac3      	ldr	r2, [pc, #780]	; (8004db0 <__ieee754_log+0x368>)
 8004aa4:	4295      	cmp	r5, r2
 8004aa6:	dd06      	ble.n	8004ab6 <__ieee754_log+0x6e>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	f7fb fb92 	bl	80001d4 <__adddf3>
 8004ab0:	e7e1      	b.n	8004a76 <__ieee754_log+0x2e>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e7f5      	b.n	8004aa2 <__ieee754_log+0x5a>
 8004ab6:	152c      	asrs	r4, r5, #20
 8004ab8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004abc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004ac0:	441c      	add	r4, r3
 8004ac2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8004ac6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8004aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ace:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8004ad2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8004ad6:	ea42 0105 	orr.w	r1, r2, r5
 8004ada:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4bb4      	ldr	r3, [pc, #720]	; (8004db4 <__ieee754_log+0x36c>)
 8004ae2:	f7fb fb75 	bl	80001d0 <__aeabi_dsub>
 8004ae6:	1cab      	adds	r3, r5, #2
 8004ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	4682      	mov	sl, r0
 8004af0:	468b      	mov	fp, r1
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	dc53      	bgt.n	8004ba0 <__ieee754_log+0x158>
 8004af8:	2300      	movs	r3, #0
 8004afa:	f7fb ff89 	bl	8000a10 <__aeabi_dcmpeq>
 8004afe:	b1d0      	cbz	r0, 8004b36 <__ieee754_log+0xee>
 8004b00:	2c00      	cmp	r4, #0
 8004b02:	f000 8122 	beq.w	8004d4a <__ieee754_log+0x302>
 8004b06:	4620      	mov	r0, r4
 8004b08:	f7fb fcb0 	bl	800046c <__aeabi_i2d>
 8004b0c:	a390      	add	r3, pc, #576	; (adr r3, 8004d50 <__ieee754_log+0x308>)
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	4606      	mov	r6, r0
 8004b14:	460f      	mov	r7, r1
 8004b16:	f7fb fd13 	bl	8000540 <__aeabi_dmul>
 8004b1a:	a38f      	add	r3, pc, #572	; (adr r3, 8004d58 <__ieee754_log+0x310>)
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	4604      	mov	r4, r0
 8004b22:	460d      	mov	r5, r1
 8004b24:	4630      	mov	r0, r6
 8004b26:	4639      	mov	r1, r7
 8004b28:	f7fb fd0a 	bl	8000540 <__aeabi_dmul>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4620      	mov	r0, r4
 8004b32:	4629      	mov	r1, r5
 8004b34:	e7ba      	b.n	8004aac <__ieee754_log+0x64>
 8004b36:	a38a      	add	r3, pc, #552	; (adr r3, 8004d60 <__ieee754_log+0x318>)
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	4650      	mov	r0, sl
 8004b3e:	4659      	mov	r1, fp
 8004b40:	f7fb fcfe 	bl	8000540 <__aeabi_dmul>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	2000      	movs	r0, #0
 8004b4a:	499b      	ldr	r1, [pc, #620]	; (8004db8 <__ieee754_log+0x370>)
 8004b4c:	f7fb fb40 	bl	80001d0 <__aeabi_dsub>
 8004b50:	4652      	mov	r2, sl
 8004b52:	4606      	mov	r6, r0
 8004b54:	460f      	mov	r7, r1
 8004b56:	465b      	mov	r3, fp
 8004b58:	4650      	mov	r0, sl
 8004b5a:	4659      	mov	r1, fp
 8004b5c:	f7fb fcf0 	bl	8000540 <__aeabi_dmul>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4630      	mov	r0, r6
 8004b66:	4639      	mov	r1, r7
 8004b68:	f7fb fcea 	bl	8000540 <__aeabi_dmul>
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	460f      	mov	r7, r1
 8004b70:	b914      	cbnz	r4, 8004b78 <__ieee754_log+0x130>
 8004b72:	4632      	mov	r2, r6
 8004b74:	463b      	mov	r3, r7
 8004b76:	e0a2      	b.n	8004cbe <__ieee754_log+0x276>
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f7fb fc77 	bl	800046c <__aeabi_i2d>
 8004b7e:	a374      	add	r3, pc, #464	; (adr r3, 8004d50 <__ieee754_log+0x308>)
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	4680      	mov	r8, r0
 8004b86:	4689      	mov	r9, r1
 8004b88:	f7fb fcda 	bl	8000540 <__aeabi_dmul>
 8004b8c:	a372      	add	r3, pc, #456	; (adr r3, 8004d58 <__ieee754_log+0x310>)
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	4604      	mov	r4, r0
 8004b94:	460d      	mov	r5, r1
 8004b96:	4640      	mov	r0, r8
 8004b98:	4649      	mov	r1, r9
 8004b9a:	f7fb fcd1 	bl	8000540 <__aeabi_dmul>
 8004b9e:	e0a7      	b.n	8004cf0 <__ieee754_log+0x2a8>
 8004ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ba4:	f7fb fb16 	bl	80001d4 <__adddf3>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4650      	mov	r0, sl
 8004bae:	4659      	mov	r1, fp
 8004bb0:	f7fb fdf0 	bl	8000794 <__aeabi_ddiv>
 8004bb4:	ec41 0b18 	vmov	d8, r0, r1
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f7fb fc57 	bl	800046c <__aeabi_i2d>
 8004bbe:	ec53 2b18 	vmov	r2, r3, d8
 8004bc2:	ec41 0b19 	vmov	d9, r0, r1
 8004bc6:	ec51 0b18 	vmov	r0, r1, d8
 8004bca:	f7fb fcb9 	bl	8000540 <__aeabi_dmul>
 8004bce:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8004bd2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4680      	mov	r8, r0
 8004bde:	4689      	mov	r9, r1
 8004be0:	f7fb fcae 	bl	8000540 <__aeabi_dmul>
 8004be4:	a360      	add	r3, pc, #384	; (adr r3, 8004d68 <__ieee754_log+0x320>)
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	4606      	mov	r6, r0
 8004bec:	460f      	mov	r7, r1
 8004bee:	f7fb fca7 	bl	8000540 <__aeabi_dmul>
 8004bf2:	a35f      	add	r3, pc, #380	; (adr r3, 8004d70 <__ieee754_log+0x328>)
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f7fb faec 	bl	80001d4 <__adddf3>
 8004bfc:	4632      	mov	r2, r6
 8004bfe:	463b      	mov	r3, r7
 8004c00:	f7fb fc9e 	bl	8000540 <__aeabi_dmul>
 8004c04:	a35c      	add	r3, pc, #368	; (adr r3, 8004d78 <__ieee754_log+0x330>)
 8004c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0a:	f7fb fae3 	bl	80001d4 <__adddf3>
 8004c0e:	4632      	mov	r2, r6
 8004c10:	463b      	mov	r3, r7
 8004c12:	f7fb fc95 	bl	8000540 <__aeabi_dmul>
 8004c16:	a35a      	add	r3, pc, #360	; (adr r3, 8004d80 <__ieee754_log+0x338>)
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f7fb fada 	bl	80001d4 <__adddf3>
 8004c20:	4642      	mov	r2, r8
 8004c22:	464b      	mov	r3, r9
 8004c24:	f7fb fc8c 	bl	8000540 <__aeabi_dmul>
 8004c28:	a357      	add	r3, pc, #348	; (adr r3, 8004d88 <__ieee754_log+0x340>)
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	4680      	mov	r8, r0
 8004c30:	4689      	mov	r9, r1
 8004c32:	4630      	mov	r0, r6
 8004c34:	4639      	mov	r1, r7
 8004c36:	f7fb fc83 	bl	8000540 <__aeabi_dmul>
 8004c3a:	a355      	add	r3, pc, #340	; (adr r3, 8004d90 <__ieee754_log+0x348>)
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	f7fb fac8 	bl	80001d4 <__adddf3>
 8004c44:	4632      	mov	r2, r6
 8004c46:	463b      	mov	r3, r7
 8004c48:	f7fb fc7a 	bl	8000540 <__aeabi_dmul>
 8004c4c:	a352      	add	r3, pc, #328	; (adr r3, 8004d98 <__ieee754_log+0x350>)
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	f7fb fabf 	bl	80001d4 <__adddf3>
 8004c56:	4632      	mov	r2, r6
 8004c58:	463b      	mov	r3, r7
 8004c5a:	f7fb fc71 	bl	8000540 <__aeabi_dmul>
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4602      	mov	r2, r0
 8004c62:	4649      	mov	r1, r9
 8004c64:	4640      	mov	r0, r8
 8004c66:	f7fb fab5 	bl	80001d4 <__adddf3>
 8004c6a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004c6e:	9b01      	ldr	r3, [sp, #4]
 8004c70:	3551      	adds	r5, #81	; 0x51
 8004c72:	431d      	orrs	r5, r3
 8004c74:	2d00      	cmp	r5, #0
 8004c76:	4680      	mov	r8, r0
 8004c78:	4689      	mov	r9, r1
 8004c7a:	dd48      	ble.n	8004d0e <__ieee754_log+0x2c6>
 8004c7c:	4b4e      	ldr	r3, [pc, #312]	; (8004db8 <__ieee754_log+0x370>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	4650      	mov	r0, sl
 8004c82:	4659      	mov	r1, fp
 8004c84:	f7fb fc5c 	bl	8000540 <__aeabi_dmul>
 8004c88:	4652      	mov	r2, sl
 8004c8a:	465b      	mov	r3, fp
 8004c8c:	f7fb fc58 	bl	8000540 <__aeabi_dmul>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4606      	mov	r6, r0
 8004c96:	460f      	mov	r7, r1
 8004c98:	4640      	mov	r0, r8
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	f7fb fa9a 	bl	80001d4 <__adddf3>
 8004ca0:	ec53 2b18 	vmov	r2, r3, d8
 8004ca4:	f7fb fc4c 	bl	8000540 <__aeabi_dmul>
 8004ca8:	4680      	mov	r8, r0
 8004caa:	4689      	mov	r9, r1
 8004cac:	b964      	cbnz	r4, 8004cc8 <__ieee754_log+0x280>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	4639      	mov	r1, r7
 8004cb6:	f7fb fa8b 	bl	80001d0 <__aeabi_dsub>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4650      	mov	r0, sl
 8004cc0:	4659      	mov	r1, fp
 8004cc2:	f7fb fa85 	bl	80001d0 <__aeabi_dsub>
 8004cc6:	e6d6      	b.n	8004a76 <__ieee754_log+0x2e>
 8004cc8:	a321      	add	r3, pc, #132	; (adr r3, 8004d50 <__ieee754_log+0x308>)
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	ec51 0b19 	vmov	r0, r1, d9
 8004cd2:	f7fb fc35 	bl	8000540 <__aeabi_dmul>
 8004cd6:	a320      	add	r3, pc, #128	; (adr r3, 8004d58 <__ieee754_log+0x310>)
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	4604      	mov	r4, r0
 8004cde:	460d      	mov	r5, r1
 8004ce0:	ec51 0b19 	vmov	r0, r1, d9
 8004ce4:	f7fb fc2c 	bl	8000540 <__aeabi_dmul>
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	f7fb fa72 	bl	80001d4 <__adddf3>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	4639      	mov	r1, r7
 8004cf8:	f7fb fa6a 	bl	80001d0 <__aeabi_dsub>
 8004cfc:	4652      	mov	r2, sl
 8004cfe:	465b      	mov	r3, fp
 8004d00:	f7fb fa66 	bl	80001d0 <__aeabi_dsub>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4620      	mov	r0, r4
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	e7d9      	b.n	8004cc2 <__ieee754_log+0x27a>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4650      	mov	r0, sl
 8004d14:	4659      	mov	r1, fp
 8004d16:	f7fb fa5b 	bl	80001d0 <__aeabi_dsub>
 8004d1a:	ec53 2b18 	vmov	r2, r3, d8
 8004d1e:	f7fb fc0f 	bl	8000540 <__aeabi_dmul>
 8004d22:	4606      	mov	r6, r0
 8004d24:	460f      	mov	r7, r1
 8004d26:	2c00      	cmp	r4, #0
 8004d28:	f43f af23 	beq.w	8004b72 <__ieee754_log+0x12a>
 8004d2c:	a308      	add	r3, pc, #32	; (adr r3, 8004d50 <__ieee754_log+0x308>)
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	ec51 0b19 	vmov	r0, r1, d9
 8004d36:	f7fb fc03 	bl	8000540 <__aeabi_dmul>
 8004d3a:	a307      	add	r3, pc, #28	; (adr r3, 8004d58 <__ieee754_log+0x310>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	4604      	mov	r4, r0
 8004d42:	460d      	mov	r5, r1
 8004d44:	ec51 0b19 	vmov	r0, r1, d9
 8004d48:	e727      	b.n	8004b9a <__ieee754_log+0x152>
 8004d4a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8004da0 <__ieee754_log+0x358>
 8004d4e:	e694      	b.n	8004a7a <__ieee754_log+0x32>
 8004d50:	fee00000 	.word	0xfee00000
 8004d54:	3fe62e42 	.word	0x3fe62e42
 8004d58:	35793c76 	.word	0x35793c76
 8004d5c:	3dea39ef 	.word	0x3dea39ef
 8004d60:	55555555 	.word	0x55555555
 8004d64:	3fd55555 	.word	0x3fd55555
 8004d68:	df3e5244 	.word	0xdf3e5244
 8004d6c:	3fc2f112 	.word	0x3fc2f112
 8004d70:	96cb03de 	.word	0x96cb03de
 8004d74:	3fc74664 	.word	0x3fc74664
 8004d78:	94229359 	.word	0x94229359
 8004d7c:	3fd24924 	.word	0x3fd24924
 8004d80:	55555593 	.word	0x55555593
 8004d84:	3fe55555 	.word	0x3fe55555
 8004d88:	d078c69f 	.word	0xd078c69f
 8004d8c:	3fc39a09 	.word	0x3fc39a09
 8004d90:	1d8e78af 	.word	0x1d8e78af
 8004d94:	3fcc71c5 	.word	0x3fcc71c5
 8004d98:	9997fa04 	.word	0x9997fa04
 8004d9c:	3fd99999 	.word	0x3fd99999
	...
 8004da8:	c3500000 	.word	0xc3500000
 8004dac:	43500000 	.word	0x43500000
 8004db0:	7fefffff 	.word	0x7fefffff
 8004db4:	3ff00000 	.word	0x3ff00000
 8004db8:	3fe00000 	.word	0x3fe00000
 8004dbc:	00000000 	.word	0x00000000

08004dc0 <__ieee754_pow>:
 8004dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc4:	ed2d 8b06 	vpush	{d8-d10}
 8004dc8:	b08d      	sub	sp, #52	; 0x34
 8004dca:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004dce:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8004dd2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004dd6:	ea56 0100 	orrs.w	r1, r6, r0
 8004dda:	ec53 2b10 	vmov	r2, r3, d0
 8004dde:	f000 84d1 	beq.w	8005784 <__ieee754_pow+0x9c4>
 8004de2:	497f      	ldr	r1, [pc, #508]	; (8004fe0 <__ieee754_pow+0x220>)
 8004de4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8004de8:	428c      	cmp	r4, r1
 8004dea:	ee10 8a10 	vmov	r8, s0
 8004dee:	4699      	mov	r9, r3
 8004df0:	dc09      	bgt.n	8004e06 <__ieee754_pow+0x46>
 8004df2:	d103      	bne.n	8004dfc <__ieee754_pow+0x3c>
 8004df4:	b97a      	cbnz	r2, 8004e16 <__ieee754_pow+0x56>
 8004df6:	42a6      	cmp	r6, r4
 8004df8:	dd02      	ble.n	8004e00 <__ieee754_pow+0x40>
 8004dfa:	e00c      	b.n	8004e16 <__ieee754_pow+0x56>
 8004dfc:	428e      	cmp	r6, r1
 8004dfe:	dc02      	bgt.n	8004e06 <__ieee754_pow+0x46>
 8004e00:	428e      	cmp	r6, r1
 8004e02:	d110      	bne.n	8004e26 <__ieee754_pow+0x66>
 8004e04:	b178      	cbz	r0, 8004e26 <__ieee754_pow+0x66>
 8004e06:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004e0a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004e0e:	ea54 0308 	orrs.w	r3, r4, r8
 8004e12:	f000 84b7 	beq.w	8005784 <__ieee754_pow+0x9c4>
 8004e16:	4873      	ldr	r0, [pc, #460]	; (8004fe4 <__ieee754_pow+0x224>)
 8004e18:	b00d      	add	sp, #52	; 0x34
 8004e1a:	ecbd 8b06 	vpop	{d8-d10}
 8004e1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e22:	f000 bdb9 	b.w	8005998 <nan>
 8004e26:	f1b9 0f00 	cmp.w	r9, #0
 8004e2a:	da36      	bge.n	8004e9a <__ieee754_pow+0xda>
 8004e2c:	496e      	ldr	r1, [pc, #440]	; (8004fe8 <__ieee754_pow+0x228>)
 8004e2e:	428e      	cmp	r6, r1
 8004e30:	dc51      	bgt.n	8004ed6 <__ieee754_pow+0x116>
 8004e32:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8004e36:	428e      	cmp	r6, r1
 8004e38:	f340 84af 	ble.w	800579a <__ieee754_pow+0x9da>
 8004e3c:	1531      	asrs	r1, r6, #20
 8004e3e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004e42:	2914      	cmp	r1, #20
 8004e44:	dd0f      	ble.n	8004e66 <__ieee754_pow+0xa6>
 8004e46:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8004e4a:	fa20 fc01 	lsr.w	ip, r0, r1
 8004e4e:	fa0c f101 	lsl.w	r1, ip, r1
 8004e52:	4281      	cmp	r1, r0
 8004e54:	f040 84a1 	bne.w	800579a <__ieee754_pow+0x9da>
 8004e58:	f00c 0c01 	and.w	ip, ip, #1
 8004e5c:	f1cc 0102 	rsb	r1, ip, #2
 8004e60:	9100      	str	r1, [sp, #0]
 8004e62:	b180      	cbz	r0, 8004e86 <__ieee754_pow+0xc6>
 8004e64:	e059      	b.n	8004f1a <__ieee754_pow+0x15a>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d155      	bne.n	8004f16 <__ieee754_pow+0x156>
 8004e6a:	f1c1 0114 	rsb	r1, r1, #20
 8004e6e:	fa46 fc01 	asr.w	ip, r6, r1
 8004e72:	fa0c f101 	lsl.w	r1, ip, r1
 8004e76:	42b1      	cmp	r1, r6
 8004e78:	f040 848c 	bne.w	8005794 <__ieee754_pow+0x9d4>
 8004e7c:	f00c 0c01 	and.w	ip, ip, #1
 8004e80:	f1cc 0102 	rsb	r1, ip, #2
 8004e84:	9100      	str	r1, [sp, #0]
 8004e86:	4959      	ldr	r1, [pc, #356]	; (8004fec <__ieee754_pow+0x22c>)
 8004e88:	428e      	cmp	r6, r1
 8004e8a:	d12d      	bne.n	8004ee8 <__ieee754_pow+0x128>
 8004e8c:	2f00      	cmp	r7, #0
 8004e8e:	da79      	bge.n	8004f84 <__ieee754_pow+0x1c4>
 8004e90:	4956      	ldr	r1, [pc, #344]	; (8004fec <__ieee754_pow+0x22c>)
 8004e92:	2000      	movs	r0, #0
 8004e94:	f7fb fc7e 	bl	8000794 <__aeabi_ddiv>
 8004e98:	e016      	b.n	8004ec8 <__ieee754_pow+0x108>
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	9100      	str	r1, [sp, #0]
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d13b      	bne.n	8004f1a <__ieee754_pow+0x15a>
 8004ea2:	494f      	ldr	r1, [pc, #316]	; (8004fe0 <__ieee754_pow+0x220>)
 8004ea4:	428e      	cmp	r6, r1
 8004ea6:	d1ee      	bne.n	8004e86 <__ieee754_pow+0xc6>
 8004ea8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004eac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004eb0:	ea53 0308 	orrs.w	r3, r3, r8
 8004eb4:	f000 8466 	beq.w	8005784 <__ieee754_pow+0x9c4>
 8004eb8:	4b4d      	ldr	r3, [pc, #308]	; (8004ff0 <__ieee754_pow+0x230>)
 8004eba:	429c      	cmp	r4, r3
 8004ebc:	dd0d      	ble.n	8004eda <__ieee754_pow+0x11a>
 8004ebe:	2f00      	cmp	r7, #0
 8004ec0:	f280 8464 	bge.w	800578c <__ieee754_pow+0x9cc>
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	ec41 0b10 	vmov	d0, r0, r1
 8004ecc:	b00d      	add	sp, #52	; 0x34
 8004ece:	ecbd 8b06 	vpop	{d8-d10}
 8004ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed6:	2102      	movs	r1, #2
 8004ed8:	e7e0      	b.n	8004e9c <__ieee754_pow+0xdc>
 8004eda:	2f00      	cmp	r7, #0
 8004edc:	daf2      	bge.n	8004ec4 <__ieee754_pow+0x104>
 8004ede:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8004ee2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004ee6:	e7ef      	b.n	8004ec8 <__ieee754_pow+0x108>
 8004ee8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004eec:	d104      	bne.n	8004ef8 <__ieee754_pow+0x138>
 8004eee:	4610      	mov	r0, r2
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	f7fb fb25 	bl	8000540 <__aeabi_dmul>
 8004ef6:	e7e7      	b.n	8004ec8 <__ieee754_pow+0x108>
 8004ef8:	493e      	ldr	r1, [pc, #248]	; (8004ff4 <__ieee754_pow+0x234>)
 8004efa:	428f      	cmp	r7, r1
 8004efc:	d10d      	bne.n	8004f1a <__ieee754_pow+0x15a>
 8004efe:	f1b9 0f00 	cmp.w	r9, #0
 8004f02:	db0a      	blt.n	8004f1a <__ieee754_pow+0x15a>
 8004f04:	ec43 2b10 	vmov	d0, r2, r3
 8004f08:	b00d      	add	sp, #52	; 0x34
 8004f0a:	ecbd 8b06 	vpop	{d8-d10}
 8004f0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f12:	f000 bc77 	b.w	8005804 <__ieee754_sqrt>
 8004f16:	2100      	movs	r1, #0
 8004f18:	9100      	str	r1, [sp, #0]
 8004f1a:	ec43 2b10 	vmov	d0, r2, r3
 8004f1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f22:	f000 fd23 	bl	800596c <fabs>
 8004f26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f2a:	ec51 0b10 	vmov	r0, r1, d0
 8004f2e:	f1b8 0f00 	cmp.w	r8, #0
 8004f32:	d12a      	bne.n	8004f8a <__ieee754_pow+0x1ca>
 8004f34:	b12c      	cbz	r4, 8004f42 <__ieee754_pow+0x182>
 8004f36:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8004fec <__ieee754_pow+0x22c>
 8004f3a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8004f3e:	45e6      	cmp	lr, ip
 8004f40:	d123      	bne.n	8004f8a <__ieee754_pow+0x1ca>
 8004f42:	2f00      	cmp	r7, #0
 8004f44:	da05      	bge.n	8004f52 <__ieee754_pow+0x192>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	4927      	ldr	r1, [pc, #156]	; (8004fec <__ieee754_pow+0x22c>)
 8004f4e:	f7fb fc21 	bl	8000794 <__aeabi_ddiv>
 8004f52:	f1b9 0f00 	cmp.w	r9, #0
 8004f56:	dab7      	bge.n	8004ec8 <__ieee754_pow+0x108>
 8004f58:	9b00      	ldr	r3, [sp, #0]
 8004f5a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004f5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004f62:	4323      	orrs	r3, r4
 8004f64:	d108      	bne.n	8004f78 <__ieee754_pow+0x1b8>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f7fb f92f 	bl	80001d0 <__aeabi_dsub>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	e78d      	b.n	8004e94 <__ieee754_pow+0xd4>
 8004f78:	9b00      	ldr	r3, [sp, #0]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d1a4      	bne.n	8004ec8 <__ieee754_pow+0x108>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	e79e      	b.n	8004ec8 <__ieee754_pow+0x108>
 8004f8a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8004f8e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8004f92:	950a      	str	r5, [sp, #40]	; 0x28
 8004f94:	9d00      	ldr	r5, [sp, #0]
 8004f96:	46ac      	mov	ip, r5
 8004f98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004f9a:	ea5c 0505 	orrs.w	r5, ip, r5
 8004f9e:	d0e4      	beq.n	8004f6a <__ieee754_pow+0x1aa>
 8004fa0:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <__ieee754_pow+0x238>)
 8004fa2:	429e      	cmp	r6, r3
 8004fa4:	f340 80fc 	ble.w	80051a0 <__ieee754_pow+0x3e0>
 8004fa8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004fac:	429e      	cmp	r6, r3
 8004fae:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <__ieee754_pow+0x230>)
 8004fb0:	dd07      	ble.n	8004fc2 <__ieee754_pow+0x202>
 8004fb2:	429c      	cmp	r4, r3
 8004fb4:	dc0a      	bgt.n	8004fcc <__ieee754_pow+0x20c>
 8004fb6:	2f00      	cmp	r7, #0
 8004fb8:	da84      	bge.n	8004ec4 <__ieee754_pow+0x104>
 8004fba:	a307      	add	r3, pc, #28	; (adr r3, 8004fd8 <__ieee754_pow+0x218>)
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	e795      	b.n	8004eee <__ieee754_pow+0x12e>
 8004fc2:	429c      	cmp	r4, r3
 8004fc4:	dbf7      	blt.n	8004fb6 <__ieee754_pow+0x1f6>
 8004fc6:	4b09      	ldr	r3, [pc, #36]	; (8004fec <__ieee754_pow+0x22c>)
 8004fc8:	429c      	cmp	r4, r3
 8004fca:	dd17      	ble.n	8004ffc <__ieee754_pow+0x23c>
 8004fcc:	2f00      	cmp	r7, #0
 8004fce:	dcf4      	bgt.n	8004fba <__ieee754_pow+0x1fa>
 8004fd0:	e778      	b.n	8004ec4 <__ieee754_pow+0x104>
 8004fd2:	bf00      	nop
 8004fd4:	f3af 8000 	nop.w
 8004fd8:	8800759c 	.word	0x8800759c
 8004fdc:	7e37e43c 	.word	0x7e37e43c
 8004fe0:	7ff00000 	.word	0x7ff00000
 8004fe4:	08005e38 	.word	0x08005e38
 8004fe8:	433fffff 	.word	0x433fffff
 8004fec:	3ff00000 	.word	0x3ff00000
 8004ff0:	3fefffff 	.word	0x3fefffff
 8004ff4:	3fe00000 	.word	0x3fe00000
 8004ff8:	41e00000 	.word	0x41e00000
 8004ffc:	4b64      	ldr	r3, [pc, #400]	; (8005190 <__ieee754_pow+0x3d0>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	f7fb f8e6 	bl	80001d0 <__aeabi_dsub>
 8005004:	a356      	add	r3, pc, #344	; (adr r3, 8005160 <__ieee754_pow+0x3a0>)
 8005006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500a:	4604      	mov	r4, r0
 800500c:	460d      	mov	r5, r1
 800500e:	f7fb fa97 	bl	8000540 <__aeabi_dmul>
 8005012:	a355      	add	r3, pc, #340	; (adr r3, 8005168 <__ieee754_pow+0x3a8>)
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	4606      	mov	r6, r0
 800501a:	460f      	mov	r7, r1
 800501c:	4620      	mov	r0, r4
 800501e:	4629      	mov	r1, r5
 8005020:	f7fb fa8e 	bl	8000540 <__aeabi_dmul>
 8005024:	4b5b      	ldr	r3, [pc, #364]	; (8005194 <__ieee754_pow+0x3d4>)
 8005026:	4682      	mov	sl, r0
 8005028:	468b      	mov	fp, r1
 800502a:	2200      	movs	r2, #0
 800502c:	4620      	mov	r0, r4
 800502e:	4629      	mov	r1, r5
 8005030:	f7fb fa86 	bl	8000540 <__aeabi_dmul>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	a14d      	add	r1, pc, #308	; (adr r1, 8005170 <__ieee754_pow+0x3b0>)
 800503a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800503e:	f7fb f8c7 	bl	80001d0 <__aeabi_dsub>
 8005042:	4622      	mov	r2, r4
 8005044:	462b      	mov	r3, r5
 8005046:	f7fb fa7b 	bl	8000540 <__aeabi_dmul>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	2000      	movs	r0, #0
 8005050:	4951      	ldr	r1, [pc, #324]	; (8005198 <__ieee754_pow+0x3d8>)
 8005052:	f7fb f8bd 	bl	80001d0 <__aeabi_dsub>
 8005056:	4622      	mov	r2, r4
 8005058:	4680      	mov	r8, r0
 800505a:	4689      	mov	r9, r1
 800505c:	462b      	mov	r3, r5
 800505e:	4620      	mov	r0, r4
 8005060:	4629      	mov	r1, r5
 8005062:	f7fb fa6d 	bl	8000540 <__aeabi_dmul>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4640      	mov	r0, r8
 800506c:	4649      	mov	r1, r9
 800506e:	f7fb fa67 	bl	8000540 <__aeabi_dmul>
 8005072:	a341      	add	r3, pc, #260	; (adr r3, 8005178 <__ieee754_pow+0x3b8>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	f7fb fa62 	bl	8000540 <__aeabi_dmul>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4650      	mov	r0, sl
 8005082:	4659      	mov	r1, fp
 8005084:	f7fb f8a4 	bl	80001d0 <__aeabi_dsub>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4680      	mov	r8, r0
 800508e:	4689      	mov	r9, r1
 8005090:	4630      	mov	r0, r6
 8005092:	4639      	mov	r1, r7
 8005094:	f7fb f89e 	bl	80001d4 <__adddf3>
 8005098:	2400      	movs	r4, #0
 800509a:	4632      	mov	r2, r6
 800509c:	463b      	mov	r3, r7
 800509e:	4620      	mov	r0, r4
 80050a0:	460d      	mov	r5, r1
 80050a2:	f7fb f895 	bl	80001d0 <__aeabi_dsub>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4640      	mov	r0, r8
 80050ac:	4649      	mov	r1, r9
 80050ae:	f7fb f88f 	bl	80001d0 <__aeabi_dsub>
 80050b2:	9b00      	ldr	r3, [sp, #0]
 80050b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050b6:	3b01      	subs	r3, #1
 80050b8:	4313      	orrs	r3, r2
 80050ba:	4682      	mov	sl, r0
 80050bc:	468b      	mov	fp, r1
 80050be:	f040 81f1 	bne.w	80054a4 <__ieee754_pow+0x6e4>
 80050c2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005180 <__ieee754_pow+0x3c0>
 80050c6:	eeb0 8a47 	vmov.f32	s16, s14
 80050ca:	eef0 8a67 	vmov.f32	s17, s15
 80050ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80050d2:	2600      	movs	r6, #0
 80050d4:	4632      	mov	r2, r6
 80050d6:	463b      	mov	r3, r7
 80050d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050dc:	f7fb f878 	bl	80001d0 <__aeabi_dsub>
 80050e0:	4622      	mov	r2, r4
 80050e2:	462b      	mov	r3, r5
 80050e4:	f7fb fa2c 	bl	8000540 <__aeabi_dmul>
 80050e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050ec:	4680      	mov	r8, r0
 80050ee:	4689      	mov	r9, r1
 80050f0:	4650      	mov	r0, sl
 80050f2:	4659      	mov	r1, fp
 80050f4:	f7fb fa24 	bl	8000540 <__aeabi_dmul>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4640      	mov	r0, r8
 80050fe:	4649      	mov	r1, r9
 8005100:	f7fb f868 	bl	80001d4 <__adddf3>
 8005104:	4632      	mov	r2, r6
 8005106:	463b      	mov	r3, r7
 8005108:	4680      	mov	r8, r0
 800510a:	4689      	mov	r9, r1
 800510c:	4620      	mov	r0, r4
 800510e:	4629      	mov	r1, r5
 8005110:	f7fb fa16 	bl	8000540 <__aeabi_dmul>
 8005114:	460b      	mov	r3, r1
 8005116:	4604      	mov	r4, r0
 8005118:	460d      	mov	r5, r1
 800511a:	4602      	mov	r2, r0
 800511c:	4649      	mov	r1, r9
 800511e:	4640      	mov	r0, r8
 8005120:	f7fb f858 	bl	80001d4 <__adddf3>
 8005124:	4b1d      	ldr	r3, [pc, #116]	; (800519c <__ieee754_pow+0x3dc>)
 8005126:	4299      	cmp	r1, r3
 8005128:	ec45 4b19 	vmov	d9, r4, r5
 800512c:	4606      	mov	r6, r0
 800512e:	460f      	mov	r7, r1
 8005130:	468b      	mov	fp, r1
 8005132:	f340 82fe 	ble.w	8005732 <__ieee754_pow+0x972>
 8005136:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800513a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800513e:	4303      	orrs	r3, r0
 8005140:	f000 81f0 	beq.w	8005524 <__ieee754_pow+0x764>
 8005144:	a310      	add	r3, pc, #64	; (adr r3, 8005188 <__ieee754_pow+0x3c8>)
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	ec51 0b18 	vmov	r0, r1, d8
 800514e:	f7fb f9f7 	bl	8000540 <__aeabi_dmul>
 8005152:	a30d      	add	r3, pc, #52	; (adr r3, 8005188 <__ieee754_pow+0x3c8>)
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	e6cb      	b.n	8004ef2 <__ieee754_pow+0x132>
 800515a:	bf00      	nop
 800515c:	f3af 8000 	nop.w
 8005160:	60000000 	.word	0x60000000
 8005164:	3ff71547 	.word	0x3ff71547
 8005168:	f85ddf44 	.word	0xf85ddf44
 800516c:	3e54ae0b 	.word	0x3e54ae0b
 8005170:	55555555 	.word	0x55555555
 8005174:	3fd55555 	.word	0x3fd55555
 8005178:	652b82fe 	.word	0x652b82fe
 800517c:	3ff71547 	.word	0x3ff71547
 8005180:	00000000 	.word	0x00000000
 8005184:	bff00000 	.word	0xbff00000
 8005188:	8800759c 	.word	0x8800759c
 800518c:	7e37e43c 	.word	0x7e37e43c
 8005190:	3ff00000 	.word	0x3ff00000
 8005194:	3fd00000 	.word	0x3fd00000
 8005198:	3fe00000 	.word	0x3fe00000
 800519c:	408fffff 	.word	0x408fffff
 80051a0:	4bd7      	ldr	r3, [pc, #860]	; (8005500 <__ieee754_pow+0x740>)
 80051a2:	ea03 0309 	and.w	r3, r3, r9
 80051a6:	2200      	movs	r2, #0
 80051a8:	b92b      	cbnz	r3, 80051b6 <__ieee754_pow+0x3f6>
 80051aa:	4bd6      	ldr	r3, [pc, #856]	; (8005504 <__ieee754_pow+0x744>)
 80051ac:	f7fb f9c8 	bl	8000540 <__aeabi_dmul>
 80051b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80051b4:	460c      	mov	r4, r1
 80051b6:	1523      	asrs	r3, r4, #20
 80051b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80051bc:	4413      	add	r3, r2
 80051be:	9309      	str	r3, [sp, #36]	; 0x24
 80051c0:	4bd1      	ldr	r3, [pc, #836]	; (8005508 <__ieee754_pow+0x748>)
 80051c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80051c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80051ca:	429c      	cmp	r4, r3
 80051cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80051d0:	dd08      	ble.n	80051e4 <__ieee754_pow+0x424>
 80051d2:	4bce      	ldr	r3, [pc, #824]	; (800550c <__ieee754_pow+0x74c>)
 80051d4:	429c      	cmp	r4, r3
 80051d6:	f340 8163 	ble.w	80054a0 <__ieee754_pow+0x6e0>
 80051da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051dc:	3301      	adds	r3, #1
 80051de:	9309      	str	r3, [sp, #36]	; 0x24
 80051e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80051e4:	2400      	movs	r4, #0
 80051e6:	00e3      	lsls	r3, r4, #3
 80051e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80051ea:	4bc9      	ldr	r3, [pc, #804]	; (8005510 <__ieee754_pow+0x750>)
 80051ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051f0:	ed93 7b00 	vldr	d7, [r3]
 80051f4:	4629      	mov	r1, r5
 80051f6:	ec53 2b17 	vmov	r2, r3, d7
 80051fa:	eeb0 8a47 	vmov.f32	s16, s14
 80051fe:	eef0 8a67 	vmov.f32	s17, s15
 8005202:	4682      	mov	sl, r0
 8005204:	f7fa ffe4 	bl	80001d0 <__aeabi_dsub>
 8005208:	4652      	mov	r2, sl
 800520a:	4606      	mov	r6, r0
 800520c:	460f      	mov	r7, r1
 800520e:	462b      	mov	r3, r5
 8005210:	ec51 0b18 	vmov	r0, r1, d8
 8005214:	f7fa ffde 	bl	80001d4 <__adddf3>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	2000      	movs	r0, #0
 800521e:	49bd      	ldr	r1, [pc, #756]	; (8005514 <__ieee754_pow+0x754>)
 8005220:	f7fb fab8 	bl	8000794 <__aeabi_ddiv>
 8005224:	ec41 0b19 	vmov	d9, r0, r1
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4630      	mov	r0, r6
 800522e:	4639      	mov	r1, r7
 8005230:	f7fb f986 	bl	8000540 <__aeabi_dmul>
 8005234:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005238:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800523c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005240:	2300      	movs	r3, #0
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005248:	46ab      	mov	fp, r5
 800524a:	106d      	asrs	r5, r5, #1
 800524c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005250:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005254:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005258:	2200      	movs	r2, #0
 800525a:	4640      	mov	r0, r8
 800525c:	4649      	mov	r1, r9
 800525e:	4614      	mov	r4, r2
 8005260:	461d      	mov	r5, r3
 8005262:	f7fb f96d 	bl	8000540 <__aeabi_dmul>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4630      	mov	r0, r6
 800526c:	4639      	mov	r1, r7
 800526e:	f7fa ffaf 	bl	80001d0 <__aeabi_dsub>
 8005272:	ec53 2b18 	vmov	r2, r3, d8
 8005276:	4606      	mov	r6, r0
 8005278:	460f      	mov	r7, r1
 800527a:	4620      	mov	r0, r4
 800527c:	4629      	mov	r1, r5
 800527e:	f7fa ffa7 	bl	80001d0 <__aeabi_dsub>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4650      	mov	r0, sl
 8005288:	4659      	mov	r1, fp
 800528a:	f7fa ffa1 	bl	80001d0 <__aeabi_dsub>
 800528e:	4642      	mov	r2, r8
 8005290:	464b      	mov	r3, r9
 8005292:	f7fb f955 	bl	8000540 <__aeabi_dmul>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4630      	mov	r0, r6
 800529c:	4639      	mov	r1, r7
 800529e:	f7fa ff97 	bl	80001d0 <__aeabi_dsub>
 80052a2:	ec53 2b19 	vmov	r2, r3, d9
 80052a6:	f7fb f94b 	bl	8000540 <__aeabi_dmul>
 80052aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052ae:	ec41 0b18 	vmov	d8, r0, r1
 80052b2:	4610      	mov	r0, r2
 80052b4:	4619      	mov	r1, r3
 80052b6:	f7fb f943 	bl	8000540 <__aeabi_dmul>
 80052ba:	a37d      	add	r3, pc, #500	; (adr r3, 80054b0 <__ieee754_pow+0x6f0>)
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	4604      	mov	r4, r0
 80052c2:	460d      	mov	r5, r1
 80052c4:	f7fb f93c 	bl	8000540 <__aeabi_dmul>
 80052c8:	a37b      	add	r3, pc, #492	; (adr r3, 80054b8 <__ieee754_pow+0x6f8>)
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	f7fa ff81 	bl	80001d4 <__adddf3>
 80052d2:	4622      	mov	r2, r4
 80052d4:	462b      	mov	r3, r5
 80052d6:	f7fb f933 	bl	8000540 <__aeabi_dmul>
 80052da:	a379      	add	r3, pc, #484	; (adr r3, 80054c0 <__ieee754_pow+0x700>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	f7fa ff78 	bl	80001d4 <__adddf3>
 80052e4:	4622      	mov	r2, r4
 80052e6:	462b      	mov	r3, r5
 80052e8:	f7fb f92a 	bl	8000540 <__aeabi_dmul>
 80052ec:	a376      	add	r3, pc, #472	; (adr r3, 80054c8 <__ieee754_pow+0x708>)
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f7fa ff6f 	bl	80001d4 <__adddf3>
 80052f6:	4622      	mov	r2, r4
 80052f8:	462b      	mov	r3, r5
 80052fa:	f7fb f921 	bl	8000540 <__aeabi_dmul>
 80052fe:	a374      	add	r3, pc, #464	; (adr r3, 80054d0 <__ieee754_pow+0x710>)
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	f7fa ff66 	bl	80001d4 <__adddf3>
 8005308:	4622      	mov	r2, r4
 800530a:	462b      	mov	r3, r5
 800530c:	f7fb f918 	bl	8000540 <__aeabi_dmul>
 8005310:	a371      	add	r3, pc, #452	; (adr r3, 80054d8 <__ieee754_pow+0x718>)
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	f7fa ff5d 	bl	80001d4 <__adddf3>
 800531a:	4622      	mov	r2, r4
 800531c:	4606      	mov	r6, r0
 800531e:	460f      	mov	r7, r1
 8005320:	462b      	mov	r3, r5
 8005322:	4620      	mov	r0, r4
 8005324:	4629      	mov	r1, r5
 8005326:	f7fb f90b 	bl	8000540 <__aeabi_dmul>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4630      	mov	r0, r6
 8005330:	4639      	mov	r1, r7
 8005332:	f7fb f905 	bl	8000540 <__aeabi_dmul>
 8005336:	4642      	mov	r2, r8
 8005338:	4604      	mov	r4, r0
 800533a:	460d      	mov	r5, r1
 800533c:	464b      	mov	r3, r9
 800533e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005342:	f7fa ff47 	bl	80001d4 <__adddf3>
 8005346:	ec53 2b18 	vmov	r2, r3, d8
 800534a:	f7fb f8f9 	bl	8000540 <__aeabi_dmul>
 800534e:	4622      	mov	r2, r4
 8005350:	462b      	mov	r3, r5
 8005352:	f7fa ff3f 	bl	80001d4 <__adddf3>
 8005356:	4642      	mov	r2, r8
 8005358:	4682      	mov	sl, r0
 800535a:	468b      	mov	fp, r1
 800535c:	464b      	mov	r3, r9
 800535e:	4640      	mov	r0, r8
 8005360:	4649      	mov	r1, r9
 8005362:	f7fb f8ed 	bl	8000540 <__aeabi_dmul>
 8005366:	4b6c      	ldr	r3, [pc, #432]	; (8005518 <__ieee754_pow+0x758>)
 8005368:	2200      	movs	r2, #0
 800536a:	4606      	mov	r6, r0
 800536c:	460f      	mov	r7, r1
 800536e:	f7fa ff31 	bl	80001d4 <__adddf3>
 8005372:	4652      	mov	r2, sl
 8005374:	465b      	mov	r3, fp
 8005376:	f7fa ff2d 	bl	80001d4 <__adddf3>
 800537a:	9c04      	ldr	r4, [sp, #16]
 800537c:	460d      	mov	r5, r1
 800537e:	4622      	mov	r2, r4
 8005380:	460b      	mov	r3, r1
 8005382:	4640      	mov	r0, r8
 8005384:	4649      	mov	r1, r9
 8005386:	f7fb f8db 	bl	8000540 <__aeabi_dmul>
 800538a:	4b63      	ldr	r3, [pc, #396]	; (8005518 <__ieee754_pow+0x758>)
 800538c:	4680      	mov	r8, r0
 800538e:	4689      	mov	r9, r1
 8005390:	2200      	movs	r2, #0
 8005392:	4620      	mov	r0, r4
 8005394:	4629      	mov	r1, r5
 8005396:	f7fa ff1b 	bl	80001d0 <__aeabi_dsub>
 800539a:	4632      	mov	r2, r6
 800539c:	463b      	mov	r3, r7
 800539e:	f7fa ff17 	bl	80001d0 <__aeabi_dsub>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4650      	mov	r0, sl
 80053a8:	4659      	mov	r1, fp
 80053aa:	f7fa ff11 	bl	80001d0 <__aeabi_dsub>
 80053ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053b2:	f7fb f8c5 	bl	8000540 <__aeabi_dmul>
 80053b6:	4622      	mov	r2, r4
 80053b8:	4606      	mov	r6, r0
 80053ba:	460f      	mov	r7, r1
 80053bc:	462b      	mov	r3, r5
 80053be:	ec51 0b18 	vmov	r0, r1, d8
 80053c2:	f7fb f8bd 	bl	8000540 <__aeabi_dmul>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4630      	mov	r0, r6
 80053cc:	4639      	mov	r1, r7
 80053ce:	f7fa ff01 	bl	80001d4 <__adddf3>
 80053d2:	4606      	mov	r6, r0
 80053d4:	460f      	mov	r7, r1
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4640      	mov	r0, r8
 80053dc:	4649      	mov	r1, r9
 80053de:	f7fa fef9 	bl	80001d4 <__adddf3>
 80053e2:	9c04      	ldr	r4, [sp, #16]
 80053e4:	a33e      	add	r3, pc, #248	; (adr r3, 80054e0 <__ieee754_pow+0x720>)
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	4620      	mov	r0, r4
 80053ec:	460d      	mov	r5, r1
 80053ee:	f7fb f8a7 	bl	8000540 <__aeabi_dmul>
 80053f2:	4642      	mov	r2, r8
 80053f4:	ec41 0b18 	vmov	d8, r0, r1
 80053f8:	464b      	mov	r3, r9
 80053fa:	4620      	mov	r0, r4
 80053fc:	4629      	mov	r1, r5
 80053fe:	f7fa fee7 	bl	80001d0 <__aeabi_dsub>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4630      	mov	r0, r6
 8005408:	4639      	mov	r1, r7
 800540a:	f7fa fee1 	bl	80001d0 <__aeabi_dsub>
 800540e:	a336      	add	r3, pc, #216	; (adr r3, 80054e8 <__ieee754_pow+0x728>)
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f7fb f894 	bl	8000540 <__aeabi_dmul>
 8005418:	a335      	add	r3, pc, #212	; (adr r3, 80054f0 <__ieee754_pow+0x730>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	4606      	mov	r6, r0
 8005420:	460f      	mov	r7, r1
 8005422:	4620      	mov	r0, r4
 8005424:	4629      	mov	r1, r5
 8005426:	f7fb f88b 	bl	8000540 <__aeabi_dmul>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4630      	mov	r0, r6
 8005430:	4639      	mov	r1, r7
 8005432:	f7fa fecf 	bl	80001d4 <__adddf3>
 8005436:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005438:	4b38      	ldr	r3, [pc, #224]	; (800551c <__ieee754_pow+0x75c>)
 800543a:	4413      	add	r3, r2
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	f7fa fec8 	bl	80001d4 <__adddf3>
 8005444:	4682      	mov	sl, r0
 8005446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005448:	468b      	mov	fp, r1
 800544a:	f7fb f80f 	bl	800046c <__aeabi_i2d>
 800544e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005450:	4b33      	ldr	r3, [pc, #204]	; (8005520 <__ieee754_pow+0x760>)
 8005452:	4413      	add	r3, r2
 8005454:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005458:	4606      	mov	r6, r0
 800545a:	460f      	mov	r7, r1
 800545c:	4652      	mov	r2, sl
 800545e:	465b      	mov	r3, fp
 8005460:	ec51 0b18 	vmov	r0, r1, d8
 8005464:	f7fa feb6 	bl	80001d4 <__adddf3>
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	f7fa feb2 	bl	80001d4 <__adddf3>
 8005470:	4632      	mov	r2, r6
 8005472:	463b      	mov	r3, r7
 8005474:	f7fa feae 	bl	80001d4 <__adddf3>
 8005478:	9c04      	ldr	r4, [sp, #16]
 800547a:	4632      	mov	r2, r6
 800547c:	463b      	mov	r3, r7
 800547e:	4620      	mov	r0, r4
 8005480:	460d      	mov	r5, r1
 8005482:	f7fa fea5 	bl	80001d0 <__aeabi_dsub>
 8005486:	4642      	mov	r2, r8
 8005488:	464b      	mov	r3, r9
 800548a:	f7fa fea1 	bl	80001d0 <__aeabi_dsub>
 800548e:	ec53 2b18 	vmov	r2, r3, d8
 8005492:	f7fa fe9d 	bl	80001d0 <__aeabi_dsub>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4650      	mov	r0, sl
 800549c:	4659      	mov	r1, fp
 800549e:	e606      	b.n	80050ae <__ieee754_pow+0x2ee>
 80054a0:	2401      	movs	r4, #1
 80054a2:	e6a0      	b.n	80051e6 <__ieee754_pow+0x426>
 80054a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80054f8 <__ieee754_pow+0x738>
 80054a8:	e60d      	b.n	80050c6 <__ieee754_pow+0x306>
 80054aa:	bf00      	nop
 80054ac:	f3af 8000 	nop.w
 80054b0:	4a454eef 	.word	0x4a454eef
 80054b4:	3fca7e28 	.word	0x3fca7e28
 80054b8:	93c9db65 	.word	0x93c9db65
 80054bc:	3fcd864a 	.word	0x3fcd864a
 80054c0:	a91d4101 	.word	0xa91d4101
 80054c4:	3fd17460 	.word	0x3fd17460
 80054c8:	518f264d 	.word	0x518f264d
 80054cc:	3fd55555 	.word	0x3fd55555
 80054d0:	db6fabff 	.word	0xdb6fabff
 80054d4:	3fdb6db6 	.word	0x3fdb6db6
 80054d8:	33333303 	.word	0x33333303
 80054dc:	3fe33333 	.word	0x3fe33333
 80054e0:	e0000000 	.word	0xe0000000
 80054e4:	3feec709 	.word	0x3feec709
 80054e8:	dc3a03fd 	.word	0xdc3a03fd
 80054ec:	3feec709 	.word	0x3feec709
 80054f0:	145b01f5 	.word	0x145b01f5
 80054f4:	be3e2fe0 	.word	0xbe3e2fe0
 80054f8:	00000000 	.word	0x00000000
 80054fc:	3ff00000 	.word	0x3ff00000
 8005500:	7ff00000 	.word	0x7ff00000
 8005504:	43400000 	.word	0x43400000
 8005508:	0003988e 	.word	0x0003988e
 800550c:	000bb679 	.word	0x000bb679
 8005510:	08005e40 	.word	0x08005e40
 8005514:	3ff00000 	.word	0x3ff00000
 8005518:	40080000 	.word	0x40080000
 800551c:	08005e60 	.word	0x08005e60
 8005520:	08005e50 	.word	0x08005e50
 8005524:	a3b5      	add	r3, pc, #724	; (adr r3, 80057fc <__ieee754_pow+0xa3c>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	4640      	mov	r0, r8
 800552c:	4649      	mov	r1, r9
 800552e:	f7fa fe51 	bl	80001d4 <__adddf3>
 8005532:	4622      	mov	r2, r4
 8005534:	ec41 0b1a 	vmov	d10, r0, r1
 8005538:	462b      	mov	r3, r5
 800553a:	4630      	mov	r0, r6
 800553c:	4639      	mov	r1, r7
 800553e:	f7fa fe47 	bl	80001d0 <__aeabi_dsub>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	ec51 0b1a 	vmov	r0, r1, d10
 800554a:	f7fb fa89 	bl	8000a60 <__aeabi_dcmpgt>
 800554e:	2800      	cmp	r0, #0
 8005550:	f47f adf8 	bne.w	8005144 <__ieee754_pow+0x384>
 8005554:	4aa4      	ldr	r2, [pc, #656]	; (80057e8 <__ieee754_pow+0xa28>)
 8005556:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800555a:	4293      	cmp	r3, r2
 800555c:	f340 810b 	ble.w	8005776 <__ieee754_pow+0x9b6>
 8005560:	151b      	asrs	r3, r3, #20
 8005562:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005566:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800556a:	fa4a f303 	asr.w	r3, sl, r3
 800556e:	445b      	add	r3, fp
 8005570:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005574:	4e9d      	ldr	r6, [pc, #628]	; (80057ec <__ieee754_pow+0xa2c>)
 8005576:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800557a:	4116      	asrs	r6, r2
 800557c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005580:	2000      	movs	r0, #0
 8005582:	ea23 0106 	bic.w	r1, r3, r6
 8005586:	f1c2 0214 	rsb	r2, r2, #20
 800558a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800558e:	fa4a fa02 	asr.w	sl, sl, r2
 8005592:	f1bb 0f00 	cmp.w	fp, #0
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4620      	mov	r0, r4
 800559c:	4629      	mov	r1, r5
 800559e:	bfb8      	it	lt
 80055a0:	f1ca 0a00 	rsblt	sl, sl, #0
 80055a4:	f7fa fe14 	bl	80001d0 <__aeabi_dsub>
 80055a8:	ec41 0b19 	vmov	d9, r0, r1
 80055ac:	4642      	mov	r2, r8
 80055ae:	464b      	mov	r3, r9
 80055b0:	ec51 0b19 	vmov	r0, r1, d9
 80055b4:	f7fa fe0e 	bl	80001d4 <__adddf3>
 80055b8:	2400      	movs	r4, #0
 80055ba:	a379      	add	r3, pc, #484	; (adr r3, 80057a0 <__ieee754_pow+0x9e0>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	4620      	mov	r0, r4
 80055c2:	460d      	mov	r5, r1
 80055c4:	f7fa ffbc 	bl	8000540 <__aeabi_dmul>
 80055c8:	ec53 2b19 	vmov	r2, r3, d9
 80055cc:	4606      	mov	r6, r0
 80055ce:	460f      	mov	r7, r1
 80055d0:	4620      	mov	r0, r4
 80055d2:	4629      	mov	r1, r5
 80055d4:	f7fa fdfc 	bl	80001d0 <__aeabi_dsub>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4640      	mov	r0, r8
 80055de:	4649      	mov	r1, r9
 80055e0:	f7fa fdf6 	bl	80001d0 <__aeabi_dsub>
 80055e4:	a370      	add	r3, pc, #448	; (adr r3, 80057a8 <__ieee754_pow+0x9e8>)
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	f7fa ffa9 	bl	8000540 <__aeabi_dmul>
 80055ee:	a370      	add	r3, pc, #448	; (adr r3, 80057b0 <__ieee754_pow+0x9f0>)
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	4680      	mov	r8, r0
 80055f6:	4689      	mov	r9, r1
 80055f8:	4620      	mov	r0, r4
 80055fa:	4629      	mov	r1, r5
 80055fc:	f7fa ffa0 	bl	8000540 <__aeabi_dmul>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4640      	mov	r0, r8
 8005606:	4649      	mov	r1, r9
 8005608:	f7fa fde4 	bl	80001d4 <__adddf3>
 800560c:	4604      	mov	r4, r0
 800560e:	460d      	mov	r5, r1
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4630      	mov	r0, r6
 8005616:	4639      	mov	r1, r7
 8005618:	f7fa fddc 	bl	80001d4 <__adddf3>
 800561c:	4632      	mov	r2, r6
 800561e:	463b      	mov	r3, r7
 8005620:	4680      	mov	r8, r0
 8005622:	4689      	mov	r9, r1
 8005624:	f7fa fdd4 	bl	80001d0 <__aeabi_dsub>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4620      	mov	r0, r4
 800562e:	4629      	mov	r1, r5
 8005630:	f7fa fdce 	bl	80001d0 <__aeabi_dsub>
 8005634:	4642      	mov	r2, r8
 8005636:	4606      	mov	r6, r0
 8005638:	460f      	mov	r7, r1
 800563a:	464b      	mov	r3, r9
 800563c:	4640      	mov	r0, r8
 800563e:	4649      	mov	r1, r9
 8005640:	f7fa ff7e 	bl	8000540 <__aeabi_dmul>
 8005644:	a35c      	add	r3, pc, #368	; (adr r3, 80057b8 <__ieee754_pow+0x9f8>)
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	4604      	mov	r4, r0
 800564c:	460d      	mov	r5, r1
 800564e:	f7fa ff77 	bl	8000540 <__aeabi_dmul>
 8005652:	a35b      	add	r3, pc, #364	; (adr r3, 80057c0 <__ieee754_pow+0xa00>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fa fdba 	bl	80001d0 <__aeabi_dsub>
 800565c:	4622      	mov	r2, r4
 800565e:	462b      	mov	r3, r5
 8005660:	f7fa ff6e 	bl	8000540 <__aeabi_dmul>
 8005664:	a358      	add	r3, pc, #352	; (adr r3, 80057c8 <__ieee754_pow+0xa08>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa fdb3 	bl	80001d4 <__adddf3>
 800566e:	4622      	mov	r2, r4
 8005670:	462b      	mov	r3, r5
 8005672:	f7fa ff65 	bl	8000540 <__aeabi_dmul>
 8005676:	a356      	add	r3, pc, #344	; (adr r3, 80057d0 <__ieee754_pow+0xa10>)
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f7fa fda8 	bl	80001d0 <__aeabi_dsub>
 8005680:	4622      	mov	r2, r4
 8005682:	462b      	mov	r3, r5
 8005684:	f7fa ff5c 	bl	8000540 <__aeabi_dmul>
 8005688:	a353      	add	r3, pc, #332	; (adr r3, 80057d8 <__ieee754_pow+0xa18>)
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f7fa fda1 	bl	80001d4 <__adddf3>
 8005692:	4622      	mov	r2, r4
 8005694:	462b      	mov	r3, r5
 8005696:	f7fa ff53 	bl	8000540 <__aeabi_dmul>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4640      	mov	r0, r8
 80056a0:	4649      	mov	r1, r9
 80056a2:	f7fa fd95 	bl	80001d0 <__aeabi_dsub>
 80056a6:	4604      	mov	r4, r0
 80056a8:	460d      	mov	r5, r1
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4640      	mov	r0, r8
 80056b0:	4649      	mov	r1, r9
 80056b2:	f7fa ff45 	bl	8000540 <__aeabi_dmul>
 80056b6:	2200      	movs	r2, #0
 80056b8:	ec41 0b19 	vmov	d9, r0, r1
 80056bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056c0:	4620      	mov	r0, r4
 80056c2:	4629      	mov	r1, r5
 80056c4:	f7fa fd84 	bl	80001d0 <__aeabi_dsub>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	ec51 0b19 	vmov	r0, r1, d9
 80056d0:	f7fb f860 	bl	8000794 <__aeabi_ddiv>
 80056d4:	4632      	mov	r2, r6
 80056d6:	4604      	mov	r4, r0
 80056d8:	460d      	mov	r5, r1
 80056da:	463b      	mov	r3, r7
 80056dc:	4640      	mov	r0, r8
 80056de:	4649      	mov	r1, r9
 80056e0:	f7fa ff2e 	bl	8000540 <__aeabi_dmul>
 80056e4:	4632      	mov	r2, r6
 80056e6:	463b      	mov	r3, r7
 80056e8:	f7fa fd74 	bl	80001d4 <__adddf3>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4620      	mov	r0, r4
 80056f2:	4629      	mov	r1, r5
 80056f4:	f7fa fd6c 	bl	80001d0 <__aeabi_dsub>
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	f7fa fd68 	bl	80001d0 <__aeabi_dsub>
 8005700:	460b      	mov	r3, r1
 8005702:	4602      	mov	r2, r0
 8005704:	493a      	ldr	r1, [pc, #232]	; (80057f0 <__ieee754_pow+0xa30>)
 8005706:	2000      	movs	r0, #0
 8005708:	f7fa fd62 	bl	80001d0 <__aeabi_dsub>
 800570c:	e9cd 0100 	strd	r0, r1, [sp]
 8005710:	9b01      	ldr	r3, [sp, #4]
 8005712:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800571a:	da2f      	bge.n	800577c <__ieee754_pow+0x9bc>
 800571c:	4650      	mov	r0, sl
 800571e:	ed9d 0b00 	vldr	d0, [sp]
 8005722:	f000 f9cd 	bl	8005ac0 <scalbn>
 8005726:	ec51 0b10 	vmov	r0, r1, d0
 800572a:	ec53 2b18 	vmov	r2, r3, d8
 800572e:	f7ff bbe0 	b.w	8004ef2 <__ieee754_pow+0x132>
 8005732:	4b30      	ldr	r3, [pc, #192]	; (80057f4 <__ieee754_pow+0xa34>)
 8005734:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005738:	429e      	cmp	r6, r3
 800573a:	f77f af0b 	ble.w	8005554 <__ieee754_pow+0x794>
 800573e:	4b2e      	ldr	r3, [pc, #184]	; (80057f8 <__ieee754_pow+0xa38>)
 8005740:	440b      	add	r3, r1
 8005742:	4303      	orrs	r3, r0
 8005744:	d00b      	beq.n	800575e <__ieee754_pow+0x99e>
 8005746:	a326      	add	r3, pc, #152	; (adr r3, 80057e0 <__ieee754_pow+0xa20>)
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	ec51 0b18 	vmov	r0, r1, d8
 8005750:	f7fa fef6 	bl	8000540 <__aeabi_dmul>
 8005754:	a322      	add	r3, pc, #136	; (adr r3, 80057e0 <__ieee754_pow+0xa20>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f7ff bbca 	b.w	8004ef2 <__ieee754_pow+0x132>
 800575e:	4622      	mov	r2, r4
 8005760:	462b      	mov	r3, r5
 8005762:	f7fa fd35 	bl	80001d0 <__aeabi_dsub>
 8005766:	4642      	mov	r2, r8
 8005768:	464b      	mov	r3, r9
 800576a:	f7fb f96f 	bl	8000a4c <__aeabi_dcmpge>
 800576e:	2800      	cmp	r0, #0
 8005770:	f43f aef0 	beq.w	8005554 <__ieee754_pow+0x794>
 8005774:	e7e7      	b.n	8005746 <__ieee754_pow+0x986>
 8005776:	f04f 0a00 	mov.w	sl, #0
 800577a:	e717      	b.n	80055ac <__ieee754_pow+0x7ec>
 800577c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005780:	4619      	mov	r1, r3
 8005782:	e7d2      	b.n	800572a <__ieee754_pow+0x96a>
 8005784:	491a      	ldr	r1, [pc, #104]	; (80057f0 <__ieee754_pow+0xa30>)
 8005786:	2000      	movs	r0, #0
 8005788:	f7ff bb9e 	b.w	8004ec8 <__ieee754_pow+0x108>
 800578c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005790:	f7ff bb9a 	b.w	8004ec8 <__ieee754_pow+0x108>
 8005794:	9000      	str	r0, [sp, #0]
 8005796:	f7ff bb76 	b.w	8004e86 <__ieee754_pow+0xc6>
 800579a:	2100      	movs	r1, #0
 800579c:	f7ff bb60 	b.w	8004e60 <__ieee754_pow+0xa0>
 80057a0:	00000000 	.word	0x00000000
 80057a4:	3fe62e43 	.word	0x3fe62e43
 80057a8:	fefa39ef 	.word	0xfefa39ef
 80057ac:	3fe62e42 	.word	0x3fe62e42
 80057b0:	0ca86c39 	.word	0x0ca86c39
 80057b4:	be205c61 	.word	0xbe205c61
 80057b8:	72bea4d0 	.word	0x72bea4d0
 80057bc:	3e663769 	.word	0x3e663769
 80057c0:	c5d26bf1 	.word	0xc5d26bf1
 80057c4:	3ebbbd41 	.word	0x3ebbbd41
 80057c8:	af25de2c 	.word	0xaf25de2c
 80057cc:	3f11566a 	.word	0x3f11566a
 80057d0:	16bebd93 	.word	0x16bebd93
 80057d4:	3f66c16c 	.word	0x3f66c16c
 80057d8:	5555553e 	.word	0x5555553e
 80057dc:	3fc55555 	.word	0x3fc55555
 80057e0:	c2f8f359 	.word	0xc2f8f359
 80057e4:	01a56e1f 	.word	0x01a56e1f
 80057e8:	3fe00000 	.word	0x3fe00000
 80057ec:	000fffff 	.word	0x000fffff
 80057f0:	3ff00000 	.word	0x3ff00000
 80057f4:	4090cbff 	.word	0x4090cbff
 80057f8:	3f6f3400 	.word	0x3f6f3400
 80057fc:	652b82fe 	.word	0x652b82fe
 8005800:	3c971547 	.word	0x3c971547

08005804 <__ieee754_sqrt>:
 8005804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005808:	ec55 4b10 	vmov	r4, r5, d0
 800580c:	4e56      	ldr	r6, [pc, #344]	; (8005968 <__ieee754_sqrt+0x164>)
 800580e:	43ae      	bics	r6, r5
 8005810:	ee10 0a10 	vmov	r0, s0
 8005814:	ee10 3a10 	vmov	r3, s0
 8005818:	4629      	mov	r1, r5
 800581a:	462a      	mov	r2, r5
 800581c:	d110      	bne.n	8005840 <__ieee754_sqrt+0x3c>
 800581e:	ee10 2a10 	vmov	r2, s0
 8005822:	462b      	mov	r3, r5
 8005824:	f7fa fe8c 	bl	8000540 <__aeabi_dmul>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4620      	mov	r0, r4
 800582e:	4629      	mov	r1, r5
 8005830:	f7fa fcd0 	bl	80001d4 <__adddf3>
 8005834:	4604      	mov	r4, r0
 8005836:	460d      	mov	r5, r1
 8005838:	ec45 4b10 	vmov	d0, r4, r5
 800583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005840:	2d00      	cmp	r5, #0
 8005842:	dc10      	bgt.n	8005866 <__ieee754_sqrt+0x62>
 8005844:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005848:	4330      	orrs	r0, r6
 800584a:	d0f5      	beq.n	8005838 <__ieee754_sqrt+0x34>
 800584c:	b15d      	cbz	r5, 8005866 <__ieee754_sqrt+0x62>
 800584e:	ee10 2a10 	vmov	r2, s0
 8005852:	462b      	mov	r3, r5
 8005854:	ee10 0a10 	vmov	r0, s0
 8005858:	f7fa fcba 	bl	80001d0 <__aeabi_dsub>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	f7fa ff98 	bl	8000794 <__aeabi_ddiv>
 8005864:	e7e6      	b.n	8005834 <__ieee754_sqrt+0x30>
 8005866:	1509      	asrs	r1, r1, #20
 8005868:	d076      	beq.n	8005958 <__ieee754_sqrt+0x154>
 800586a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800586e:	07ce      	lsls	r6, r1, #31
 8005870:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8005874:	bf5e      	ittt	pl
 8005876:	0fda      	lsrpl	r2, r3, #31
 8005878:	005b      	lslpl	r3, r3, #1
 800587a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800587e:	0fda      	lsrs	r2, r3, #31
 8005880:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8005884:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005888:	2000      	movs	r0, #0
 800588a:	106d      	asrs	r5, r5, #1
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	f04f 0e16 	mov.w	lr, #22
 8005892:	4684      	mov	ip, r0
 8005894:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005898:	eb0c 0401 	add.w	r4, ip, r1
 800589c:	4294      	cmp	r4, r2
 800589e:	bfde      	ittt	le
 80058a0:	1b12      	suble	r2, r2, r4
 80058a2:	eb04 0c01 	addle.w	ip, r4, r1
 80058a6:	1840      	addle	r0, r0, r1
 80058a8:	0052      	lsls	r2, r2, #1
 80058aa:	f1be 0e01 	subs.w	lr, lr, #1
 80058ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80058b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80058b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80058ba:	d1ed      	bne.n	8005898 <__ieee754_sqrt+0x94>
 80058bc:	4671      	mov	r1, lr
 80058be:	2720      	movs	r7, #32
 80058c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80058c4:	4562      	cmp	r2, ip
 80058c6:	eb04 060e 	add.w	r6, r4, lr
 80058ca:	dc02      	bgt.n	80058d2 <__ieee754_sqrt+0xce>
 80058cc:	d113      	bne.n	80058f6 <__ieee754_sqrt+0xf2>
 80058ce:	429e      	cmp	r6, r3
 80058d0:	d811      	bhi.n	80058f6 <__ieee754_sqrt+0xf2>
 80058d2:	2e00      	cmp	r6, #0
 80058d4:	eb06 0e04 	add.w	lr, r6, r4
 80058d8:	da43      	bge.n	8005962 <__ieee754_sqrt+0x15e>
 80058da:	f1be 0f00 	cmp.w	lr, #0
 80058de:	db40      	blt.n	8005962 <__ieee754_sqrt+0x15e>
 80058e0:	f10c 0801 	add.w	r8, ip, #1
 80058e4:	eba2 020c 	sub.w	r2, r2, ip
 80058e8:	429e      	cmp	r6, r3
 80058ea:	bf88      	it	hi
 80058ec:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80058f0:	1b9b      	subs	r3, r3, r6
 80058f2:	4421      	add	r1, r4
 80058f4:	46c4      	mov	ip, r8
 80058f6:	0052      	lsls	r2, r2, #1
 80058f8:	3f01      	subs	r7, #1
 80058fa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80058fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005902:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005906:	d1dd      	bne.n	80058c4 <__ieee754_sqrt+0xc0>
 8005908:	4313      	orrs	r3, r2
 800590a:	d006      	beq.n	800591a <__ieee754_sqrt+0x116>
 800590c:	1c4c      	adds	r4, r1, #1
 800590e:	bf13      	iteet	ne
 8005910:	3101      	addne	r1, #1
 8005912:	3001      	addeq	r0, #1
 8005914:	4639      	moveq	r1, r7
 8005916:	f021 0101 	bicne.w	r1, r1, #1
 800591a:	1043      	asrs	r3, r0, #1
 800591c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005920:	0849      	lsrs	r1, r1, #1
 8005922:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005926:	07c2      	lsls	r2, r0, #31
 8005928:	bf48      	it	mi
 800592a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800592e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8005932:	460c      	mov	r4, r1
 8005934:	463d      	mov	r5, r7
 8005936:	e77f      	b.n	8005838 <__ieee754_sqrt+0x34>
 8005938:	0ada      	lsrs	r2, r3, #11
 800593a:	3815      	subs	r0, #21
 800593c:	055b      	lsls	r3, r3, #21
 800593e:	2a00      	cmp	r2, #0
 8005940:	d0fa      	beq.n	8005938 <__ieee754_sqrt+0x134>
 8005942:	02d7      	lsls	r7, r2, #11
 8005944:	d50a      	bpl.n	800595c <__ieee754_sqrt+0x158>
 8005946:	f1c1 0420 	rsb	r4, r1, #32
 800594a:	fa23 f404 	lsr.w	r4, r3, r4
 800594e:	1e4d      	subs	r5, r1, #1
 8005950:	408b      	lsls	r3, r1
 8005952:	4322      	orrs	r2, r4
 8005954:	1b41      	subs	r1, r0, r5
 8005956:	e788      	b.n	800586a <__ieee754_sqrt+0x66>
 8005958:	4608      	mov	r0, r1
 800595a:	e7f0      	b.n	800593e <__ieee754_sqrt+0x13a>
 800595c:	0052      	lsls	r2, r2, #1
 800595e:	3101      	adds	r1, #1
 8005960:	e7ef      	b.n	8005942 <__ieee754_sqrt+0x13e>
 8005962:	46e0      	mov	r8, ip
 8005964:	e7be      	b.n	80058e4 <__ieee754_sqrt+0xe0>
 8005966:	bf00      	nop
 8005968:	7ff00000 	.word	0x7ff00000

0800596c <fabs>:
 800596c:	ec51 0b10 	vmov	r0, r1, d0
 8005970:	ee10 2a10 	vmov	r2, s0
 8005974:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005978:	ec43 2b10 	vmov	d0, r2, r3
 800597c:	4770      	bx	lr

0800597e <finite>:
 800597e:	b082      	sub	sp, #8
 8005980:	ed8d 0b00 	vstr	d0, [sp]
 8005984:	9801      	ldr	r0, [sp, #4]
 8005986:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800598a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800598e:	0fc0      	lsrs	r0, r0, #31
 8005990:	b002      	add	sp, #8
 8005992:	4770      	bx	lr
 8005994:	0000      	movs	r0, r0
	...

08005998 <nan>:
 8005998:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80059a0 <nan+0x8>
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	00000000 	.word	0x00000000
 80059a4:	7ff80000 	.word	0x7ff80000

080059a8 <rint>:
 80059a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059aa:	ec51 0b10 	vmov	r0, r1, d0
 80059ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80059b2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80059b6:	2e13      	cmp	r6, #19
 80059b8:	ee10 4a10 	vmov	r4, s0
 80059bc:	460b      	mov	r3, r1
 80059be:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80059c2:	dc58      	bgt.n	8005a76 <rint+0xce>
 80059c4:	2e00      	cmp	r6, #0
 80059c6:	da2b      	bge.n	8005a20 <rint+0x78>
 80059c8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80059cc:	4302      	orrs	r2, r0
 80059ce:	d023      	beq.n	8005a18 <rint+0x70>
 80059d0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80059d4:	4302      	orrs	r2, r0
 80059d6:	4254      	negs	r4, r2
 80059d8:	4314      	orrs	r4, r2
 80059da:	0c4b      	lsrs	r3, r1, #17
 80059dc:	0b24      	lsrs	r4, r4, #12
 80059de:	045b      	lsls	r3, r3, #17
 80059e0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80059e4:	ea44 0103 	orr.w	r1, r4, r3
 80059e8:	4b32      	ldr	r3, [pc, #200]	; (8005ab4 <rint+0x10c>)
 80059ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80059ee:	e9d3 6700 	ldrd	r6, r7, [r3]
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4630      	mov	r0, r6
 80059f8:	4639      	mov	r1, r7
 80059fa:	f7fa fbeb 	bl	80001d4 <__adddf3>
 80059fe:	e9cd 0100 	strd	r0, r1, [sp]
 8005a02:	463b      	mov	r3, r7
 8005a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a08:	4632      	mov	r2, r6
 8005a0a:	f7fa fbe1 	bl	80001d0 <__aeabi_dsub>
 8005a0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a12:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005a16:	4639      	mov	r1, r7
 8005a18:	ec41 0b10 	vmov	d0, r0, r1
 8005a1c:	b003      	add	sp, #12
 8005a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a20:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <rint+0x110>)
 8005a22:	4132      	asrs	r2, r6
 8005a24:	ea01 0702 	and.w	r7, r1, r2
 8005a28:	4307      	orrs	r7, r0
 8005a2a:	d0f5      	beq.n	8005a18 <rint+0x70>
 8005a2c:	0851      	lsrs	r1, r2, #1
 8005a2e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8005a32:	4314      	orrs	r4, r2
 8005a34:	d00c      	beq.n	8005a50 <rint+0xa8>
 8005a36:	ea23 0201 	bic.w	r2, r3, r1
 8005a3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005a3e:	2e13      	cmp	r6, #19
 8005a40:	fa43 f606 	asr.w	r6, r3, r6
 8005a44:	bf0c      	ite	eq
 8005a46:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005a4a:	2400      	movne	r4, #0
 8005a4c:	ea42 0306 	orr.w	r3, r2, r6
 8005a50:	4918      	ldr	r1, [pc, #96]	; (8005ab4 <rint+0x10c>)
 8005a52:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005a56:	4622      	mov	r2, r4
 8005a58:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	4629      	mov	r1, r5
 8005a60:	f7fa fbb8 	bl	80001d4 <__adddf3>
 8005a64:	e9cd 0100 	strd	r0, r1, [sp]
 8005a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a6c:	4622      	mov	r2, r4
 8005a6e:	462b      	mov	r3, r5
 8005a70:	f7fa fbae 	bl	80001d0 <__aeabi_dsub>
 8005a74:	e7d0      	b.n	8005a18 <rint+0x70>
 8005a76:	2e33      	cmp	r6, #51	; 0x33
 8005a78:	dd07      	ble.n	8005a8a <rint+0xe2>
 8005a7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005a7e:	d1cb      	bne.n	8005a18 <rint+0x70>
 8005a80:	ee10 2a10 	vmov	r2, s0
 8005a84:	f7fa fba6 	bl	80001d4 <__adddf3>
 8005a88:	e7c6      	b.n	8005a18 <rint+0x70>
 8005a8a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005a8e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005a92:	40d6      	lsrs	r6, r2
 8005a94:	4230      	tst	r0, r6
 8005a96:	d0bf      	beq.n	8005a18 <rint+0x70>
 8005a98:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8005a9c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8005aa0:	bf1f      	itttt	ne
 8005aa2:	ea24 0101 	bicne.w	r1, r4, r1
 8005aa6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005aaa:	fa44 f202 	asrne.w	r2, r4, r2
 8005aae:	ea41 0402 	orrne.w	r4, r1, r2
 8005ab2:	e7cd      	b.n	8005a50 <rint+0xa8>
 8005ab4:	08005e70 	.word	0x08005e70
 8005ab8:	000fffff 	.word	0x000fffff
 8005abc:	00000000 	.word	0x00000000

08005ac0 <scalbn>:
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	ec55 4b10 	vmov	r4, r5, d0
 8005ac6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005aca:	4606      	mov	r6, r0
 8005acc:	462b      	mov	r3, r5
 8005ace:	b99a      	cbnz	r2, 8005af8 <scalbn+0x38>
 8005ad0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005ad4:	4323      	orrs	r3, r4
 8005ad6:	d036      	beq.n	8005b46 <scalbn+0x86>
 8005ad8:	4b39      	ldr	r3, [pc, #228]	; (8005bc0 <scalbn+0x100>)
 8005ada:	4629      	mov	r1, r5
 8005adc:	ee10 0a10 	vmov	r0, s0
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f7fa fd2d 	bl	8000540 <__aeabi_dmul>
 8005ae6:	4b37      	ldr	r3, [pc, #220]	; (8005bc4 <scalbn+0x104>)
 8005ae8:	429e      	cmp	r6, r3
 8005aea:	4604      	mov	r4, r0
 8005aec:	460d      	mov	r5, r1
 8005aee:	da10      	bge.n	8005b12 <scalbn+0x52>
 8005af0:	a32b      	add	r3, pc, #172	; (adr r3, 8005ba0 <scalbn+0xe0>)
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	e03a      	b.n	8005b6e <scalbn+0xae>
 8005af8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005afc:	428a      	cmp	r2, r1
 8005afe:	d10c      	bne.n	8005b1a <scalbn+0x5a>
 8005b00:	ee10 2a10 	vmov	r2, s0
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fa fb64 	bl	80001d4 <__adddf3>
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	460d      	mov	r5, r1
 8005b10:	e019      	b.n	8005b46 <scalbn+0x86>
 8005b12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b16:	460b      	mov	r3, r1
 8005b18:	3a36      	subs	r2, #54	; 0x36
 8005b1a:	4432      	add	r2, r6
 8005b1c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005b20:	428a      	cmp	r2, r1
 8005b22:	dd08      	ble.n	8005b36 <scalbn+0x76>
 8005b24:	2d00      	cmp	r5, #0
 8005b26:	a120      	add	r1, pc, #128	; (adr r1, 8005ba8 <scalbn+0xe8>)
 8005b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b2c:	da1c      	bge.n	8005b68 <scalbn+0xa8>
 8005b2e:	a120      	add	r1, pc, #128	; (adr r1, 8005bb0 <scalbn+0xf0>)
 8005b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b34:	e018      	b.n	8005b68 <scalbn+0xa8>
 8005b36:	2a00      	cmp	r2, #0
 8005b38:	dd08      	ble.n	8005b4c <scalbn+0x8c>
 8005b3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b46:	ec45 4b10 	vmov	d0, r4, r5
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005b50:	da19      	bge.n	8005b86 <scalbn+0xc6>
 8005b52:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005b56:	429e      	cmp	r6, r3
 8005b58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005b5c:	dd0a      	ble.n	8005b74 <scalbn+0xb4>
 8005b5e:	a112      	add	r1, pc, #72	; (adr r1, 8005ba8 <scalbn+0xe8>)
 8005b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e2      	bne.n	8005b2e <scalbn+0x6e>
 8005b68:	a30f      	add	r3, pc, #60	; (adr r3, 8005ba8 <scalbn+0xe8>)
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f7fa fce7 	bl	8000540 <__aeabi_dmul>
 8005b72:	e7cb      	b.n	8005b0c <scalbn+0x4c>
 8005b74:	a10a      	add	r1, pc, #40	; (adr r1, 8005ba0 <scalbn+0xe0>)
 8005b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0b8      	beq.n	8005af0 <scalbn+0x30>
 8005b7e:	a10e      	add	r1, pc, #56	; (adr r1, 8005bb8 <scalbn+0xf8>)
 8005b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b84:	e7b4      	b.n	8005af0 <scalbn+0x30>
 8005b86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b8a:	3236      	adds	r2, #54	; 0x36
 8005b8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005b94:	4620      	mov	r0, r4
 8005b96:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <scalbn+0x108>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	e7e8      	b.n	8005b6e <scalbn+0xae>
 8005b9c:	f3af 8000 	nop.w
 8005ba0:	c2f8f359 	.word	0xc2f8f359
 8005ba4:	01a56e1f 	.word	0x01a56e1f
 8005ba8:	8800759c 	.word	0x8800759c
 8005bac:	7e37e43c 	.word	0x7e37e43c
 8005bb0:	8800759c 	.word	0x8800759c
 8005bb4:	fe37e43c 	.word	0xfe37e43c
 8005bb8:	c2f8f359 	.word	0xc2f8f359
 8005bbc:	81a56e1f 	.word	0x81a56e1f
 8005bc0:	43500000 	.word	0x43500000
 8005bc4:	ffff3cb0 	.word	0xffff3cb0
 8005bc8:	3c900000 	.word	0x3c900000

08005bcc <__errno>:
 8005bcc:	4b01      	ldr	r3, [pc, #4]	; (8005bd4 <__errno+0x8>)
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000030 	.word	0x20000030

08005bd8 <_init>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr

08005be4 <_fini>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr
