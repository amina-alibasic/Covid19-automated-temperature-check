
full_pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006134  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080062c0  080062c0  000162c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f8  080064f8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006500  08006500  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006504  08006504  00016504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000088  08006590  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08006590  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8f0  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c92  00000000  00000000  0002c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002e640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a22  00000000  00000000  0002fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc00  00000000  00000000  0005272a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d77c6  00000000  00000000  0005f32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00136af0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a8  00000000  00000000  00136b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080062a4 	.word	0x080062a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	080062a4 	.word	0x080062a4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <main>:
  	  	  "Da li ste bili u kontaktu s nekim ko je bio pozitivan na Covid-19?"};
char* warning = "Molimo Vas da posjetite Covid ambulantu.";


int main(void)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b094      	sub	sp, #80	; 0x50
 8000e3c:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f001 fc39 	bl	80026b4 <HAL_Init>
  SystemClock_Config();
 8000e42:	f000 f9d7 	bl	80011f4 <SystemClock_Config>


  /* Initialize all configured peripherals */
  initUSART2(921600);
 8000e46:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 8000e4a:	f001 f993 	bl	8002174 <initUSART2>
  MX_GPIO_Init();
 8000e4e:	f000 fb69 	bl	8001524 <MX_GPIO_Init>
  MX_TIM9_Init();
 8000e52:	f000 faa1 	bl	8001398 <MX_TIM9_Init>
  MX_TIM12_Init();
 8000e56:	f000 fb01 	bl	800145c <MX_TIM12_Init>
  MX_USART2_UART_Init();
 8000e5a:	f000 fb39 	bl	80014d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e5e:	f000 fa31 	bl	80012c4 <MX_ADC1_Init>


  HAL_TIM_Base_Start(&htim12); //Initialize stm32 timer for DC motor
 8000e62:	486b      	ldr	r0, [pc, #428]	; (8001010 <main+0x1d8>)
 8000e64:	f003 f812 	bl	8003e8c <HAL_TIM_Base_Start>

  // HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);  //PB0 Start pwm  motor 100% duty cycle
   //__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 40);

  uint32_t numTicks = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint16_t raw;
  while(1){
  printUSART2("Dobrodosli.\n");
 8000e6c:	4869      	ldr	r0, [pc, #420]	; (8001014 <main+0x1dc>)
 8000e6e:	f001 f9ef 	bl	8002250 <printUSART2>
  printUSART2("Molimo Vas dodirnite senzor za mjerenje temperature");
 8000e72:	4869      	ldr	r0, [pc, #420]	; (8001018 <main+0x1e0>)
 8000e74:	f001 f9ec 	bl	8002250 <printUSART2>
  printUSART2(" i sacekajte da se Vasa temperatura izmjeri.\n");
 8000e78:	4868      	ldr	r0, [pc, #416]	; (800101c <main+0x1e4>)
 8000e7a:	f001 f9e9 	bl	8002250 <printUSART2>
  HAL_Delay(5000);
 8000e7e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e82:	f001 fc89 	bl	8002798 <HAL_Delay>
        raw = getADC();
 8000e86:	f000 fa6f 	bl	8001368 <getADC>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 	  	double v = raw * 3.3 / 4096;
 8000e90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fae9 	bl	800046c <__aeabi_i2d>
 8000e9a:	a353      	add	r3, pc, #332	; (adr r3, 8000fe8 <main+0x1b0>)
 8000e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea0:	f7ff fb4e 	bl	8000540 <__aeabi_dmul>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	4b5b      	ldr	r3, [pc, #364]	; (8001020 <main+0x1e8>)
 8000eb2:	f7ff fc6f 	bl	8000794 <__aeabi_ddiv>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 	  	double Rt = 10 * v / ( 3.3 - v );
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b58      	ldr	r3, [pc, #352]	; (8001024 <main+0x1ec>)
 8000ec4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000ec8:	f7ff fb3a 	bl	8000540 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4614      	mov	r4, r2
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000ed8:	a143      	add	r1, pc, #268	; (adr r1, 8000fe8 <main+0x1b0>)
 8000eda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ede:	f7ff f977 	bl	80001d0 <__aeabi_dsub>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	4629      	mov	r1, r5
 8000eea:	f7ff fc53 	bl	8000794 <__aeabi_ddiv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 	  	double temp = 1 / (log(Rt / 10) / 3950 + 1 / (273.15 + 25));
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <main+0x1ec>)
 8000efc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000f00:	f7ff fc48 	bl	8000794 <__aeabi_ddiv>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	ec43 2b17 	vmov	d7, r2, r3
 8000f0c:	eeb0 0a47 	vmov.f32	s0, s14
 8000f10:	eef0 0a67 	vmov.f32	s1, s15
 8000f14:	f004 f80c 	bl	8004f30 <log>
 8000f18:	ec51 0b10 	vmov	r0, r1, d0
 8000f1c:	a334      	add	r3, pc, #208	; (adr r3, 8000ff0 <main+0x1b8>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fc37 	bl	8000794 <__aeabi_ddiv>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	a332      	add	r3, pc, #200	; (adr r3, 8000ff8 <main+0x1c0>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff f94e 	bl	80001d4 <__adddf3>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	f04f 0000 	mov.w	r0, #0
 8000f40:	4939      	ldr	r1, [pc, #228]	; (8001028 <main+0x1f0>)
 8000f42:	f7ff fc27 	bl	8000794 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 	  	double tempc = temp - 273.15 - 2;
 8000f4e:	a32c      	add	r3, pc, #176	; (adr r3, 8001000 <main+0x1c8>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000f58:	f7ff f93a 	bl	80001d0 <__aeabi_dsub>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6c:	f7ff f930 	bl	80001d0 <__aeabi_dsub>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  	 // check if user has touched the thermistor
	  	 // no room temperature is over 30 and person's temperature is under 30
	  	 if(tempc > 30){
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	; (800102c <main+0x1f4>)
 8000f7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f82:	f7ff fd6d 	bl	8000a60 <__aeabi_dcmpgt>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <main+0x162>
	  	 	 printUSART2("Mjerenje ...\n");
 8000f8c:	4828      	ldr	r0, [pc, #160]	; (8001030 <main+0x1f8>)
 8000f8e:	f001 f95f 	bl	8002250 <printUSART2>
	  	 	 HAL_Delay(5000); // wait aprox. 5sec for sensor to measure the temperature
 8000f92:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f96:	f001 fbff 	bl	8002798 <HAL_Delay>
	  	 }
         char res[20];
	  	 ftoa(tempc, res, 1);
 8000f9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f9e:	f7ff fd7f 	bl	8000aa0 <__aeabi_d2f>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4618      	mov	r0, r3
 8000faa:	ee00 2a10 	vmov	s0, r2
 8000fae:	f000 fbbb 	bl	8001728 <ftoa>
	  	 printUSART2("Vasa temperatura iznosi %s\n", res);
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481f      	ldr	r0, [pc, #124]	; (8001034 <main+0x1fc>)
 8000fb8:	f001 f94a 	bl	8002250 <printUSART2>
	  	 if(tempc > 36.9) { yesAnswer(); return 0;}
 8000fbc:	a312      	add	r3, pc, #72	; (adr r3, 8001008 <main+0x1d0>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000fc6:	f7ff fd4b 	bl	8000a60 <__aeabi_dcmpgt>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <main+0x1a0>
 8000fd0:	f000 f8bc 	bl	800114c <yesAnswer>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e002      	b.n	8000fde <main+0x1a6>

	  	 outputQuestions();
 8000fd8:	f000 f82e 	bl	8001038 <outputQuestions>
  while(1){
 8000fdc:	e746      	b.n	8000e6c <main+0x34>
	  	 	 			ftoa(distance, dist, 1);
	  	 	 	  	    printUSART2("Distance: %s\r\n", dist);

	  	 	 			HAL_Delay(1000);

}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3750      	adds	r7, #80	; 0x50
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	66666666 	.word	0x66666666
 8000fec:	400a6666 	.word	0x400a6666
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40aedc00 	.word	0x40aedc00
 8000ff8:	dcb5db83 	.word	0xdcb5db83
 8000ffc:	3f6b79e1 	.word	0x3f6b79e1
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	33333333 	.word	0x33333333
 800100c:	40427333 	.word	0x40427333
 8001010:	200001e8 	.word	0x200001e8
 8001014:	080063d4 	.word	0x080063d4
 8001018:	080063e4 	.word	0x080063e4
 800101c:	08006418 	.word	0x08006418
 8001020:	40b00000 	.word	0x40b00000
 8001024:	40240000 	.word	0x40240000
 8001028:	3ff00000 	.word	0x3ff00000
 800102c:	403e0000 	.word	0x403e0000
 8001030:	08006448 	.word	0x08006448
 8001034:	08006458 	.word	0x08006458

08001038 <outputQuestions>:


void outputQuestions(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	while(1){
	// first question
	printUSART2("%s\n", nextQuestion());
 800103c:	f000 f872 	bl	8001124 <nextQuestion>
 8001040:	4603      	mov	r3, r0
 8001042:	4619      	mov	r1, r3
 8001044:	4834      	ldr	r0, [pc, #208]	; (8001118 <outputQuestions+0xe0>)
 8001046:	f001 f903 	bl	8002250 <printUSART2>

	// check for YES button press
	if(checkYes()) { yesAnswer(); }
 800104a:	f000 f895 	bl	8001178 <checkYes>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <outputQuestions+0x22>
 8001054:	f000 f87a 	bl	800114c <yesAnswer>
 8001058:	e058      	b.n	800110c <outputQuestions+0xd4>

	// check for NO button press
	else if(checkNo()) {
 800105a:	f000 f8af 	bl	80011bc <checkNo>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d053      	beq.n	800110c <outputQuestions+0xd4>
		// second question
		printUSART2("%s\n", nextQuestion());
 8001064:	f000 f85e 	bl	8001124 <nextQuestion>
 8001068:	4603      	mov	r3, r0
 800106a:	4619      	mov	r1, r3
 800106c:	482a      	ldr	r0, [pc, #168]	; (8001118 <outputQuestions+0xe0>)
 800106e:	f001 f8ef 	bl	8002250 <printUSART2>

		// check for YES button press
		if(checkYes()) { yesAnswer(); }
 8001072:	f000 f881 	bl	8001178 <checkYes>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <outputQuestions+0x4a>
 800107c:	f000 f866 	bl	800114c <yesAnswer>
 8001080:	e044      	b.n	800110c <outputQuestions+0xd4>
		else if(checkNo()) {
 8001082:	f000 f89b 	bl	80011bc <checkNo>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d03f      	beq.n	800110c <outputQuestions+0xd4>
			// 3rd question
			printUSART2("%s\n", nextQuestion());
 800108c:	f000 f84a 	bl	8001124 <nextQuestion>
 8001090:	4603      	mov	r3, r0
 8001092:	4619      	mov	r1, r3
 8001094:	4820      	ldr	r0, [pc, #128]	; (8001118 <outputQuestions+0xe0>)
 8001096:	f001 f8db 	bl	8002250 <printUSART2>

		  	if(checkYes()) { yesAnswer(); }
 800109a:	f000 f86d 	bl	8001178 <checkYes>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <outputQuestions+0x72>
 80010a4:	f000 f852 	bl	800114c <yesAnswer>
 80010a8:	e030      	b.n	800110c <outputQuestions+0xd4>
		  	else if(checkNo()) {
 80010aa:	f000 f887 	bl	80011bc <checkNo>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d02b      	beq.n	800110c <outputQuestions+0xd4>
		  		// 4th question
		  		printUSART2("%s\n", nextQuestion());
 80010b4:	f000 f836 	bl	8001124 <nextQuestion>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4816      	ldr	r0, [pc, #88]	; (8001118 <outputQuestions+0xe0>)
 80010be:	f001 f8c7 	bl	8002250 <printUSART2>

		  		if(checkYes()) { yesAnswer(); }
 80010c2:	f000 f859 	bl	8001178 <checkYes>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <outputQuestions+0x9a>
 80010cc:	f000 f83e 	bl	800114c <yesAnswer>
 80010d0:	e01c      	b.n	800110c <outputQuestions+0xd4>
		  	 	else if(checkNo()) {
 80010d2:	f000 f873 	bl	80011bc <checkNo>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d017      	beq.n	800110c <outputQuestions+0xd4>
		  	 		// turn on green LED
		  	 	 	 HAL_GPIO_WritePin(GPIOA,green_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <outputQuestions+0xe4>)
 80010e4:	f002 f9e2 	bl	80034ac <HAL_GPIO_WritePin>
		  	 	 	 printUSART2("Mozete uci u prostoriju.");
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <outputQuestions+0xe8>)
 80010ea:	f001 f8b1 	bl	8002250 <printUSART2>
		  	 	 	 HAL_GPIO_WritePin(GPIOA,DC_in1_Pin,GPIO_PIN_SET);   // Start motor clockwise rotation
 80010ee:	2201      	movs	r2, #1
 80010f0:	2110      	movs	r1, #16
 80010f2:	480a      	ldr	r0, [pc, #40]	; (800111c <outputQuestions+0xe4>)
 80010f4:	f002 f9da 	bl	80034ac <HAL_GPIO_WritePin>
		  	 	 	 HAL_GPIO_WritePin(GPIOA,DC_in2_Pin,GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2120      	movs	r1, #32
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <outputQuestions+0xe4>)
 80010fe:	f002 f9d5 	bl	80034ac <HAL_GPIO_WritePin>
		  	 	 	 HAL_Delay(3000);
 8001102:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001106:	f001 fb47 	bl	8002798 <HAL_Delay>
		  	 	 	 return 0;
 800110a:	e003      	b.n	8001114 <outputQuestions+0xdc>
		  	 	 }
		  	}
		 }
	}
	HAL_Delay(10);
 800110c:	200a      	movs	r0, #10
 800110e:	f001 fb43 	bl	8002798 <HAL_Delay>
	printUSART2("%s\n", nextQuestion());
 8001112:	e793      	b.n	800103c <outputQuestions+0x4>
	}
}
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	08006474 	.word	0x08006474
 800111c:	40020000 	.word	0x40020000
 8001120:	08006478 	.word	0x08006478

08001124 <nextQuestion>:


char* nextQuestion(){
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	return questions[counter++];
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <nextQuestion+0x20>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	4905      	ldr	r1, [pc, #20]	; (8001144 <nextQuestion+0x20>)
 8001130:	600a      	str	r2, [r1, #0]
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <nextQuestion+0x24>)
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000158 	.word	0x20000158
 8001148:	20000000 	.word	0x20000000

0800114c <yesAnswer>:

void yesAnswer(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	// turn on red LED
	HAL_GPIO_WritePin(GPIOA,red_Pin,GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <yesAnswer+0x20>)
 8001158:	f002 f9a8 	bl	80034ac <HAL_GPIO_WritePin>
	printUSART2("%s", warning);
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <yesAnswer+0x24>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	4804      	ldr	r0, [pc, #16]	; (8001174 <yesAnswer+0x28>)
 8001164:	f001 f874 	bl	8002250 <printUSART2>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40020000 	.word	0x40020000
 8001170:	20000010 	.word	0x20000010
 8001174:	08006494 	.word	0x08006494

08001178 <checkYes>:

int checkYes(){
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	 state = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 800117c:	2101      	movs	r1, #1
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <checkYes+0x38>)
 8001180:	f002 f97c 	bl	800347c <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <checkYes+0x3c>)
 800118a:	601a      	str	r2, [r3, #0]
	 HAL_Delay(10);
 800118c:	200a      	movs	r0, #10
 800118e:	f001 fb03 	bl	8002798 <HAL_Delay>
	 if(state){
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <checkYes+0x3c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d006      	beq.n	80011a8 <checkYes+0x30>
		 // turn on red LED
		 HAL_GPIO_TogglePin(GPIOD,red_Pin);
 800119a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <checkYes+0x40>)
 80011a0:	f002 f99d 	bl	80034de <HAL_GPIO_TogglePin>
		 return 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <checkYes+0x32>
	 }
	 else return 0;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020000 	.word	0x40020000
 80011b4:	200000a4 	.word	0x200000a4
 80011b8:	40020c00 	.word	0x40020c00

080011bc <checkNo>:

int checkNo(){
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	  // check for NO button press
	  state = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 80011c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <checkNo+0x30>)
 80011c6:	f002 f959 	bl	800347c <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <checkNo+0x34>)
 80011d0:	601a      	str	r2, [r3, #0]
	  HAL_Delay(10);
 80011d2:	200a      	movs	r0, #10
 80011d4:	f001 fae0 	bl	8002798 <HAL_Delay>
	  if(state){ return 1;}
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <checkNo+0x34>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <checkNo+0x28>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <checkNo+0x2a>
	  else return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	200000a4 	.word	0x200000a4

080011f4 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2230      	movs	r2, #48	; 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f003 fe8c 	bl	8004f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <SystemClock_Config+0xc8>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a26      	ldr	r2, [pc, #152]	; (80012bc <SystemClock_Config+0xc8>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <SystemClock_Config+0xc8>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <SystemClock_Config+0xcc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <SystemClock_Config+0xcc>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <SystemClock_Config+0xcc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001254:	2301      	movs	r3, #1
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001258:	2310      	movs	r3, #16
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125c:	2302      	movs	r3, #2
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001260:	2300      	movs	r3, #0
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001264:	2308      	movs	r3, #8
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001268:	2354      	movs	r3, #84	; 0x54
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001270:	2304      	movs	r3, #4
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f002 f96f 	bl	800355c <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001284:	f000 f9d2 	bl	800162c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	2102      	movs	r1, #2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fbd1 	bl	8003a4c <HAL_RCC_ClockConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012b0:	f000 f9bc 	bl	800162c <Error_Handler>
  }
}
 80012b4:	bf00      	nop
 80012b6:	3750      	adds	r7, #80	; 0x50
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000

080012c4 <MX_ADC1_Init>:


static void MX_ADC1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <MX_ADC1_Init+0x98>)
 80012d8:	4a21      	ldr	r2, [pc, #132]	; (8001360 <MX_ADC1_Init+0x9c>)
 80012da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_ADC1_Init+0x98>)
 80012de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_ADC1_Init+0x98>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_ADC1_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_ADC1_Init+0x98>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_ADC1_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_ADC1_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_ADC1_Init+0x98>)
 8001306:	4a17      	ldr	r2, [pc, #92]	; (8001364 <MX_ADC1_Init+0xa0>)
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_ADC1_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_ADC1_Init+0x98>)
 8001312:	2201      	movs	r2, #1
 8001314:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_ADC1_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_ADC1_Init+0x98>)
 8001320:	2201      	movs	r2, #1
 8001322:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_ADC1_Init+0x98>)
 8001326:	f001 fa5b 	bl	80027e0 <HAL_ADC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001330:	f000 f97c 	bl	800162c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001334:	2301      	movs	r3, #1
 8001336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001338:	2301      	movs	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_ADC1_Init+0x98>)
 8001346:	f001 fbf9 	bl	8002b3c <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001350:	f000 f96c 	bl	800162c <Error_Handler>
  }
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200000ac 	.word	0x200000ac
 8001360:	40012000 	.word	0x40012000
 8001364:	0f000001 	.word	0x0f000001

08001368 <getADC>:


uint16_t getADC(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	HAL_ADC_Start (&hadc1);
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <getADC+0x2c>)
 800136e:	f001 fa7b 	bl	8002868 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1,10000) != HAL_OK);
 8001372:	bf00      	nop
 8001374:	f242 7110 	movw	r1, #10000	; 0x2710
 8001378:	4806      	ldr	r0, [pc, #24]	; (8001394 <getADC+0x2c>)
 800137a:	f001 fb47 	bl	8002a0c <HAL_ADC_PollForConversion>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f7      	bne.n	8001374 <getADC+0xc>
	// HAL_ADC_PollForConversion(&hadc1,10000);

	return HAL_ADC_GetValue(&hadc1);
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <getADC+0x2c>)
 8001386:	f001 fbcc 	bl	8002b22 <HAL_ADC_GetValue>
 800138a:	4603      	mov	r3, r0
 800138c:	b29b      	uxth	r3, r3
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200000ac 	.word	0x200000ac

08001398 <MX_TIM9_Init>:


static void MX_TIM9_Init(void) // for ultrasonic sensor
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
 80013ba:	615a      	str	r2, [r3, #20]
 80013bc:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <MX_TIM9_Init+0xbc>)
 80013c0:	4a25      	ldr	r2, [pc, #148]	; (8001458 <MX_TIM9_Init+0xc0>)
 80013c2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <MX_TIM9_Init+0xbc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <MX_TIM9_Init+0xbc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80013d0:	4b20      	ldr	r3, [pc, #128]	; (8001454 <MX_TIM9_Init+0xbc>)
 80013d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_TIM9_Init+0xbc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_TIM9_Init+0xbc>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80013e4:	481b      	ldr	r0, [pc, #108]	; (8001454 <MX_TIM9_Init+0xbc>)
 80013e6:	f002 fd01 	bl	8003dec <HAL_TIM_Base_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80013f0:	f000 f91c 	bl	800162c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	4619      	mov	r1, r3
 8001400:	4814      	ldr	r0, [pc, #80]	; (8001454 <MX_TIM9_Init+0xbc>)
 8001402:	f002 fec3 	bl	800418c <HAL_TIM_ConfigClockSource>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800140c:	f000 f90e 	bl	800162c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001410:	4810      	ldr	r0, [pc, #64]	; (8001454 <MX_TIM9_Init+0xbc>)
 8001412:	f002 fda3 	bl	8003f5c <HAL_TIM_PWM_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800141c:	f000 f906 	bl	800162c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001420:	2360      	movs	r3, #96	; 0x60
 8001422:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	4619      	mov	r1, r3
 8001436:	4807      	ldr	r0, [pc, #28]	; (8001454 <MX_TIM9_Init+0xbc>)
 8001438:	f002 fdea 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001442:	f000 f8f3 	bl	800162c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8001446:	4803      	ldr	r0, [pc, #12]	; (8001454 <MX_TIM9_Init+0xbc>)
 8001448:	f000 fdce 	bl	8001fe8 <HAL_TIM_MspPostInit>

}
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	; 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000015c 	.word	0x2000015c
 8001458:	40014000 	.word	0x40014000

0800145c <MX_TIM12_Init>:

static void MX_TIM12_Init(void) // for DC
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	463b      	mov	r3, r7
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_TIM12_Init+0x6c>)
 8001470:	4a16      	ldr	r2, [pc, #88]	; (80014cc <MX_TIM12_Init+0x70>)
 8001472:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_TIM12_Init+0x6c>)
 8001476:	2253      	movs	r2, #83	; 0x53
 8001478:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_TIM12_Init+0x6c>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_TIM12_Init+0x6c>)
 8001482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001486:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_TIM12_Init+0x6c>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_TIM12_Init+0x6c>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_TIM12_Init+0x6c>)
 8001496:	f002 fca9 	bl	8003dec <HAL_TIM_Base_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80014a0:	f000 f8c4 	bl	800162c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_TIM12_Init+0x6c>)
 80014b0:	f002 fe6c 	bl	800418c <HAL_TIM_ConfigClockSource>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80014ba:	f000 f8b7 	bl	800162c <Error_Handler>
  }

}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200001e8 	.word	0x200001e8
 80014cc:	40001800 	.word	0x40001800

080014d0 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_USART2_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_USART2_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART2_UART_Init+0x4c>)
 8001508:	f003 f9ee 	bl	80048e8 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 f88b 	bl	800162c <Error_Handler>
  }
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200001a4 	.word	0x200001a4
 8001520:	40004400 	.word	0x40004400

08001524 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b38      	ldr	r3, [pc, #224]	; (8001620 <MX_GPIO_Init+0xfc>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a37      	ldr	r2, [pc, #220]	; (8001620 <MX_GPIO_Init+0xfc>)
 8001544:	f043 0310 	orr.w	r3, r3, #16
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b35      	ldr	r3, [pc, #212]	; (8001620 <MX_GPIO_Init+0xfc>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b31      	ldr	r3, [pc, #196]	; (8001620 <MX_GPIO_Init+0xfc>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a30      	ldr	r2, [pc, #192]	; (8001620 <MX_GPIO_Init+0xfc>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <MX_GPIO_Init+0xfc>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <MX_GPIO_Init+0xfc>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a29      	ldr	r2, [pc, #164]	; (8001620 <MX_GPIO_Init+0xfc>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <MX_GPIO_Init+0xfc>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_in1_Pin|DC_in2_Pin|trigger_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001594:	4823      	ldr	r0, [pc, #140]	; (8001624 <MX_GPIO_Init+0x100>)
 8001596:	f001 ff89 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_Pin|red_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80015a0:	4821      	ldr	r0, [pc, #132]	; (8001628 <MX_GPIO_Init+0x104>)
 80015a2:	f001 ff83 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yes_button_Pin echo_Pin */
  GPIO_InitStruct.Pin = yes_button_Pin|echo_Pin;
 80015a6:	f240 2301 	movw	r3, #513	; 0x201
 80015aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	4619      	mov	r1, r3
 80015ba:	481a      	ldr	r0, [pc, #104]	; (8001624 <MX_GPIO_Init+0x100>)
 80015bc:	f001 fdc2 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_in1_Pin DC_in2_Pin trigger_Pin */
  GPIO_InitStruct.Pin = DC_in1_Pin|DC_in2_Pin|trigger_Pin;
 80015c0:	f44f 7398 	mov.w	r3, #304	; 0x130
 80015c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4619      	mov	r1, r3
 80015d8:	4812      	ldr	r0, [pc, #72]	; (8001624 <MX_GPIO_Init+0x100>)
 80015da:	f001 fdb3 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pin : no_button_Pin */
  GPIO_InitStruct.Pin = no_button_Pin;
 80015de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <MX_GPIO_Init+0x100>)
 80015f4:	f001 fda6 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_Pin red_Pin */
  GPIO_InitStruct.Pin = green_Pin|red_Pin;
 80015f8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80015fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_GPIO_Init+0x104>)
 8001612:	f001 fd97 	bl	8003144 <HAL_GPIO_Init>

}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000
 8001628:	40020c00 	.word	0x40020c00

0800162c <Error_Handler>:


void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001634:	e7fe      	b.n	8001634 <Error_Handler+0x8>

08001636 <reverse>:
  /* USER CODE END Error_Handler_Debug */
}


void reverse(char* str, int len)
{
 8001636:	b480      	push	{r7}
 8001638:	b087      	sub	sp, #28
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3b01      	subs	r3, #1
 8001648:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800164a:	e018      	b.n	800167e <reverse+0x48>
        temp = str[i];
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	441a      	add	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	440b      	add	r3, r1
 8001662:	7812      	ldrb	r2, [r2, #0]
 8001664:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
        i++;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
        j--;
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	3b01      	subs	r3, #1
 800167c:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	429a      	cmp	r2, r3
 8001684:	dbe2      	blt.n	800164c <reverse+0x16>
    }
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
    int i = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
    while (x) {
 80016a4:	e01d      	b.n	80016e2 <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <intToStr+0x8c>)
 80016aa:	fb83 1302 	smull	r1, r3, r3, r2
 80016ae:	1099      	asrs	r1, r3, #2
 80016b0:	17d3      	asrs	r3, r2, #31
 80016b2:	1ac9      	subs	r1, r1, r3
 80016b4:	460b      	mov	r3, r1
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	1ad1      	subs	r1, r2, r3
 80016be:	b2ca      	uxtb	r2, r1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	1c59      	adds	r1, r3, #1
 80016c4:	6179      	str	r1, [r7, #20]
 80016c6:	4619      	mov	r1, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	440b      	add	r3, r1
 80016cc:	3230      	adds	r2, #48	; 0x30
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4a12      	ldr	r2, [pc, #72]	; (8001720 <intToStr+0x8c>)
 80016d6:	fb82 1203 	smull	r1, r2, r2, r3
 80016da:	1092      	asrs	r2, r2, #2
 80016dc:	17db      	asrs	r3, r3, #31
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	60fb      	str	r3, [r7, #12]
    while (x) {
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1de      	bne.n	80016a6 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80016e8:	e007      	b.n	80016fa <intToStr+0x66>
        str[i++] = '0';
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	617a      	str	r2, [r7, #20]
 80016f0:	461a      	mov	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4413      	add	r3, r2
 80016f6:	2230      	movs	r2, #48	; 0x30
 80016f8:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	dbf3      	blt.n	80016ea <intToStr+0x56>

    reverse(str, i);
 8001702:	6979      	ldr	r1, [r7, #20]
 8001704:	68b8      	ldr	r0, [r7, #8]
 8001706:	f7ff ff96 	bl	8001636 <reverse>
    str[i] = '\0';
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	4413      	add	r3, r2
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
    return i;
 8001714:	697b      	ldr	r3, [r7, #20]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	66666667 	.word	0x66666667
 8001724:	00000000 	.word	0x00000000

08001728 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001732:	60b8      	str	r0, [r7, #8]
 8001734:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8001736:	edd7 7a03 	vldr	s15, [r7, #12]
 800173a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173e:	ee17 3a90 	vmov	r3, s15
 8001742:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001756:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	69f8      	ldr	r0, [r7, #28]
 8001760:	f7ff ff98 	bl	8001694 <intToStr>
 8001764:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d030      	beq.n	80017ce <ftoa+0xa6>
        res[i] = '.'; // add dot
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	4413      	add	r3, r2
 8001772:	222e      	movs	r2, #46	; 0x2e
 8001774:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8001776:	69b8      	ldr	r0, [r7, #24]
 8001778:	f7fe fe8a 	bl	8000490 <__aeabi_f2d>
 800177c:	4604      	mov	r4, r0
 800177e:	460d      	mov	r5, r1
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7fe fe73 	bl	800046c <__aeabi_i2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	ec43 2b11 	vmov	d1, r2, r3
 800178e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80017d8 <ftoa+0xb0>
 8001792:	f003 fc15 	bl	8004fc0 <pow>
 8001796:	ec53 2b10 	vmov	r2, r3, d0
 800179a:	4620      	mov	r0, r4
 800179c:	4629      	mov	r1, r5
 800179e:	f7fe fecf 	bl	8000540 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff f979 	bl	8000aa0 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80017b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	4413      	add	r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	4619      	mov	r1, r3
 80017c6:	ee17 0a90 	vmov	r0, s15
 80017ca:	f7ff ff63 	bl	8001694 <intToStr>
    }
}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bdb0      	pop	{r4, r5, r7, pc}
 80017d6:	bf00      	nop
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40240000 	.word	0x40240000

080017e0 <getDNumMISC>:
#include "misc.h"

void getDNumMISC(uint8_t *dnum, uint32_t num)
{ /// calculate decimal digits from integer number 'num' and store them as ASCII char in dnum array
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
    uint8_t k;
    uint32_t step = 1000000000;
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <getDNumMISC+0x70>)
 80017ec:	60bb      	str	r3, [r7, #8]

    for (k = 0; k < 10; k++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	e023      	b.n	800183c <getDNumMISC+0x5c>
    {                     // convert integer value in hex format to decimal format
        dnum[9 - k] = 48; // set char value
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	f1c3 0309 	rsb	r3, r3, #9
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	2230      	movs	r2, #48	; 0x30
 8001802:	701a      	strb	r2, [r3, #0]
        while (num >= step)
 8001804:	e00d      	b.n	8001822 <getDNumMISC+0x42>
        {
            dnum[9 - k]++;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	f1c3 0309 	rsb	r3, r3, #9
 800180c:	461a      	mov	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	3201      	adds	r2, #1
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	701a      	strb	r2, [r3, #0]
            num -= step;
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	603b      	str	r3, [r7, #0]
        while (num >= step)
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	429a      	cmp	r2, r3
 8001828:	d2ed      	bcs.n	8001806 <getDNumMISC+0x26>
        }
        step /= 10;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	4a09      	ldr	r2, [pc, #36]	; (8001854 <getDNumMISC+0x74>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	08db      	lsrs	r3, r3, #3
 8001834:	60bb      	str	r3, [r7, #8]
    for (k = 0; k < 10; k++)
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	3301      	adds	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b09      	cmp	r3, #9
 8001840:	d9d8      	bls.n	80017f4 <getDNumMISC+0x14>
    }
}
 8001842:	bf00      	nop
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	3b9aca00 	.word	0x3b9aca00
 8001854:	cccccccd 	.word	0xcccccccd

08001858 <putDNumMISC>:

void putDNumMISC(uint8_t *dnum, uint16_t *m, uint8_t *r_str)
{ /// add unsigned integer number digits into string r_str
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
    uint8_t k = 0, flag = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	75fb      	strb	r3, [r7, #23]
 8001868:	2300      	movs	r3, #0
 800186a:	75bb      	strb	r3, [r7, #22]

    for (k = 0; k < 10; k++)
 800186c:	2300      	movs	r3, #0
 800186e:	75fb      	strb	r3, [r7, #23]
 8001870:	e03a      	b.n	80018e8 <putDNumMISC+0x90>
    { // convert integer value in hex format to decimal format
        if (flag == 0)
 8001872:	7dbb      	ldrb	r3, [r7, #22]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d121      	bne.n	80018bc <putDNumMISC+0x64>
        {
            if ((dnum[9 - k] != 48) || (k == 9)) // include the 0x00000000 number
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	f1c3 0309 	rsb	r3, r3, #9
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b30      	cmp	r3, #48	; 0x30
 8001888:	d102      	bne.n	8001890 <putDNumMISC+0x38>
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	2b09      	cmp	r3, #9
 800188e:	d128      	bne.n	80018e2 <putDNumMISC+0x8a>
            {
                flag = 1;
 8001890:	2301      	movs	r3, #1
 8001892:	75bb      	strb	r3, [r7, #22]
                r_str[(*m)] = dnum[9 - k];
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	f1c3 0309 	rsb	r3, r3, #9
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	441a      	add	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	440b      	add	r3, r1
 80018aa:	7812      	ldrb	r2, [r2, #0]
 80018ac:	701a      	strb	r2, [r3, #0]
                (*m)++;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	e012      	b.n	80018e2 <putDNumMISC+0x8a>
            }
        }
        else
        {
            r_str[(*m)] = dnum[9 - k];
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	f1c3 0309 	rsb	r3, r3, #9
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	441a      	add	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	440b      	add	r3, r1
 80018d2:	7812      	ldrb	r2, [r2, #0]
 80018d4:	701a      	strb	r2, [r3, #0]
            (*m)++;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	801a      	strh	r2, [r3, #0]
    for (k = 0; k < 10; k++)
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	3301      	adds	r3, #1
 80018e6:	75fb      	strb	r3, [r7, #23]
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	2b09      	cmp	r3, #9
 80018ec:	d9c1      	bls.n	8001872 <putDNumMISC+0x1a>
        }
    }
     r_str[(*m)] = 0x00;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
}
 80018fc:	bf00      	nop
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <getStr4NumMISC>:

void getStr4NumMISC(uint16_t type, uint32_t  * num, uint8_t * rstr)
{   /// print text and one signed integer or float number
 8001908:	b580      	push	{r7, lr}
 800190a:	b090      	sub	sp, #64	; 0x40
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	81fb      	strh	r3, [r7, #14]
    // the 'num' number is not modified!
    int32_t * p_int32;
    uint8_t dnum[11];
    uint8_t k;
    uint16_t m = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	827b      	strh	r3, [r7, #18]
    rstr[0] = 0x00;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
    
    switch(type)
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001926:	f000 826f 	beq.w	8001e08 <getStr4NumMISC+0x500>
 800192a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800192e:	f300 82a4 	bgt.w	8001e7a <getStr4NumMISC+0x572>
 8001932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001936:	f000 822b 	beq.w	8001d90 <getStr4NumMISC+0x488>
 800193a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193e:	f300 829c 	bgt.w	8001e7a <getStr4NumMISC+0x572>
 8001942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001946:	f000 81e7 	beq.w	8001d18 <getStr4NumMISC+0x410>
 800194a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800194e:	f300 8294 	bgt.w	8001e7a <getStr4NumMISC+0x572>
 8001952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001956:	f000 8104 	beq.w	8001b62 <getStr4NumMISC+0x25a>
 800195a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800195e:	f300 828c 	bgt.w	8001e7a <getStr4NumMISC+0x572>
 8001962:	2b80      	cmp	r3, #128	; 0x80
 8001964:	f000 828d 	beq.w	8001e82 <getStr4NumMISC+0x57a>
 8001968:	2b80      	cmp	r3, #128	; 0x80
 800196a:	f300 8286 	bgt.w	8001e7a <getStr4NumMISC+0x572>
 800196e:	2b20      	cmp	r3, #32
 8001970:	dc4a      	bgt.n	8001a08 <getStr4NumMISC+0x100>
 8001972:	2b00      	cmp	r3, #0
 8001974:	f340 8281 	ble.w	8001e7a <getStr4NumMISC+0x572>
 8001978:	3b01      	subs	r3, #1
 800197a:	2b1f      	cmp	r3, #31
 800197c:	f200 827d 	bhi.w	8001e7a <getStr4NumMISC+0x572>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <getStr4NumMISC+0x80>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	08001a11 	.word	0x08001a11
 800198c:	08001a69 	.word	0x08001a69
 8001990:	08001e7b 	.word	0x08001e7b
 8001994:	08001ac1 	.word	0x08001ac1
 8001998:	08001e7b 	.word	0x08001e7b
 800199c:	08001e7b 	.word	0x08001e7b
 80019a0:	08001e7b 	.word	0x08001e7b
 80019a4:	08001b15 	.word	0x08001b15
 80019a8:	08001e7b 	.word	0x08001e7b
 80019ac:	08001e7b 	.word	0x08001e7b
 80019b0:	08001e7b 	.word	0x08001e7b
 80019b4:	08001e7b 	.word	0x08001e7b
 80019b8:	08001e7b 	.word	0x08001e7b
 80019bc:	08001e7b 	.word	0x08001e7b
 80019c0:	08001e7b 	.word	0x08001e7b
 80019c4:	08001b15 	.word	0x08001b15
 80019c8:	08001e7b 	.word	0x08001e7b
 80019cc:	08001e7b 	.word	0x08001e7b
 80019d0:	08001e7b 	.word	0x08001e7b
 80019d4:	08001e7b 	.word	0x08001e7b
 80019d8:	08001e7b 	.word	0x08001e7b
 80019dc:	08001e7b 	.word	0x08001e7b
 80019e0:	08001e7b 	.word	0x08001e7b
 80019e4:	08001e7b 	.word	0x08001e7b
 80019e8:	08001e7b 	.word	0x08001e7b
 80019ec:	08001e7b 	.word	0x08001e7b
 80019f0:	08001e7b 	.word	0x08001e7b
 80019f4:	08001e7b 	.word	0x08001e7b
 80019f8:	08001e7b 	.word	0x08001e7b
 80019fc:	08001e7b 	.word	0x08001e7b
 8001a00:	08001e7b 	.word	0x08001e7b
 8001a04:	08001b15 	.word	0x08001b15
 8001a08:	2b40      	cmp	r3, #64	; 0x40
 8001a0a:	f000 823c 	beq.w	8001e86 <getStr4NumMISC+0x57e>
 8001a0e:	e234      	b.n	8001e7a <getStr4NumMISC+0x572>
    {
		case(PRINT_ARG_TYPE_BINARY_BYTE):
		{// 8 bit binary representation
			for(k=0;k<8;k++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a16:	e01c      	b.n	8001a52 <getStr4NumMISC+0x14a>
			{
				if((*num) & 0x00000080)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <getStr4NumMISC+0x12a>
				{
					rstr[k] = '1';
 8001a24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	2231      	movs	r2, #49	; 0x31
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e005      	b.n	8001a3e <getStr4NumMISC+0x136>
				}
				else
				{
					rstr[k] = '0';
 8001a32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	2230      	movs	r2, #48	; 0x30
 8001a3c:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	005a      	lsls	r2, r3, #1
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	601a      	str	r2, [r3, #0]
			for(k=0;k<8;k++)
 8001a48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a56:	2b07      	cmp	r3, #7
 8001a58:	d9de      	bls.n	8001a18 <getStr4NumMISC+0x110>
			}
			rstr[k] = 0x00;
 8001a5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
			break;
 8001a66:	e20f      	b.n	8001e88 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_BINARY_HALFWORD):
		{// 16 bit binary representation
			for(k=0;k<16;k++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a6e:	e01c      	b.n	8001aaa <getStr4NumMISC+0x1a2>
			{
				if((*num) & 0x00008000)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <getStr4NumMISC+0x182>
				{
					rstr[k] = '1';
 8001a7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	2231      	movs	r2, #49	; 0x31
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e005      	b.n	8001a96 <getStr4NumMISC+0x18e>
				}
				else
				{
					rstr[k] = '0';
 8001a8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	2230      	movs	r2, #48	; 0x30
 8001a94:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	005a      	lsls	r2, r3, #1
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	601a      	str	r2, [r3, #0]
			for(k=0;k<16;k++)
 8001aa0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001aaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001aae:	2b0f      	cmp	r3, #15
 8001ab0:	d9de      	bls.n	8001a70 <getStr4NumMISC+0x168>
			}
			rstr[k] = 0x00;
 8001ab2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
			break;
 8001abe:	e1e3      	b.n	8001e88 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_BINARY_WORD):
		{// 32 bit binary representation
			for(k=0;k<32;k++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001ac6:	e01a      	b.n	8001afe <getStr4NumMISC+0x1f6>
			{
				if((*num) & 0x80000000)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da06      	bge.n	8001ade <getStr4NumMISC+0x1d6>
				{
					rstr[k] = '1';
 8001ad0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	2231      	movs	r2, #49	; 0x31
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e005      	b.n	8001aea <getStr4NumMISC+0x1e2>
				}
				else
				{
					rstr[k] = '0';
 8001ade:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	2230      	movs	r2, #48	; 0x30
 8001ae8:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	005a      	lsls	r2, r3, #1
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	601a      	str	r2, [r3, #0]
			for(k=0;k<32;k++)
 8001af4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001af8:	3301      	adds	r3, #1
 8001afa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001afe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b02:	2b1f      	cmp	r3, #31
 8001b04:	d9e0      	bls.n	8001ac8 <getStr4NumMISC+0x1c0>
			}
			rstr[k] = 0x00;
 8001b06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
			break;
 8001b12:	e1b9      	b.n	8001e88 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_DECIMAL_BYTE):
		case(PRINT_ARG_TYPE_DECIMAL_HALFWORD):
		case(PRINT_ARG_TYPE_DECIMAL_WORD):
		{// conver integer number into appropriate string
			p_int32 = (int32_t *)num;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	623b      	str	r3, [r7, #32]
            if (*p_int32 < 0)
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da0e      	bge.n	8001b3e <getStr4NumMISC+0x236>
            { // print the sign character
                rstr[m] = '-';
 8001b20:	8a7b      	ldrh	r3, [r7, #18]
 8001b22:	461a      	mov	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	222d      	movs	r2, #45	; 0x2d
 8001b2a:	701a      	strb	r2, [r3, #0]
                m++;
 8001b2c:	8a7b      	ldrh	r3, [r7, #18]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	827b      	strh	r3, [r7, #18]
                *p_int32 = (*p_int32)*(-1);
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	425a      	negs	r2, r3
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	601a      	str	r2, [r3, #0]
            }

            getDNumMISC(dnum, (uint32_t)(*p_int32));
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fe48 	bl	80017e0 <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001b50:	f107 0112 	add.w	r1, r7, #18
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fe7c 	bl	8001858 <putDNumMISC>
			break;
 8001b60:	e192      	b.n	8001e88 <getStr4NumMISC+0x580>
			//getDNumMISC(dnum, exp);
            //putDNumMISC(dnum, &m, rstr);
			
			
			float f_step;
			float f_num = *((float *)num); // convert pointer
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t sige = ' ';
 8001b68:	2320      	movs	r3, #32
 8001b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			uint16_t e_part;
			uint32_t d_part, i_part;
			
            if (f_num < 0)
 8001b6e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	d50f      	bpl.n	8001b9c <getStr4NumMISC+0x294>
            { // negative float number
                rstr[m] = '-';
 8001b7c:	8a7b      	ldrh	r3, [r7, #18]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4413      	add	r3, r2
 8001b84:	222d      	movs	r2, #45	; 0x2d
 8001b86:	701a      	strb	r2, [r3, #0]
                m++;
 8001b88:	8a7b      	ldrh	r3, [r7, #18]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	827b      	strh	r3, [r7, #18]
                f_num = (-1) * f_num;
 8001b90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b94:	eef1 7a67 	vneg.f32	s15, s15
 8001b98:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            }

            if (f_num < 1)
 8001b9c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ba0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bac:	d524      	bpl.n	8001bf8 <getStr4NumMISC+0x2f0>
            {
                sige = '-';
 8001bae:	232d      	movs	r3, #45	; 0x2d
 8001bb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                f_step = 0.1;
 8001bb4:	4bb8      	ldr	r3, [pc, #736]	; (8001e98 <getStr4NumMISC+0x590>)
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
                e_part = 1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num < f_step)
 8001bbc:	e012      	b.n	8001be4 <getStr4NumMISC+0x2dc>
                {
                    f_step = f_step * 0.1;
 8001bbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001bc0:	f7fe fc66 	bl	8000490 <__aeabi_f2d>
 8001bc4:	a3b2      	add	r3, pc, #712	; (adr r3, 8001e90 <getStr4NumMISC+0x588>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fcb9 	bl	8000540 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe ff63 	bl	8000aa0 <__aeabi_d2f>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
                    e_part++;
 8001bde:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001be0:	3301      	adds	r3, #1
 8001be2:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num < f_step)
 8001be4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001be8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	d4e3      	bmi.n	8001bbe <getStr4NumMISC+0x2b6>
 8001bf6:	e024      	b.n	8001c42 <getStr4NumMISC+0x33a>
                }
            }
            else
            {
                f_step = 1.0;
 8001bf8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001bfc:	63bb      	str	r3, [r7, #56]	; 0x38
                e_part = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num > f_step)
 8001c02:	e00a      	b.n	8001c1a <getStr4NumMISC+0x312>
                {
                    f_step = f_step * 10;
 8001c04:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c10:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    e_part++;
 8001c14:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001c16:	3301      	adds	r3, #1
 8001c18:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num > f_step)
 8001c1a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c1e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2a:	dceb      	bgt.n	8001c04 <getStr4NumMISC+0x2fc>
                }
                f_step = f_step / 10;
 8001c2c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c30:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c38:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                e_part--;
 8001c3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	863b      	strh	r3, [r7, #48]	; 0x30
            }

            f_num = f_num / f_step;
 8001c42:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001c46:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            i_part = (uint32_t)f_num;
 8001c52:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c5a:	ee17 3a90 	vmov	r3, s15
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28

            f_num = f_num - (float)i_part;
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c72:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            d_part = (uint32_t)(1000 * f_num);
 8001c76:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c7a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001e9c <getStr4NumMISC+0x594>
 8001c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c86:	ee17 3a90 	vmov	r3, s15
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24

            getDNumMISC(dnum, i_part);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fda4 	bl	80017e0 <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001c98:	f107 0112 	add.w	r1, r7, #18
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fdd8 	bl	8001858 <putDNumMISC>

            getDNumMISC(dnum, d_part);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fd96 	bl	80017e0 <getDNumMISC>
            dnum[3] = '.';
 8001cb4:	232e      	movs	r3, #46	; 0x2e
 8001cb6:	75fb      	strb	r3, [r7, #23]
            putDNumMISC(dnum, &m, rstr);
 8001cb8:	f107 0112 	add.w	r1, r7, #18
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fdc8 	bl	8001858 <putDNumMISC>

            rstr[m] = 'e';
 8001cc8:	8a7b      	ldrh	r3, [r7, #18]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	2265      	movs	r2, #101	; 0x65
 8001cd2:	701a      	strb	r2, [r3, #0]
            m++;
 8001cd4:	8a7b      	ldrh	r3, [r7, #18]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	827b      	strh	r3, [r7, #18]

            if (sige == '-')
 8001cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ce0:	2b2d      	cmp	r3, #45	; 0x2d
 8001ce2:	d109      	bne.n	8001cf8 <getStr4NumMISC+0x3f0>
            {
                rstr[m] = '-';
 8001ce4:	8a7b      	ldrh	r3, [r7, #18]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	222d      	movs	r2, #45	; 0x2d
 8001cee:	701a      	strb	r2, [r3, #0]
                m++;
 8001cf0:	8a7b      	ldrh	r3, [r7, #18]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	827b      	strh	r3, [r7, #18]
            }

            getDNumMISC(dnum, e_part);
 8001cf8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fd6d 	bl	80017e0 <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001d06:	f107 0112 	add.w	r1, r7, #18
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fda1 	bl	8001858 <putDNumMISC>
				
			break;
 8001d16:	e0b7      	b.n	8001e88 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_HEXADECIMAL_BYTE):
		{// 8 bit hex string representation
			uint8_t t_rez;
            for (k=0;k<2;k++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d1e:	e02c      	b.n	8001d7a <getStr4NumMISC+0x472>
            {
                t_rez = ((*num) & 0x000000F0) >> 4;
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                if (t_rez < 0x0A)
 8001d30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d34:	2b09      	cmp	r3, #9
 8001d36:	d809      	bhi.n	8001d4c <getStr4NumMISC+0x444>
                {
                    rstr[m] = t_rez + 0x30;
 8001d38:	8a7b      	ldrh	r3, [r7, #18]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001d44:	3230      	adds	r2, #48	; 0x30
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	e008      	b.n	8001d5e <getStr4NumMISC+0x456>
                }
                else
                {
                    rstr[m] = t_rez + 0x41 - 0x0A;
 8001d4c:	8a7b      	ldrh	r3, [r7, #18]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001d58:	3237      	adds	r2, #55	; 0x37
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	011a      	lsls	r2, r3, #4
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	601a      	str	r2, [r3, #0]
                m++;
 8001d68:	8a7b      	ldrh	r3, [r7, #18]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	827b      	strh	r3, [r7, #18]
            for (k=0;k<2;k++)
 8001d70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d74:	3301      	adds	r3, #1
 8001d76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d9ce      	bls.n	8001d20 <getStr4NumMISC+0x418>
            }
            rstr[m] = 0x00;
 8001d82:	8a7b      	ldrh	r3, [r7, #18]
 8001d84:	461a      	mov	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
			break;
 8001d8e:	e07b      	b.n	8001e88 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_HEXADECIMAL_HALFWORD):
		{// 16 bit hex string representation
			uint8_t t_rez;
            for (k=0;k<4;k++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d96:	e02c      	b.n	8001df2 <getStr4NumMISC+0x4ea>
            {
                t_rez = ((*num) & 0x0000F000) >> 12;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0b1b      	lsrs	r3, r3, #12
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                if (t_rez < 0x0A)
 8001da8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d809      	bhi.n	8001dc4 <getStr4NumMISC+0x4bc>
                {
                    rstr[m] = t_rez + 0x30;
 8001db0:	8a7b      	ldrh	r3, [r7, #18]
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001dbc:	3230      	adds	r2, #48	; 0x30
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e008      	b.n	8001dd6 <getStr4NumMISC+0x4ce>
                }
                else
                {
                    rstr[m] = t_rez + 0x41 - 0x0A;
 8001dc4:	8a7b      	ldrh	r3, [r7, #18]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001dd0:	3237      	adds	r2, #55	; 0x37
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	011a      	lsls	r2, r3, #4
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	601a      	str	r2, [r3, #0]
                m++;
 8001de0:	8a7b      	ldrh	r3, [r7, #18]
 8001de2:	3301      	adds	r3, #1
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	827b      	strh	r3, [r7, #18]
            for (k=0;k<4;k++)
 8001de8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dec:	3301      	adds	r3, #1
 8001dee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001df2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d9ce      	bls.n	8001d98 <getStr4NumMISC+0x490>
            }
            rstr[m] = 0x00;
 8001dfa:	8a7b      	ldrh	r3, [r7, #18]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
			break;
 8001e06:	e03f      	b.n	8001e88 <getStr4NumMISC+0x580>
		}
		case(PRINT_ARG_TYPE_HEXADECIMAL_WORD):
		{// 32 bit hex string representation
            uint8_t t_rez;
            for (k=0;k<8;k++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e0e:	e029      	b.n	8001e64 <getStr4NumMISC+0x55c>
            {
                t_rez = ((*num) & 0xF0000000) >> 28;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0f1b      	lsrs	r3, r3, #28
 8001e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if (t_rez < 0x0A)
 8001e1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e1e:	2b09      	cmp	r3, #9
 8001e20:	d809      	bhi.n	8001e36 <getStr4NumMISC+0x52e>
                {
                    rstr[m] = t_rez + 0x30;
 8001e22:	8a7b      	ldrh	r3, [r7, #18]
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001e2e:	3230      	adds	r2, #48	; 0x30
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]
 8001e34:	e008      	b.n	8001e48 <getStr4NumMISC+0x540>
                }
                else
                {
                    rstr[m] = t_rez + 0x41 - 0x0A;
 8001e36:	8a7b      	ldrh	r3, [r7, #18]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001e42:	3237      	adds	r2, #55	; 0x37
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	011a      	lsls	r2, r3, #4
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	601a      	str	r2, [r3, #0]
                m++;
 8001e52:	8a7b      	ldrh	r3, [r7, #18]
 8001e54:	3301      	adds	r3, #1
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	827b      	strh	r3, [r7, #18]
            for (k=0;k<8;k++)
 8001e5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e68:	2b07      	cmp	r3, #7
 8001e6a:	d9d1      	bls.n	8001e10 <getStr4NumMISC+0x508>
            }
            rstr[m] = 0x00;
 8001e6c:	8a7b      	ldrh	r3, [r7, #18]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
			break;
 8001e78:	e006      	b.n	8001e88 <getStr4NumMISC+0x580>
		}
		default:
		{
			rstr[0] = 0x00;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
			break;
 8001e80:	e002      	b.n	8001e88 <getStr4NumMISC+0x580>
			break;
 8001e82:	bf00      	nop
 8001e84:	e000      	b.n	8001e88 <getStr4NumMISC+0x580>
			break;
 8001e86:	bf00      	nop
		}
	}
}
 8001e88:	bf00      	nop
 8001e8a:	3740      	adds	r7, #64	; 0x40
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	9999999a 	.word	0x9999999a
 8001e94:	3fb99999 	.word	0x3fb99999
 8001e98:	3dcccccd 	.word	0x3dcccccd
 8001e9c:	447a0000 	.word	0x447a0000

08001ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_MspInit+0x4c>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_MspInit+0x4c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_ADC_MspInit+0x7c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d127      	bne.n	8001f62 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <HAL_ADC_MspInit+0x80>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <HAL_ADC_MspInit+0x80>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f20:	6453      	str	r3, [r2, #68]	; 0x44
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_ADC_MspInit+0x80>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_ADC_MspInit+0x80>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <HAL_ADC_MspInit+0x80>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_ADC_MspInit+0x80>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = thermistor_Pin;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(thermistor_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	; (8001f74 <HAL_ADC_MspInit+0x84>)
 8001f5e:	f001 f8f1 	bl	8003144 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40012000 	.word	0x40012000
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020000 	.word	0x40020000

08001f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <HAL_TIM_Base_MspInit+0x64>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d10e      	bne.n	8001fa8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_TIM_Base_MspInit+0x68>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <HAL_TIM_Base_MspInit+0x68>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_TIM_Base_MspInit+0x68>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001fa6:	e012      	b.n	8001fce <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM12)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <HAL_TIM_Base_MspInit+0x6c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10d      	bne.n	8001fce <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_TIM_Base_MspInit+0x68>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_TIM_Base_MspInit+0x68>)
 8001fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_TIM_Base_MspInit+0x68>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40014000 	.word	0x40014000
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40001800 	.word	0x40001800

08001fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_TIM_MspPostInit+0x68>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d11d      	bne.n	8002046 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_TIM_MspPostInit+0x6c>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a10      	ldr	r2, [pc, #64]	; (8002054 <HAL_TIM_MspPostInit+0x6c>)
 8002014:	f043 0310 	orr.w	r3, r3, #16
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_TIM_MspPostInit+0x6c>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = DC_pwm_Pin;
 8002026:	2320      	movs	r3, #32
 8002028:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002036:	2303      	movs	r3, #3
 8002038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DC_pwm_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	4619      	mov	r1, r3
 8002040:	4805      	ldr	r0, [pc, #20]	; (8002058 <HAL_TIM_MspPostInit+0x70>)
 8002042:	f001 f87f 	bl	8003144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002046:	bf00      	nop
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40014000 	.word	0x40014000
 8002054:	40023800 	.word	0x40023800
 8002058:	40021000 	.word	0x40021000

0800205c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a19      	ldr	r2, [pc, #100]	; (80020e0 <HAL_UART_MspInit+0x84>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12b      	bne.n	80020d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_UART_MspInit+0x88>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_UART_MspInit+0x88>)
 8002088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_UART_MspInit+0x88>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_UART_MspInit+0x88>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_UART_MspInit+0x88>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_UART_MspInit+0x88>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020b6:	230c      	movs	r3, #12
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c6:	2307      	movs	r3, #7
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <HAL_UART_MspInit+0x8c>)
 80020d2:	f001 f837 	bl	8003144 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40004400 	.word	0x40004400
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020000 	.word	0x40020000

080020ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <NMI_Handler+0x4>

080020f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f6:	e7fe      	b.n	80020f6 <HardFault_Handler+0x4>

080020f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fc:	e7fe      	b.n	80020fc <MemManage_Handler+0x4>

080020fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <BusFault_Handler+0x4>

08002104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <UsageFault_Handler+0x4>

0800210a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002138:	f000 fb0e 	bl	8002758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}

08002140 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002144:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002148:	f001 f9e4 	bl	8003514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}

08002150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <SystemInit+0x20>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <SystemInit+0x20>)
 800215c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <initUSART2>:
#include "usart.h"

UART_HandleTypeDef UART_HandleStruct;

void initUSART2(uint32_t baudrate)
{
 8002174:	b5b0      	push	{r4, r5, r7, lr}
 8002176:	b090      	sub	sp, #64	; 0x40
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	
	//wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
	//Configure pins
	//
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	4b26      	ldr	r3, [pc, #152]	; (800221c <initUSART2+0xa8>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	4a25      	ldr	r2, [pc, #148]	; (800221c <initUSART2+0xa8>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6313      	str	r3, [r2, #48]	; 0x30
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <initUSART2+0xa8>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002198:	2304      	movs	r3, #4
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a4:	2302      	movs	r3, #2
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a8:	2307      	movs	r3, #7
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b0:	4619      	mov	r1, r3
 80021b2:	481b      	ldr	r0, [pc, #108]	; (8002220 <initUSART2+0xac>)
 80021b4:	f000 ffc6 	bl	8003144 <HAL_GPIO_Init>
	

	UART_InitTypeDef UART_InitStruct;
	__HAL_RCC_USART2_CLK_ENABLE();
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <initUSART2+0xa8>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	4a16      	ldr	r2, [pc, #88]	; (800221c <initUSART2+0xa8>)
 80021c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c6:	6413      	str	r3, [r2, #64]	; 0x40
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <initUSART2+0xa8>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
	UART_InitStruct.BaudRate = baudrate;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	613b      	str	r3, [r7, #16]
	UART_InitStruct.WordLength = UART_WORDLENGTH_8B;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
	UART_InitStruct.StopBits = UART_STOPBITS_1;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
	UART_InitStruct.Parity = UART_PARITY_NONE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
	UART_InitStruct.Mode = UART_MODE_TX;
 80021e4:	2308      	movs	r3, #8
 80021e6:	623b      	str	r3, [r7, #32]
	UART_InitStruct.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
	UART_InitStruct.OverSampling = UART_OVERSAMPLING_8;
 80021ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28

	UART_HandleStruct.Instance = USART2;
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <initUSART2+0xb0>)
 80021f4:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <initUSART2+0xb4>)
 80021f6:	601a      	str	r2, [r3, #0]
	UART_HandleStruct.Init = UART_InitStruct;
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <initUSART2+0xb0>)
 80021fa:	1d1c      	adds	r4, r3, #4
 80021fc:	f107 0510 	add.w	r5, r7, #16
 8002200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002204:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Init(&UART_HandleStruct);
 800220c:	4805      	ldr	r0, [pc, #20]	; (8002224 <initUSART2+0xb0>)
 800220e:	f002 fb6b 	bl	80048e8 <HAL_UART_Init>
	
}
 8002212:	bf00      	nop
 8002214:	3740      	adds	r7, #64	; 0x40
 8002216:	46bd      	mov	sp, r7
 8002218:	bdb0      	pop	{r4, r5, r7, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40020000 	.word	0x40020000
 8002224:	20000230 	.word	0x20000230
 8002228:	40004400 	.word	0x40004400

0800222c <putcharUSART2>:

void putcharUSART2(uint8_t data)
{/// print one character to USART2
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&UART_HandleStruct, & data,1,10000);
 8002236:	1df9      	adds	r1, r7, #7
 8002238:	f242 7310 	movw	r3, #10000	; 0x2710
 800223c:	2201      	movs	r2, #1
 800223e:	4803      	ldr	r0, [pc, #12]	; (800224c <putcharUSART2+0x20>)
 8002240:	f002 fb9f 	bl	8004982 <HAL_UART_Transmit>
	// while(!(USART2->SR & USART_SR_TC));									

	// USART2->DR = data;	
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000230 	.word	0x20000230

08002250 <printUSART2>:

void printUSART2(char *str, ... )
{ /// print text and up to 10 arguments!
 8002250:	b40f      	push	{r0, r1, r2, r3}
 8002252:	b5b0      	push	{r4, r5, r7, lr}
 8002254:	b094      	sub	sp, #80	; 0x50
 8002256:	af00      	add	r7, sp, #0
    uint8_t rstr[40];													// 33 max -> 32 ASCII for 32 bits and NULL 
    uint16_t k = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint32_t * p_uint32; 
	char * p_char;
	va_list vl;
	
	//va_start(vl, 10);													// always pass the last named parameter to va_start, for compatibility with older compilers
	va_start(vl, str);													// always pass the last named parameter to va_start, for compatibility with older compilers
 800225e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002262:	603b      	str	r3, [r7, #0]
	while(str[k] != 0x00)
 8002264:	e1c2      	b.n	80025ec <printUSART2+0x39c>
	{
		if(str[k] == '%')
 8002266:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800226a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800226c:	4413      	add	r3, r2
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b25      	cmp	r3, #37	; 0x25
 8002272:	f040 81a4 	bne.w	80025be <printUSART2+0x36e>
		{
			if(str[k+1] != 0x00)
 8002276:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800227a:	3301      	adds	r3, #1
 800227c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800227e:	4413      	add	r3, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 81ad 	beq.w	80025e2 <printUSART2+0x392>
			{
				switch(str[k+1])
 8002288:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800228c:	3301      	adds	r3, #1
 800228e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002290:	4413      	add	r3, r2
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	3b62      	subs	r3, #98	; 0x62
 8002296:	2b16      	cmp	r3, #22
 8002298:	f200 8170 	bhi.w	800257c <printUSART2+0x32c>
 800229c:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <printUSART2+0x54>)
 800229e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a2:	bf00      	nop
 80022a4:	08002301 	.word	0x08002301
 80022a8:	08002421 	.word	0x08002421
 80022ac:	08002391 	.word	0x08002391
 80022b0:	0800257d 	.word	0x0800257d
 80022b4:	08002457 	.word	0x08002457
 80022b8:	0800257d 	.word	0x0800257d
 80022bc:	0800257d 	.word	0x0800257d
 80022c0:	0800257d 	.word	0x0800257d
 80022c4:	0800257d 	.word	0x0800257d
 80022c8:	0800257d 	.word	0x0800257d
 80022cc:	0800257d 	.word	0x0800257d
 80022d0:	0800257d 	.word	0x0800257d
 80022d4:	0800257d 	.word	0x0800257d
 80022d8:	0800257d 	.word	0x0800257d
 80022dc:	0800257d 	.word	0x0800257d
 80022e0:	0800257d 	.word	0x0800257d
 80022e4:	0800257d 	.word	0x0800257d
 80022e8:	0800243f 	.word	0x0800243f
 80022ec:	0800257d 	.word	0x0800257d
 80022f0:	0800257d 	.word	0x0800257d
 80022f4:	0800257d 	.word	0x0800257d
 80022f8:	0800257d 	.word	0x0800257d
 80022fc:	080024e5 	.word	0x080024e5
				{
					case('b'):
					{// binary
						if(str[k+2] == 'b')
 8002300:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002304:	3302      	adds	r3, #2
 8002306:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b62      	cmp	r3, #98	; 0x62
 800230e:	d108      	bne.n	8002322 <printUSART2+0xd2>
						{// byte
							utmp32 = va_arg(vl, int);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	1d1a      	adds	r2, r3, #4
 8002314:	603a      	str	r2, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_BYTE);
 800231a:	2301      	movs	r3, #1
 800231c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002320:	e02e      	b.n	8002380 <printUSART2+0x130>
						}
						else if(str[k+2] == 'h')
 8002322:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002326:	3302      	adds	r3, #2
 8002328:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800232a:	4413      	add	r3, r2
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b68      	cmp	r3, #104	; 0x68
 8002330:	d108      	bne.n	8002344 <printUSART2+0xf4>
						{// half word
							utmp32 = va_arg(vl, int);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	1d1a      	adds	r2, r3, #4
 8002336:	603a      	str	r2, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_HALFWORD);
 800233c:	2302      	movs	r3, #2
 800233e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002342:	e01d      	b.n	8002380 <printUSART2+0x130>
						}
						else if(str[k+2] == 'w')
 8002344:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002348:	3302      	adds	r3, #2
 800234a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b77      	cmp	r3, #119	; 0x77
 8002352:	d108      	bne.n	8002366 <printUSART2+0x116>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	1d1a      	adds	r2, r3, #4
 8002358:	603a      	str	r2, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
 800235e:	2304      	movs	r3, #4
 8002360:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002364:	e00c      	b.n	8002380 <printUSART2+0x130>
						}
						else
						{// default word
							utmp32 = va_arg(vl, uint32_t);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	1d1a      	adds	r2, r3, #4
 800236a:	603a      	str	r2, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
 8002370:	2304      	movs	r3, #4
 8002372:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 8002376:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800237a:	3b01      	subs	r3, #1
 800237c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;	
 8002380:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002384:	3301      	adds	r3, #1
 8002386:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 800238e:	e0fd      	b.n	800258c <printUSART2+0x33c>
					}
					case('d'):
					{// decimal
						if(str[k+2] == 'b')
 8002390:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002394:	3302      	adds	r3, #2
 8002396:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002398:	4413      	add	r3, r2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b62      	cmp	r3, #98	; 0x62
 800239e:	d108      	bne.n	80023b2 <printUSART2+0x162>
						{// byte
							utmp32 = va_arg(vl, int);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	1d1a      	adds	r2, r3, #4
 80023a4:	603a      	str	r2, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_BYTE);
 80023aa:	2308      	movs	r3, #8
 80023ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80023b0:	e02e      	b.n	8002410 <printUSART2+0x1c0>
						}
						else if(str[k+2] == 'h')
 80023b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023b6:	3302      	adds	r3, #2
 80023b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023ba:	4413      	add	r3, r2
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b68      	cmp	r3, #104	; 0x68
 80023c0:	d108      	bne.n	80023d4 <printUSART2+0x184>
						{// half word
							utmp32 = va_arg(vl, int);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	1d1a      	adds	r2, r3, #4
 80023c6:	603a      	str	r2, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_HALFWORD);
 80023cc:	2310      	movs	r3, #16
 80023ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80023d2:	e01d      	b.n	8002410 <printUSART2+0x1c0>
						}
						else if(str[k+2] == 'w')
 80023d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023d8:	3302      	adds	r3, #2
 80023da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023dc:	4413      	add	r3, r2
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b77      	cmp	r3, #119	; 0x77
 80023e2:	d108      	bne.n	80023f6 <printUSART2+0x1a6>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	1d1a      	adds	r2, r3, #4
 80023e8:	603a      	str	r2, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_WORD);
 80023ee:	2320      	movs	r3, #32
 80023f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80023f4:	e00c      	b.n	8002410 <printUSART2+0x1c0>
						}
						else
						{// default word
							utmp32 = va_arg(vl, uint32_t);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	1d1a      	adds	r2, r3, #4
 80023fa:	603a      	str	r2, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_WORD);
 8002400:	2320      	movs	r3, #32
 8002402:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 8002406:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800240a:	3b01      	subs	r3, #1
 800240c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;	
 8002410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002414:	3301      	adds	r3, #1
 8002416:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 800241e:	e0b5      	b.n	800258c <printUSART2+0x33c>
					}
					case('c'):
					{// character
						char tchar = va_arg(vl, int);	
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	1d1a      	adds	r2, r3, #4
 8002424:	603a      	str	r2, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
						putcharUSART2(tchar);
 800242c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fefb 	bl	800222c <putcharUSART2>
						arg_type = (PRINT_ARG_TYPE_CHARACTER);
 8002436:	2340      	movs	r3, #64	; 0x40
 8002438:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 800243c:	e0a6      	b.n	800258c <printUSART2+0x33c>
					}
					case('s'):
					{// string 
						p_char = va_arg(vl, char *);	
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	1d1a      	adds	r2, r3, #4
 8002442:	603a      	str	r2, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	647b      	str	r3, [r7, #68]	; 0x44
						sprintUSART2((uint8_t *)p_char);
 8002448:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800244a:	f000 f8df 	bl	800260c <sprintUSART2>
						arg_type = (PRINT_ARG_TYPE_STRING);
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 8002454:	e09a      	b.n	800258c <printUSART2+0x33c>
					}
					case('f'):
					{// float
						uint64_t utmp64 = va_arg(vl, uint64_t);			// convert double to float representation IEEE 754
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	3307      	adds	r3, #7
 800245a:	f023 0307 	bic.w	r3, r3, #7
 800245e:	f103 0208 	add.w	r2, r3, #8
 8002462:	603a      	str	r2, [r7, #0]
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
						uint32_t tmp1 = utmp64&0x00000000FFFFFFFF;
 800246c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
						tmp1 = tmp1>>29;
 8002470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002472:	0f5b      	lsrs	r3, r3, #29
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
						utmp32 = utmp64>>32;
 8002476:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	000a      	movs	r2, r1
 8002484:	2300      	movs	r3, #0
 8002486:	4613      	mov	r3, r2
 8002488:	607b      	str	r3, [r7, #4]
						utmp32 &= 0x07FFFFFF;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002490:	607b      	str	r3, [r7, #4]
						utmp32 = utmp32<<3;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	607b      	str	r3, [r7, #4]
						utmp32 |= tmp1;
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249c:	4313      	orrs	r3, r2
 800249e:	607b      	str	r3, [r7, #4]
						if(utmp64 & 0x8000000000000000)
 80024a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024a4:	2a00      	cmp	r2, #0
 80024a6:	f173 0300 	sbcs.w	r3, r3, #0
 80024aa:	da03      	bge.n	80024b4 <printUSART2+0x264>
							utmp32 |= 0x80000000;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024b2:	607b      	str	r3, [r7, #4]
							
						if(utmp64 & 0x4000000000000000)
 80024b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024b8:	f04f 0000 	mov.w	r0, #0
 80024bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80024c0:	ea02 0400 	and.w	r4, r2, r0
 80024c4:	ea03 0501 	and.w	r5, r3, r1
 80024c8:	ea54 0305 	orrs.w	r3, r4, r5
 80024cc:	d003      	beq.n	80024d6 <printUSART2+0x286>
							utmp32 |= 0x40000000;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024d4:	607b      	str	r3, [r7, #4]
							
						p_uint32 = &utmp32;
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	64bb      	str	r3, [r7, #72]	; 0x48
						
						arg_type = (PRINT_ARG_TYPE_FLOAT);
 80024da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						//arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
						//arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
						break;
 80024e2:	e053      	b.n	800258c <printUSART2+0x33c>
					}
					case('x'):
					{// hexadecimal 
						if(str[k+2] == 'b')
 80024e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024e8:	3302      	adds	r3, #2
 80024ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024ec:	4413      	add	r3, r2
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b62      	cmp	r3, #98	; 0x62
 80024f2:	d109      	bne.n	8002508 <printUSART2+0x2b8>
						{// byte
							utmp32 = (uint32_t)va_arg(vl, int);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	1d1a      	adds	r2, r3, #4
 80024f8:	603a      	str	r2, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_BYTE);
 80024fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002502:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002506:	e031      	b.n	800256c <printUSART2+0x31c>
						}
						else if(str[k+2] == 'h')
 8002508:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800250c:	3302      	adds	r3, #2
 800250e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002510:	4413      	add	r3, r2
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b68      	cmp	r3, #104	; 0x68
 8002516:	d109      	bne.n	800252c <printUSART2+0x2dc>
						{// half word
							utmp32 = (uint32_t)va_arg(vl, int);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	1d1a      	adds	r2, r3, #4
 800251c:	603a      	str	r2, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_HALFWORD);
 8002522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002526:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800252a:	e01f      	b.n	800256c <printUSART2+0x31c>
						}
						else if(str[k+2] == 'w')
 800252c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002530:	3302      	adds	r3, #2
 8002532:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002534:	4413      	add	r3, r2
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b77      	cmp	r3, #119	; 0x77
 800253a:	d109      	bne.n	8002550 <printUSART2+0x300>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	1d1a      	adds	r2, r3, #4
 8002540:	603a      	str	r2, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
 8002546:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800254a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800254e:	e00d      	b.n	800256c <printUSART2+0x31c>
						}
						else
						{
							utmp32 = va_arg(vl, uint32_t);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	1d1a      	adds	r2, r3, #4
 8002554:	603a      	str	r2, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
 800255a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800255e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 8002562:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002566:	3b01      	subs	r3, #1
 8002568:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;
 800256c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002570:	3301      	adds	r3, #1
 8002572:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 800257a:	e007      	b.n	800258c <printUSART2+0x33c>
					}
					default:
					{
						utmp32 = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	607b      	str	r3, [r7, #4]
						p_uint32 = &utmp32;
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	64bb      	str	r3, [r7, #72]	; 0x48
						arg_type = (PRINT_ARG_TYPE_UNKNOWN);
 8002584:	2300      	movs	r3, #0
 8002586:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 800258a:	bf00      	nop
					}
				}
					
				if(arg_type&(PRINT_ARG_TYPE_MASK_CHAR_STRING))	
 800258c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002590:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00c      	beq.n	80025b2 <printUSART2+0x362>
				{
					getStr4NumMISC(arg_type, p_uint32, rstr);
 8002598:	f107 0208 	add.w	r2, r7, #8
 800259c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f9b0 	bl	8001908 <getStr4NumMISC>
					sprintUSART2(rstr);	
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 f82d 	bl	800260c <sprintUSART2>
				}
				k++;
 80025b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025b6:	3301      	adds	r3, #1
 80025b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80025bc:	e011      	b.n	80025e2 <printUSART2+0x392>
			}
		}
		else
		{// not a '%' char -> print the char
			putcharUSART2(str[k]);
 80025be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025c4:	4413      	add	r3, r2
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fe2f 	bl	800222c <putcharUSART2>
			if (str[k] == '\n')
 80025ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025d4:	4413      	add	r3, r2
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b0a      	cmp	r3, #10
 80025da:	d102      	bne.n	80025e2 <printUSART2+0x392>
				putcharUSART2('\r');
 80025dc:	200d      	movs	r0, #13
 80025de:	f7ff fe25 	bl	800222c <putcharUSART2>
		}
		k++;
 80025e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e6:	3301      	adds	r3, #1
 80025e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while(str[k] != 0x00)
 80025ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f47f ae35 	bne.w	8002266 <printUSART2+0x16>
	}
	
	va_end(vl);
	return;
 80025fc:	bf00      	nop
}
 80025fe:	3750      	adds	r7, #80	; 0x50
 8002600:	46bd      	mov	sp, r7
 8002602:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002606:	b004      	add	sp, #16
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop

0800260c <sprintUSART2>:

void sprintUSART2(uint8_t * str)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	uint16_t k = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	81fb      	strh	r3, [r7, #14]
	
	while (str[k] != '\0')
 8002618:	e016      	b.n	8002648 <sprintUSART2+0x3c>
    {
        putcharUSART2(str[k]);
 800261a:	89fb      	ldrh	r3, [r7, #14]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	4413      	add	r3, r2
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fe02 	bl	800222c <putcharUSART2>
        if (str[k] == '\n')
 8002628:	89fb      	ldrh	r3, [r7, #14]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b0a      	cmp	r3, #10
 8002632:	d102      	bne.n	800263a <sprintUSART2+0x2e>
            putcharUSART2('\r');
 8002634:	200d      	movs	r0, #13
 8002636:	f7ff fdf9 	bl	800222c <putcharUSART2>
        k++;
 800263a:	89fb      	ldrh	r3, [r7, #14]
 800263c:	3301      	adds	r3, #1
 800263e:	81fb      	strh	r3, [r7, #14]

        if (k == MAX_PRINT_STRING_SIZE)
 8002640:	89fb      	ldrh	r3, [r7, #14]
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002646:	d006      	beq.n	8002656 <sprintUSART2+0x4a>
	while (str[k] != '\0')
 8002648:	89fb      	ldrh	r3, [r7, #14]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e2      	bne.n	800261a <sprintUSART2+0xe>
            break;
    }
}
 8002654:	e000      	b.n	8002658 <sprintUSART2+0x4c>
            break;
 8002656:	bf00      	nop
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002698 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002664:	480d      	ldr	r0, [pc, #52]	; (800269c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002666:	490e      	ldr	r1, [pc, #56]	; (80026a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002668:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800266c:	e002      	b.n	8002674 <LoopCopyDataInit>

0800266e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002672:	3304      	adds	r3, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002678:	d3f9      	bcc.n	800266e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800267c:	4c0b      	ldr	r4, [pc, #44]	; (80026ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002680:	e001      	b.n	8002686 <LoopFillZerobss>

08002682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002684:	3204      	adds	r2, #4

08002686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002688:	d3fb      	bcc.n	8002682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800268a:	f7ff fd61 	bl	8002150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800268e:	f002 fc23 	bl	8004ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002692:	f7fe fbd1 	bl	8000e38 <main>
  bx  lr    
 8002696:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800269c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80026a4:	08006508 	.word	0x08006508
  ldr r2, =_sbss
 80026a8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80026ac:	20000278 	.word	0x20000278

080026b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b0:	e7fe      	b.n	80026b0 <ADC_IRQHandler>
	...

080026b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <HAL_Init+0x40>)
 80026be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <HAL_Init+0x40>)
 80026ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <HAL_Init+0x40>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026dc:	2003      	movs	r0, #3
 80026de:	f000 fcfd 	bl	80030dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f000 f808 	bl	80026f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e8:	f7ff fbda 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023c00 	.word	0x40023c00

080026f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_InitTick+0x54>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_InitTick+0x58>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4619      	mov	r1, r3
 800270a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fd07 	bl	800312a <HAL_SYSTICK_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e00e      	b.n	8002744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b0f      	cmp	r3, #15
 800272a:	d80a      	bhi.n	8002742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800272c:	2200      	movs	r2, #0
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002734:	f000 fcdd 	bl	80030f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002738:	4a06      	ldr	r2, [pc, #24]	; (8002754 <HAL_InitTick+0x5c>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000014 	.word	0x20000014
 8002750:	2000001c 	.word	0x2000001c
 8002754:	20000018 	.word	0x20000018

08002758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_IncTick+0x20>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_IncTick+0x24>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4413      	add	r3, r2
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_IncTick+0x24>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	2000001c 	.word	0x2000001c
 800277c:	20000274 	.word	0x20000274

08002780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return uwTick;
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_GetTick+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000274 	.word	0x20000274

08002798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7ff ffee 	bl	8002780 <HAL_GetTick>
 80027a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b0:	d005      	beq.n	80027be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_Delay+0x44>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027be:	bf00      	nop
 80027c0:	f7ff ffde 	bl	8002780 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d8f7      	bhi.n	80027c0 <HAL_Delay+0x28>
  {
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000001c 	.word	0x2000001c

080027e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e033      	b.n	800285e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff fb76 	bl	8001ef0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b00      	cmp	r3, #0
 800281c:	d118      	bne.n	8002850 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002826:	f023 0302 	bic.w	r3, r3, #2
 800282a:	f043 0202 	orr.w	r2, r3, #2
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 faa4 	bl	8002d80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
 800284e:	e001      	b.n	8002854 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_ADC_Start+0x1a>
 800287e:	2302      	movs	r3, #2
 8002880:	e0b2      	b.n	80029e8 <HAL_ADC_Start+0x180>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d018      	beq.n	80028ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028a8:	4b52      	ldr	r3, [pc, #328]	; (80029f4 <HAL_ADC_Start+0x18c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_ADC_Start+0x190>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0c9a      	lsrs	r2, r3, #18
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028bc:	e002      	b.n	80028c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f9      	bne.n	80028be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d17a      	bne.n	80029ce <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002902:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002916:	d106      	bne.n	8002926 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	f023 0206 	bic.w	r2, r3, #6
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	645a      	str	r2, [r3, #68]	; 0x44
 8002924:	e002      	b.n	800292c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002934:	4b31      	ldr	r3, [pc, #196]	; (80029fc <HAL_ADC_Start+0x194>)
 8002936:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002940:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2b00      	cmp	r3, #0
 800294c:	d12a      	bne.n	80029a4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a2b      	ldr	r2, [pc, #172]	; (8002a00 <HAL_ADC_Start+0x198>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d015      	beq.n	8002984 <HAL_ADC_Start+0x11c>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <HAL_ADC_Start+0x19c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d105      	bne.n	800296e <HAL_ADC_Start+0x106>
 8002962:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_ADC_Start+0x194>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a25      	ldr	r2, [pc, #148]	; (8002a08 <HAL_ADC_Start+0x1a0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d136      	bne.n	80029e6 <HAL_ADC_Start+0x17e>
 8002978:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_ADC_Start+0x194>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d130      	bne.n	80029e6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d129      	bne.n	80029e6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	e020      	b.n	80029e6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <HAL_ADC_Start+0x198>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d11b      	bne.n	80029e6 <HAL_ADC_Start+0x17e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d114      	bne.n	80029e6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	e00b      	b.n	80029e6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f043 0210 	orr.w	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	20000014 	.word	0x20000014
 80029f8:	431bde83 	.word	0x431bde83
 80029fc:	40012300 	.word	0x40012300
 8002a00:	40012000 	.word	0x40012000
 8002a04:	40012100 	.word	0x40012100
 8002a08:	40012200 	.word	0x40012200

08002a0c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a28:	d113      	bne.n	8002a52 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a38:	d10b      	bne.n	8002a52 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f043 0220 	orr.w	r2, r3, #32
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e063      	b.n	8002b1a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002a52:	f7ff fe95 	bl	8002780 <HAL_GetTick>
 8002a56:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a58:	e021      	b.n	8002a9e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a60:	d01d      	beq.n	8002a9e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_ADC_PollForConversion+0x6c>
 8002a68:	f7ff fe8a 	bl	8002780 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d212      	bcs.n	8002a9e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d00b      	beq.n	8002a9e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f043 0204 	orr.w	r2, r3, #4
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e03d      	b.n	8002b1a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d1d6      	bne.n	8002a5a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0212 	mvn.w	r2, #18
 8002ab4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d123      	bne.n	8002b18 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d11f      	bne.n	8002b18 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d111      	bne.n	8002b18 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x1c>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e105      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x228>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b09      	cmp	r3, #9
 8002b66:	d925      	bls.n	8002bb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68d9      	ldr	r1, [r3, #12]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b1e      	subs	r3, #30
 8002b7e:	2207      	movs	r2, #7
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43da      	mvns	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68d9      	ldr	r1, [r3, #12]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4403      	add	r3, r0
 8002ba6:	3b1e      	subs	r3, #30
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	e022      	b.n	8002bfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6919      	ldr	r1, [r3, #16]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	2207      	movs	r2, #7
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6919      	ldr	r1, [r3, #16]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	4618      	mov	r0, r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4403      	add	r3, r0
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d824      	bhi.n	8002c4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	3b05      	subs	r3, #5
 8002c14:	221f      	movs	r2, #31
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	400a      	ands	r2, r1
 8002c22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	4618      	mov	r0, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b05      	subs	r3, #5
 8002c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	635a      	str	r2, [r3, #52]	; 0x34
 8002c4a:	e04c      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	d824      	bhi.n	8002c9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	3b23      	subs	r3, #35	; 0x23
 8002c66:	221f      	movs	r2, #31
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	400a      	ands	r2, r1
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3b23      	subs	r3, #35	; 0x23
 8002c90:	fa00 f203 	lsl.w	r2, r0, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c9c:	e023      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	3b41      	subs	r3, #65	; 0x41
 8002cb0:	221f      	movs	r2, #31
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3b41      	subs	r3, #65	; 0x41
 8002cda:	fa00 f203 	lsl.w	r2, r0, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <HAL_ADC_ConfigChannel+0x234>)
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a21      	ldr	r2, [pc, #132]	; (8002d74 <HAL_ADC_ConfigChannel+0x238>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d109      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x1cc>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b12      	cmp	r3, #18
 8002cfa:	d105      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_ADC_ConfigChannel+0x238>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d123      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x21e>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d003      	beq.n	8002d22 <HAL_ADC_ConfigChannel+0x1e6>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b11      	cmp	r3, #17
 8002d20:	d11b      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d111      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <HAL_ADC_ConfigChannel+0x23c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a10      	ldr	r2, [pc, #64]	; (8002d7c <HAL_ADC_ConfigChannel+0x240>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	0c9a      	lsrs	r2, r3, #18
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d4c:	e002      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f9      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40012300 	.word	0x40012300
 8002d74:	40012000 	.word	0x40012000
 8002d78:	20000014 	.word	0x20000014
 8002d7c:	431bde83 	.word	0x431bde83

08002d80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d88:	4b79      	ldr	r3, [pc, #484]	; (8002f70 <ADC_Init+0x1f0>)
 8002d8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	021a      	lsls	r2, r3, #8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002dd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6899      	ldr	r1, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <ADC_Init+0x1f4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6899      	ldr	r1, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	e00f      	b.n	8002e7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0202 	bic.w	r2, r2, #2
 8002e8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7e1b      	ldrb	r3, [r3, #24]
 8002e98:	005a      	lsls	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01b      	beq.n	8002ee4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002eca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	035a      	lsls	r2, r3, #13
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	e007      	b.n	8002ef4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	051a      	lsls	r2, r3, #20
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6899      	ldr	r1, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f36:	025a      	lsls	r2, r3, #9
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6899      	ldr	r1, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	029a      	lsls	r2, r3, #10
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40012300 	.word	0x40012300
 8002f74:	0f000001 	.word	0x0f000001

08002f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002faa:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	60d3      	str	r3, [r2, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 0307 	and.w	r3, r3, #7
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	6039      	str	r1, [r7, #0]
 8002fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	db0a      	blt.n	8003006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	490c      	ldr	r1, [pc, #48]	; (8003028 <__NVIC_SetPriority+0x4c>)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	0112      	lsls	r2, r2, #4
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	440b      	add	r3, r1
 8003000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003004:	e00a      	b.n	800301c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	4908      	ldr	r1, [pc, #32]	; (800302c <__NVIC_SetPriority+0x50>)
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	3b04      	subs	r3, #4
 8003014:	0112      	lsls	r2, r2, #4
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	440b      	add	r3, r1
 800301a:	761a      	strb	r2, [r3, #24]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000e100 	.word	0xe000e100
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f1c3 0307 	rsb	r3, r3, #7
 800304a:	2b04      	cmp	r3, #4
 800304c:	bf28      	it	cs
 800304e:	2304      	movcs	r3, #4
 8003050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3304      	adds	r3, #4
 8003056:	2b06      	cmp	r3, #6
 8003058:	d902      	bls.n	8003060 <NVIC_EncodePriority+0x30>
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3b03      	subs	r3, #3
 800305e:	e000      	b.n	8003062 <NVIC_EncodePriority+0x32>
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43da      	mvns	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	401a      	ands	r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	43d9      	mvns	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003088:	4313      	orrs	r3, r2
         );
}
 800308a:	4618      	mov	r0, r3
 800308c:	3724      	adds	r7, #36	; 0x24
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030a8:	d301      	bcc.n	80030ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030aa:	2301      	movs	r3, #1
 80030ac:	e00f      	b.n	80030ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ae:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <SysTick_Config+0x40>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030b6:	210f      	movs	r1, #15
 80030b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030bc:	f7ff ff8e 	bl	8002fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <SysTick_Config+0x40>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030c6:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <SysTick_Config+0x40>)
 80030c8:	2207      	movs	r2, #7
 80030ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	e000e010 	.word	0xe000e010

080030dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ff47 	bl	8002f78 <__NVIC_SetPriorityGrouping>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003104:	f7ff ff5c 	bl	8002fc0 <__NVIC_GetPriorityGrouping>
 8003108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	6978      	ldr	r0, [r7, #20]
 8003110:	f7ff ff8e 	bl	8003030 <NVIC_EncodePriority>
 8003114:	4602      	mov	r2, r0
 8003116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff5d 	bl	8002fdc <__NVIC_SetPriority>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff ffb0 	bl	8003098 <SysTick_Config>
 8003138:	4603      	mov	r3, r0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003144:	b480      	push	{r7}
 8003146:	b089      	sub	sp, #36	; 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	e16b      	b.n	8003438 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003160:	2201      	movs	r2, #1
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	429a      	cmp	r2, r3
 800317a:	f040 815a 	bne.w	8003432 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d005      	beq.n	8003196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003192:	2b02      	cmp	r3, #2
 8003194:	d130      	bne.n	80031f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	2203      	movs	r2, #3
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031cc:	2201      	movs	r2, #1
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 0201 	and.w	r2, r3, #1
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b03      	cmp	r3, #3
 8003202:	d017      	beq.n	8003234 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	2203      	movs	r2, #3
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d123      	bne.n	8003288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	08da      	lsrs	r2, r3, #3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3208      	adds	r2, #8
 8003248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800324c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	220f      	movs	r2, #15
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	08da      	lsrs	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3208      	adds	r2, #8
 8003282:	69b9      	ldr	r1, [r7, #24]
 8003284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	2203      	movs	r2, #3
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0203 	and.w	r2, r3, #3
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80b4 	beq.w	8003432 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4b60      	ldr	r3, [pc, #384]	; (8003450 <HAL_GPIO_Init+0x30c>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	4a5f      	ldr	r2, [pc, #380]	; (8003450 <HAL_GPIO_Init+0x30c>)
 80032d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d8:	6453      	str	r3, [r2, #68]	; 0x44
 80032da:	4b5d      	ldr	r3, [pc, #372]	; (8003450 <HAL_GPIO_Init+0x30c>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032e6:	4a5b      	ldr	r2, [pc, #364]	; (8003454 <HAL_GPIO_Init+0x310>)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	3302      	adds	r3, #2
 80032ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	220f      	movs	r2, #15
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a52      	ldr	r2, [pc, #328]	; (8003458 <HAL_GPIO_Init+0x314>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02b      	beq.n	800336a <HAL_GPIO_Init+0x226>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a51      	ldr	r2, [pc, #324]	; (800345c <HAL_GPIO_Init+0x318>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d025      	beq.n	8003366 <HAL_GPIO_Init+0x222>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a50      	ldr	r2, [pc, #320]	; (8003460 <HAL_GPIO_Init+0x31c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01f      	beq.n	8003362 <HAL_GPIO_Init+0x21e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4f      	ldr	r2, [pc, #316]	; (8003464 <HAL_GPIO_Init+0x320>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d019      	beq.n	800335e <HAL_GPIO_Init+0x21a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4e      	ldr	r2, [pc, #312]	; (8003468 <HAL_GPIO_Init+0x324>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_GPIO_Init+0x216>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4d      	ldr	r2, [pc, #308]	; (800346c <HAL_GPIO_Init+0x328>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00d      	beq.n	8003356 <HAL_GPIO_Init+0x212>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4c      	ldr	r2, [pc, #304]	; (8003470 <HAL_GPIO_Init+0x32c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <HAL_GPIO_Init+0x20e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4b      	ldr	r2, [pc, #300]	; (8003474 <HAL_GPIO_Init+0x330>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_GPIO_Init+0x20a>
 800334a:	2307      	movs	r3, #7
 800334c:	e00e      	b.n	800336c <HAL_GPIO_Init+0x228>
 800334e:	2308      	movs	r3, #8
 8003350:	e00c      	b.n	800336c <HAL_GPIO_Init+0x228>
 8003352:	2306      	movs	r3, #6
 8003354:	e00a      	b.n	800336c <HAL_GPIO_Init+0x228>
 8003356:	2305      	movs	r3, #5
 8003358:	e008      	b.n	800336c <HAL_GPIO_Init+0x228>
 800335a:	2304      	movs	r3, #4
 800335c:	e006      	b.n	800336c <HAL_GPIO_Init+0x228>
 800335e:	2303      	movs	r3, #3
 8003360:	e004      	b.n	800336c <HAL_GPIO_Init+0x228>
 8003362:	2302      	movs	r3, #2
 8003364:	e002      	b.n	800336c <HAL_GPIO_Init+0x228>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_GPIO_Init+0x228>
 800336a:	2300      	movs	r3, #0
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	f002 0203 	and.w	r2, r2, #3
 8003372:	0092      	lsls	r2, r2, #2
 8003374:	4093      	lsls	r3, r2
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800337c:	4935      	ldr	r1, [pc, #212]	; (8003454 <HAL_GPIO_Init+0x310>)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	089b      	lsrs	r3, r3, #2
 8003382:	3302      	adds	r3, #2
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800338a:	4b3b      	ldr	r3, [pc, #236]	; (8003478 <HAL_GPIO_Init+0x334>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ae:	4a32      	ldr	r2, [pc, #200]	; (8003478 <HAL_GPIO_Init+0x334>)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033b4:	4b30      	ldr	r3, [pc, #192]	; (8003478 <HAL_GPIO_Init+0x334>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033d8:	4a27      	ldr	r2, [pc, #156]	; (8003478 <HAL_GPIO_Init+0x334>)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033de:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_GPIO_Init+0x334>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003402:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <HAL_GPIO_Init+0x334>)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_GPIO_Init+0x334>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800342c:	4a12      	ldr	r2, [pc, #72]	; (8003478 <HAL_GPIO_Init+0x334>)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3301      	adds	r3, #1
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	2b0f      	cmp	r3, #15
 800343c:	f67f ae90 	bls.w	8003160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	3724      	adds	r7, #36	; 0x24
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	40013800 	.word	0x40013800
 8003458:	40020000 	.word	0x40020000
 800345c:	40020400 	.word	0x40020400
 8003460:	40020800 	.word	0x40020800
 8003464:	40020c00 	.word	0x40020c00
 8003468:	40021000 	.word	0x40021000
 800346c:	40021400 	.word	0x40021400
 8003470:	40021800 	.word	0x40021800
 8003474:	40021c00 	.word	0x40021c00
 8003478:	40013c00 	.word	0x40013c00

0800347c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	887b      	ldrh	r3, [r7, #2]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
 8003498:	e001      	b.n	800349e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
 80034b8:	4613      	mov	r3, r2
 80034ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034bc:	787b      	ldrb	r3, [r7, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034c8:	e003      	b.n	80034d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ca:	887b      	ldrh	r3, [r7, #2]
 80034cc:	041a      	lsls	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	619a      	str	r2, [r3, #24]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034de:	b480      	push	{r7}
 80034e0:	b085      	sub	sp, #20
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034f0:	887a      	ldrh	r2, [r7, #2]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4013      	ands	r3, r2
 80034f6:	041a      	lsls	r2, r3, #16
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	43d9      	mvns	r1, r3
 80034fc:	887b      	ldrh	r3, [r7, #2]
 80034fe:	400b      	ands	r3, r1
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	619a      	str	r2, [r3, #24]
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f806 	bl	8003544 <HAL_GPIO_EXTI_Callback>
  }
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40013c00 	.word	0x40013c00

08003544 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e264      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d075      	beq.n	8003666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357a:	4ba3      	ldr	r3, [pc, #652]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d00c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003586:	4ba0      	ldr	r3, [pc, #640]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800358e:	2b08      	cmp	r3, #8
 8003590:	d112      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4b9d      	ldr	r3, [pc, #628]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359e:	d10b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	4b99      	ldr	r3, [pc, #612]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05b      	beq.n	8003664 <HAL_RCC_OscConfig+0x108>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d157      	bne.n	8003664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e23f      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d106      	bne.n	80035d0 <HAL_RCC_OscConfig+0x74>
 80035c2:	4b91      	ldr	r3, [pc, #580]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a90      	ldr	r2, [pc, #576]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e01d      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x98>
 80035da:	4b8b      	ldr	r3, [pc, #556]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a8a      	ldr	r2, [pc, #552]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b88      	ldr	r3, [pc, #544]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a87      	ldr	r2, [pc, #540]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035f4:	4b84      	ldr	r3, [pc, #528]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a83      	ldr	r2, [pc, #524]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b81      	ldr	r3, [pc, #516]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a80      	ldr	r2, [pc, #512]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7ff f8b4 	bl	8002780 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361c:	f7ff f8b0 	bl	8002780 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e204      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b76      	ldr	r3, [pc, #472]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0xc0>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7ff f8a0 	bl	8002780 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7ff f89c 	bl	8002780 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1f0      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0xe8>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d063      	beq.n	800373a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003672:	4b65      	ldr	r3, [pc, #404]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367e:	4b62      	ldr	r3, [pc, #392]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003686:	2b08      	cmp	r3, #8
 8003688:	d11c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d116      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	4b5c      	ldr	r3, [pc, #368]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e1c4      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ae:	4b56      	ldr	r3, [pc, #344]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4952      	ldr	r1, [pc, #328]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	e03a      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036cc:	4b4f      	ldr	r3, [pc, #316]	; (800380c <HAL_RCC_OscConfig+0x2b0>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7ff f855 	bl	8002780 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036da:	f7ff f851 	bl	8002780 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e1a5      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	4b46      	ldr	r3, [pc, #280]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b43      	ldr	r3, [pc, #268]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4940      	ldr	r1, [pc, #256]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
 800370c:	e015      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370e:	4b3f      	ldr	r3, [pc, #252]	; (800380c <HAL_RCC_OscConfig+0x2b0>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7ff f834 	bl	8002780 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371c:	f7ff f830 	bl	8002780 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e184      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	4b36      	ldr	r3, [pc, #216]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d030      	beq.n	80037a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374e:	4b30      	ldr	r3, [pc, #192]	; (8003810 <HAL_RCC_OscConfig+0x2b4>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7ff f814 	bl	8002780 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375c:	f7ff f810 	bl	8002780 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e164      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	4b26      	ldr	r3, [pc, #152]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x200>
 800377a:	e015      	b.n	80037a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RCC_OscConfig+0x2b4>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fe fffd 	bl	8002780 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378a:	f7fe fff9 	bl	8002780 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e14d      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379c:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 800379e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f0      	bne.n	800378a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a0 	beq.w	80038f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ba:	4b13      	ldr	r3, [pc, #76]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10f      	bne.n	80037e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6413      	str	r3, [r2, #64]	; 0x40
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_RCC_OscConfig+0x2b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d121      	bne.n	8003836 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_RCC_OscConfig+0x2b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a07      	ldr	r2, [pc, #28]	; (8003814 <HAL_RCC_OscConfig+0x2b8>)
 80037f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fe:	f7fe ffbf 	bl	8002780 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	e011      	b.n	800382a <HAL_RCC_OscConfig+0x2ce>
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800
 800380c:	42470000 	.word	0x42470000
 8003810:	42470e80 	.word	0x42470e80
 8003814:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003818:	f7fe ffb2 	bl	8002780 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e106      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382a:	4b85      	ldr	r3, [pc, #532]	; (8003a40 <HAL_RCC_OscConfig+0x4e4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d106      	bne.n	800384c <HAL_RCC_OscConfig+0x2f0>
 800383e:	4b81      	ldr	r3, [pc, #516]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	4a80      	ldr	r2, [pc, #512]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6713      	str	r3, [r2, #112]	; 0x70
 800384a:	e01c      	b.n	8003886 <HAL_RCC_OscConfig+0x32a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b05      	cmp	r3, #5
 8003852:	d10c      	bne.n	800386e <HAL_RCC_OscConfig+0x312>
 8003854:	4b7b      	ldr	r3, [pc, #492]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	4a7a      	ldr	r2, [pc, #488]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 800385a:	f043 0304 	orr.w	r3, r3, #4
 800385e:	6713      	str	r3, [r2, #112]	; 0x70
 8003860:	4b78      	ldr	r3, [pc, #480]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a77      	ldr	r2, [pc, #476]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
 800386c:	e00b      	b.n	8003886 <HAL_RCC_OscConfig+0x32a>
 800386e:	4b75      	ldr	r3, [pc, #468]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a74      	ldr	r2, [pc, #464]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
 800387a:	4b72      	ldr	r3, [pc, #456]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a71      	ldr	r2, [pc, #452]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d015      	beq.n	80038ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7fe ff77 	bl	8002780 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003894:	e00a      	b.n	80038ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fe ff73 	bl	8002780 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e0c5      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	4b65      	ldr	r3, [pc, #404]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ee      	beq.n	8003896 <HAL_RCC_OscConfig+0x33a>
 80038b8:	e014      	b.n	80038e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ba:	f7fe ff61 	bl	8002780 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fe ff5d 	bl	8002780 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e0af      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	4b5a      	ldr	r3, [pc, #360]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ee      	bne.n	80038c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ea:	4b56      	ldr	r3, [pc, #344]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	4a55      	ldr	r2, [pc, #340]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 80038f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 809b 	beq.w	8003a36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003900:	4b50      	ldr	r3, [pc, #320]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b08      	cmp	r3, #8
 800390a:	d05c      	beq.n	80039c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d141      	bne.n	8003998 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003914:	4b4c      	ldr	r3, [pc, #304]	; (8003a48 <HAL_RCC_OscConfig+0x4ec>)
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fe ff31 	bl	8002780 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003922:	f7fe ff2d 	bl	8002780 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e081      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003934:	4b43      	ldr	r3, [pc, #268]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	019b      	lsls	r3, r3, #6
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	3b01      	subs	r3, #1
 800395a:	041b      	lsls	r3, r3, #16
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	061b      	lsls	r3, r3, #24
 8003964:	4937      	ldr	r1, [pc, #220]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800396a:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <HAL_RCC_OscConfig+0x4ec>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fe ff06 	bl	8002780 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003978:	f7fe ff02 	bl	8002780 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e056      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398a:	4b2e      	ldr	r3, [pc, #184]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x41c>
 8003996:	e04e      	b.n	8003a36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003998:	4b2b      	ldr	r3, [pc, #172]	; (8003a48 <HAL_RCC_OscConfig+0x4ec>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399e:	f7fe feef 	bl	8002780 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fe feeb 	bl	8002780 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e03f      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCC_OscConfig+0x44a>
 80039c4:	e037      	b.n	8003a36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e032      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d2:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <HAL_RCC_OscConfig+0x4e8>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d028      	beq.n	8003a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d121      	bne.n	8003a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d11a      	bne.n	8003a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a02:	4013      	ands	r3, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d111      	bne.n	8003a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d107      	bne.n	8003a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40007000 	.word	0x40007000
 8003a44:	40023800 	.word	0x40023800
 8003a48:	42470060 	.word	0x42470060

08003a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0cc      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a60:	4b68      	ldr	r3, [pc, #416]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d90c      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0b8      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d020      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a58      	ldr	r2, [pc, #352]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab8:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	494d      	ldr	r1, [pc, #308]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d044      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d119      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e07f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d003      	beq.n	8003b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0a:	4b3f      	ldr	r3, [pc, #252]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e06f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1a:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e067      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4934      	ldr	r1, [pc, #208]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b3c:	f7fe fe20 	bl	8002780 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fe fe1c 	bl	8002780 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e04f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 020c 	and.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1eb      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d20c      	bcs.n	8003b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e032      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4916      	ldr	r1, [pc, #88]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	490e      	ldr	r1, [pc, #56]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bd2:	f000 f821 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	490a      	ldr	r1, [pc, #40]	; (8003c0c <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	5ccb      	ldrb	r3, [r1, r3]
 8003be6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fd80 	bl	80026f8 <HAL_InitTick>

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023c00 	.word	0x40023c00
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	08006498 	.word	0x08006498
 8003c10:	20000014 	.word	0x20000014
 8003c14:	20000018 	.word	0x20000018

08003c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	b5b0      	push	{r4, r5, r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c1e:	2100      	movs	r1, #0
 8003c20:	6079      	str	r1, [r7, #4]
 8003c22:	2100      	movs	r1, #0
 8003c24:	60f9      	str	r1, [r7, #12]
 8003c26:	2100      	movs	r1, #0
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c2e:	4952      	ldr	r1, [pc, #328]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c30:	6889      	ldr	r1, [r1, #8]
 8003c32:	f001 010c 	and.w	r1, r1, #12
 8003c36:	2908      	cmp	r1, #8
 8003c38:	d00d      	beq.n	8003c56 <HAL_RCC_GetSysClockFreq+0x3e>
 8003c3a:	2908      	cmp	r1, #8
 8003c3c:	f200 8094 	bhi.w	8003d68 <HAL_RCC_GetSysClockFreq+0x150>
 8003c40:	2900      	cmp	r1, #0
 8003c42:	d002      	beq.n	8003c4a <HAL_RCC_GetSysClockFreq+0x32>
 8003c44:	2904      	cmp	r1, #4
 8003c46:	d003      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x38>
 8003c48:	e08e      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c4a:	4b4c      	ldr	r3, [pc, #304]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x164>)
 8003c4c:	60bb      	str	r3, [r7, #8]
       break;
 8003c4e:	e08e      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c50:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c52:	60bb      	str	r3, [r7, #8]
      break;
 8003c54:	e08b      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c56:	4948      	ldr	r1, [pc, #288]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c58:	6849      	ldr	r1, [r1, #4]
 8003c5a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003c5e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c60:	4945      	ldr	r1, [pc, #276]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c62:	6849      	ldr	r1, [r1, #4]
 8003c64:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003c68:	2900      	cmp	r1, #0
 8003c6a:	d024      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6c:	4942      	ldr	r1, [pc, #264]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c6e:	6849      	ldr	r1, [r1, #4]
 8003c70:	0989      	lsrs	r1, r1, #6
 8003c72:	4608      	mov	r0, r1
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003c7c:	f04f 0500 	mov.w	r5, #0
 8003c80:	ea00 0204 	and.w	r2, r0, r4
 8003c84:	ea01 0305 	and.w	r3, r1, r5
 8003c88:	493d      	ldr	r1, [pc, #244]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c8a:	fb01 f003 	mul.w	r0, r1, r3
 8003c8e:	2100      	movs	r1, #0
 8003c90:	fb01 f102 	mul.w	r1, r1, r2
 8003c94:	1844      	adds	r4, r0, r1
 8003c96:	493a      	ldr	r1, [pc, #232]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c98:	fba2 0101 	umull	r0, r1, r2, r1
 8003c9c:	1863      	adds	r3, r4, r1
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	f7fc ff4a 	bl	8000b40 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e04a      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb6:	4b30      	ldr	r3, [pc, #192]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	ea02 0400 	and.w	r4, r2, r0
 8003cce:	ea03 0501 	and.w	r5, r3, r1
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	014b      	lsls	r3, r1, #5
 8003ce0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ce4:	0142      	lsls	r2, r0, #5
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	1b00      	subs	r0, r0, r4
 8003cec:	eb61 0105 	sbc.w	r1, r1, r5
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	018b      	lsls	r3, r1, #6
 8003cfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cfe:	0182      	lsls	r2, r0, #6
 8003d00:	1a12      	subs	r2, r2, r0
 8003d02:	eb63 0301 	sbc.w	r3, r3, r1
 8003d06:	f04f 0000 	mov.w	r0, #0
 8003d0a:	f04f 0100 	mov.w	r1, #0
 8003d0e:	00d9      	lsls	r1, r3, #3
 8003d10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d14:	00d0      	lsls	r0, r2, #3
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	1912      	adds	r2, r2, r4
 8003d1c:	eb45 0303 	adc.w	r3, r5, r3
 8003d20:	f04f 0000 	mov.w	r0, #0
 8003d24:	f04f 0100 	mov.w	r1, #0
 8003d28:	0299      	lsls	r1, r3, #10
 8003d2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d2e:	0290      	lsls	r0, r2, #10
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4610      	mov	r0, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	f7fc fefe 	bl	8000b40 <__aeabi_uldivmod>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4613      	mov	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0c1b      	lsrs	r3, r3, #16
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	60bb      	str	r3, [r7, #8]
      break;
 8003d66:	e002      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x164>)
 8003d6a:	60bb      	str	r3, [r7, #8]
      break;
 8003d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bdb0      	pop	{r4, r5, r7, pc}
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	00f42400 	.word	0x00f42400
 8003d80:	017d7840 	.word	0x017d7840

08003d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000014 	.word	0x20000014

08003d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003da0:	f7ff fff0 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003da4:	4602      	mov	r2, r0
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	0a9b      	lsrs	r3, r3, #10
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	4903      	ldr	r1, [pc, #12]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db2:	5ccb      	ldrb	r3, [r1, r3]
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	080064a8 	.word	0x080064a8

08003dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc8:	f7ff ffdc 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0b5b      	lsrs	r3, r3, #13
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4903      	ldr	r1, [pc, #12]	; (8003de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	080064a8 	.word	0x080064a8

08003dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e041      	b.n	8003e82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fe f8b0 	bl	8001f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f000 fa72 	bl	8004314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d001      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e046      	b.n	8003f32 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a23      	ldr	r2, [pc, #140]	; (8003f40 <HAL_TIM_Base_Start+0xb4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d022      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebe:	d01d      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <HAL_TIM_Base_Start+0xb8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d018      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_TIM_Base_Start+0xbc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <HAL_TIM_Base_Start+0xc0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <HAL_TIM_Base_Start+0xc4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <HAL_TIM_Base_Start+0xc8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_Base_Start+0x70>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_TIM_Base_Start+0xcc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d111      	bne.n	8003f20 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b06      	cmp	r3, #6
 8003f0c:	d010      	beq.n	8003f30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	e007      	b.n	8003f30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40001800 	.word	0x40001800

08003f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e041      	b.n	8003ff2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f839 	bl	8003ffa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f000 f9ba 	bl	8004314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004026:	2302      	movs	r3, #2
 8004028:	e0ac      	b.n	8004184 <HAL_TIM_PWM_ConfigChannel+0x174>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b0c      	cmp	r3, #12
 8004036:	f200 809f 	bhi.w	8004178 <HAL_TIM_PWM_ConfigChannel+0x168>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004075 	.word	0x08004075
 8004044:	08004179 	.word	0x08004179
 8004048:	08004179 	.word	0x08004179
 800404c:	08004179 	.word	0x08004179
 8004050:	080040b5 	.word	0x080040b5
 8004054:	08004179 	.word	0x08004179
 8004058:	08004179 	.word	0x08004179
 800405c:	08004179 	.word	0x08004179
 8004060:	080040f7 	.word	0x080040f7
 8004064:	08004179 	.word	0x08004179
 8004068:	08004179 	.word	0x08004179
 800406c:	08004179 	.word	0x08004179
 8004070:	08004137 	.word	0x08004137
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f9ea 	bl	8004454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0208 	orr.w	r2, r2, #8
 800408e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0204 	bic.w	r2, r2, #4
 800409e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6999      	ldr	r1, [r3, #24]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	619a      	str	r2, [r3, #24]
      break;
 80040b2:	e062      	b.n	800417a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fa3a 	bl	8004534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6999      	ldr	r1, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	021a      	lsls	r2, r3, #8
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	619a      	str	r2, [r3, #24]
      break;
 80040f4:	e041      	b.n	800417a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fa8f 	bl	8004620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0208 	orr.w	r2, r2, #8
 8004110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0204 	bic.w	r2, r2, #4
 8004120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69d9      	ldr	r1, [r3, #28]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	61da      	str	r2, [r3, #28]
      break;
 8004134:	e021      	b.n	800417a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fae3 	bl	8004708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69d9      	ldr	r1, [r3, #28]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	021a      	lsls	r2, r3, #8
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	61da      	str	r2, [r3, #28]
      break;
 8004176:	e000      	b.n	800417a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004178:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_TIM_ConfigClockSource+0x18>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e0b3      	b.n	800430c <HAL_TIM_ConfigClockSource+0x180>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041dc:	d03e      	beq.n	800425c <HAL_TIM_ConfigClockSource+0xd0>
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e2:	f200 8087 	bhi.w	80042f4 <HAL_TIM_ConfigClockSource+0x168>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	f000 8085 	beq.w	80042f8 <HAL_TIM_ConfigClockSource+0x16c>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f2:	d87f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x168>
 80041f4:	2b70      	cmp	r3, #112	; 0x70
 80041f6:	d01a      	beq.n	800422e <HAL_TIM_ConfigClockSource+0xa2>
 80041f8:	2b70      	cmp	r3, #112	; 0x70
 80041fa:	d87b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x168>
 80041fc:	2b60      	cmp	r3, #96	; 0x60
 80041fe:	d050      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x116>
 8004200:	2b60      	cmp	r3, #96	; 0x60
 8004202:	d877      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x168>
 8004204:	2b50      	cmp	r3, #80	; 0x50
 8004206:	d03c      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0xf6>
 8004208:	2b50      	cmp	r3, #80	; 0x50
 800420a:	d873      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x168>
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d058      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x136>
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d86f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x168>
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d064      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x156>
 8004218:	2b30      	cmp	r3, #48	; 0x30
 800421a:	d86b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x168>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d060      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x156>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d867      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x168>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05c      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x156>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d05a      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800422c:	e062      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f000 fb33 	bl	80048a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004250:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	609a      	str	r2, [r3, #8]
      break;
 800425a:	e04e      	b.n	80042fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6899      	ldr	r1, [r3, #8]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f000 fb1c 	bl	80048a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427e:	609a      	str	r2, [r3, #8]
      break;
 8004280:	e03b      	b.n	80042fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6859      	ldr	r1, [r3, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	461a      	mov	r2, r3
 8004290:	f000 fa90 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2150      	movs	r1, #80	; 0x50
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fae9 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 80042a0:	e02b      	b.n	80042fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f000 faaf 	bl	8004812 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2160      	movs	r1, #96	; 0x60
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fad9 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 80042c0:	e01b      	b.n	80042fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f000 fa70 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2140      	movs	r1, #64	; 0x40
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fac9 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 80042e0:	e00b      	b.n	80042fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f000 fac0 	bl	8004872 <TIM_ITRx_SetConfig>
        break;
 80042f2:	e002      	b.n	80042fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042f4:	bf00      	nop
 80042f6:	e000      	b.n	80042fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a40      	ldr	r2, [pc, #256]	; (8004428 <TIM_Base_SetConfig+0x114>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d013      	beq.n	8004354 <TIM_Base_SetConfig+0x40>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004332:	d00f      	beq.n	8004354 <TIM_Base_SetConfig+0x40>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a3d      	ldr	r2, [pc, #244]	; (800442c <TIM_Base_SetConfig+0x118>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00b      	beq.n	8004354 <TIM_Base_SetConfig+0x40>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a3c      	ldr	r2, [pc, #240]	; (8004430 <TIM_Base_SetConfig+0x11c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a3b      	ldr	r2, [pc, #236]	; (8004434 <TIM_Base_SetConfig+0x120>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a3a      	ldr	r2, [pc, #232]	; (8004438 <TIM_Base_SetConfig+0x124>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d108      	bne.n	8004366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2f      	ldr	r2, [pc, #188]	; (8004428 <TIM_Base_SetConfig+0x114>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02b      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d027      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a2c      	ldr	r2, [pc, #176]	; (800442c <TIM_Base_SetConfig+0x118>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d023      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a2b      	ldr	r2, [pc, #172]	; (8004430 <TIM_Base_SetConfig+0x11c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01f      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a2a      	ldr	r2, [pc, #168]	; (8004434 <TIM_Base_SetConfig+0x120>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01b      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a29      	ldr	r2, [pc, #164]	; (8004438 <TIM_Base_SetConfig+0x124>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d017      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a28      	ldr	r2, [pc, #160]	; (800443c <TIM_Base_SetConfig+0x128>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a27      	ldr	r2, [pc, #156]	; (8004440 <TIM_Base_SetConfig+0x12c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00f      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a26      	ldr	r2, [pc, #152]	; (8004444 <TIM_Base_SetConfig+0x130>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a25      	ldr	r2, [pc, #148]	; (8004448 <TIM_Base_SetConfig+0x134>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d007      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a24      	ldr	r2, [pc, #144]	; (800444c <TIM_Base_SetConfig+0x138>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a23      	ldr	r2, [pc, #140]	; (8004450 <TIM_Base_SetConfig+0x13c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d108      	bne.n	80043d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <TIM_Base_SetConfig+0x114>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_Base_SetConfig+0xf8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a0c      	ldr	r2, [pc, #48]	; (8004438 <TIM_Base_SetConfig+0x124>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d103      	bne.n	8004414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	615a      	str	r2, [r3, #20]
}
 800441a:	bf00      	nop
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40010000 	.word	0x40010000
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40010400 	.word	0x40010400
 800443c:	40014000 	.word	0x40014000
 8004440:	40014400 	.word	0x40014400
 8004444:	40014800 	.word	0x40014800
 8004448:	40001800 	.word	0x40001800
 800444c:	40001c00 	.word	0x40001c00
 8004450:	40002000 	.word	0x40002000

08004454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f023 0201 	bic.w	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0303 	bic.w	r3, r3, #3
 800448a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f023 0302 	bic.w	r3, r3, #2
 800449c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a20      	ldr	r2, [pc, #128]	; (800452c <TIM_OC1_SetConfig+0xd8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_OC1_SetConfig+0x64>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a1f      	ldr	r2, [pc, #124]	; (8004530 <TIM_OC1_SetConfig+0xdc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d10c      	bne.n	80044d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0308 	bic.w	r3, r3, #8
 80044be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f023 0304 	bic.w	r3, r3, #4
 80044d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a15      	ldr	r2, [pc, #84]	; (800452c <TIM_OC1_SetConfig+0xd8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <TIM_OC1_SetConfig+0x8e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a14      	ldr	r2, [pc, #80]	; (8004530 <TIM_OC1_SetConfig+0xdc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d111      	bne.n	8004506 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	621a      	str	r2, [r3, #32]
}
 8004520:	bf00      	nop
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	40010000 	.word	0x40010000
 8004530:	40010400 	.word	0x40010400

08004534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0210 	bic.w	r2, r3, #16
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0320 	bic.w	r3, r3, #32
 800457e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a22      	ldr	r2, [pc, #136]	; (8004618 <TIM_OC2_SetConfig+0xe4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_OC2_SetConfig+0x68>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a21      	ldr	r2, [pc, #132]	; (800461c <TIM_OC2_SetConfig+0xe8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d10d      	bne.n	80045b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a17      	ldr	r2, [pc, #92]	; (8004618 <TIM_OC2_SetConfig+0xe4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_OC2_SetConfig+0x94>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a16      	ldr	r2, [pc, #88]	; (800461c <TIM_OC2_SetConfig+0xe8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d113      	bne.n	80045f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	621a      	str	r2, [r3, #32]
}
 800460a:	bf00      	nop
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40010000 	.word	0x40010000
 800461c:	40010400 	.word	0x40010400

08004620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a21      	ldr	r2, [pc, #132]	; (8004700 <TIM_OC3_SetConfig+0xe0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_OC3_SetConfig+0x66>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a20      	ldr	r2, [pc, #128]	; (8004704 <TIM_OC3_SetConfig+0xe4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d10d      	bne.n	80046a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800468c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a16      	ldr	r2, [pc, #88]	; (8004700 <TIM_OC3_SetConfig+0xe0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d003      	beq.n	80046b2 <TIM_OC3_SetConfig+0x92>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a15      	ldr	r2, [pc, #84]	; (8004704 <TIM_OC3_SetConfig+0xe4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d113      	bne.n	80046da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	621a      	str	r2, [r3, #32]
}
 80046f4:	bf00      	nop
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	40010000 	.word	0x40010000
 8004704:	40010400 	.word	0x40010400

08004708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	031b      	lsls	r3, r3, #12
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a12      	ldr	r2, [pc, #72]	; (80047ac <TIM_OC4_SetConfig+0xa4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_OC4_SetConfig+0x68>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a11      	ldr	r2, [pc, #68]	; (80047b0 <TIM_OC4_SetConfig+0xa8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d109      	bne.n	8004784 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	019b      	lsls	r3, r3, #6
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40010000 	.word	0x40010000
 80047b0:	40010400 	.word	0x40010400

080047b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 030a 	bic.w	r3, r3, #10
 80047f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004812:	b480      	push	{r7}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f023 0210 	bic.w	r2, r3, #16
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800483c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	031b      	lsls	r3, r3, #12
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800484e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004872:	b480      	push	{r7}
 8004874:	b085      	sub	sp, #20
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	f043 0307 	orr.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	021a      	lsls	r2, r3, #8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e03f      	b.n	800497a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd fba4 	bl	800205c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	; 0x24
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800492a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f905 	bl	8004b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b08a      	sub	sp, #40	; 0x28
 8004986:	af02      	add	r7, sp, #8
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d17c      	bne.n	8004a9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_UART_Transmit+0x2c>
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e075      	b.n	8004a9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_UART_Transmit+0x3e>
 80049bc:	2302      	movs	r3, #2
 80049be:	e06e      	b.n	8004a9e <HAL_UART_Transmit+0x11c>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2221      	movs	r2, #33	; 0x21
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049d6:	f7fd fed3 	bl	8002780 <HAL_GetTick>
 80049da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	88fa      	ldrh	r2, [r7, #6]
 80049e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	88fa      	ldrh	r2, [r7, #6]
 80049e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f0:	d108      	bne.n	8004a04 <HAL_UART_Transmit+0x82>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d104      	bne.n	8004a04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	e003      	b.n	8004a0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a14:	e02a      	b.n	8004a6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f840 	bl	8004aa6 <UART_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e036      	b.n	8004a9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10b      	bne.n	8004a4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	3302      	adds	r3, #2
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	e007      	b.n	8004a5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1cf      	bne.n	8004a16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2140      	movs	r1, #64	; 0x40
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f810 	bl	8004aa6 <UART_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e006      	b.n	8004a9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e000      	b.n	8004a9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
  }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab6:	e02c      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004abe:	d028      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ac6:	f7fd fe5b 	bl	8002780 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d21d      	bcs.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ae4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e00f      	b.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	bf0c      	ite	eq
 8004b22:	2301      	moveq	r3, #1
 8004b24:	2300      	movne	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d0c3      	beq.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b40:	b09f      	sub	sp, #124	; 0x7c
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b52:	68d9      	ldr	r1, [r3, #12]
 8004b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	ea40 0301 	orr.w	r3, r0, r1
 8004b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b80:	f021 010c 	bic.w	r1, r1, #12
 8004b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9a:	6999      	ldr	r1, [r3, #24]
 8004b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	ea40 0301 	orr.w	r3, r0, r1
 8004ba4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4bc5      	ldr	r3, [pc, #788]	; (8004ec0 <UART_SetConfig+0x384>)
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d004      	beq.n	8004bba <UART_SetConfig+0x7e>
 8004bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4bc3      	ldr	r3, [pc, #780]	; (8004ec4 <UART_SetConfig+0x388>)
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d103      	bne.n	8004bc2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bba:	f7ff f903 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 8004bbe:	6778      	str	r0, [r7, #116]	; 0x74
 8004bc0:	e002      	b.n	8004bc8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bc2:	f7ff f8eb 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 8004bc6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd0:	f040 80b6 	bne.w	8004d40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd6:	461c      	mov	r4, r3
 8004bd8:	f04f 0500 	mov.w	r5, #0
 8004bdc:	4622      	mov	r2, r4
 8004bde:	462b      	mov	r3, r5
 8004be0:	1891      	adds	r1, r2, r2
 8004be2:	6439      	str	r1, [r7, #64]	; 0x40
 8004be4:	415b      	adcs	r3, r3
 8004be6:	647b      	str	r3, [r7, #68]	; 0x44
 8004be8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bec:	1912      	adds	r2, r2, r4
 8004bee:	eb45 0303 	adc.w	r3, r5, r3
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f04f 0100 	mov.w	r1, #0
 8004bfa:	00d9      	lsls	r1, r3, #3
 8004bfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c00:	00d0      	lsls	r0, r2, #3
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	1911      	adds	r1, r2, r4
 8004c08:	6639      	str	r1, [r7, #96]	; 0x60
 8004c0a:	416b      	adcs	r3, r5
 8004c0c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	1891      	adds	r1, r2, r2
 8004c1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c1c:	415b      	adcs	r3, r3
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c28:	f7fb ff8a 	bl	8000b40 <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4ba5      	ldr	r3, [pc, #660]	; (8004ec8 <UART_SetConfig+0x38c>)
 8004c32:	fba3 2302 	umull	r2, r3, r3, r2
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	011e      	lsls	r6, r3, #4
 8004c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c3c:	461c      	mov	r4, r3
 8004c3e:	f04f 0500 	mov.w	r5, #0
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	1891      	adds	r1, r2, r2
 8004c48:	6339      	str	r1, [r7, #48]	; 0x30
 8004c4a:	415b      	adcs	r3, r3
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c52:	1912      	adds	r2, r2, r4
 8004c54:	eb45 0303 	adc.w	r3, r5, r3
 8004c58:	f04f 0000 	mov.w	r0, #0
 8004c5c:	f04f 0100 	mov.w	r1, #0
 8004c60:	00d9      	lsls	r1, r3, #3
 8004c62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c66:	00d0      	lsls	r0, r2, #3
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	1911      	adds	r1, r2, r4
 8004c6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c70:	416b      	adcs	r3, r5
 8004c72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	1891      	adds	r1, r2, r2
 8004c80:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c82:	415b      	adcs	r3, r3
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004c8e:	f7fb ff57 	bl	8000b40 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4b8c      	ldr	r3, [pc, #560]	; (8004ec8 <UART_SetConfig+0x38c>)
 8004c98:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	2164      	movs	r1, #100	; 0x64
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	3332      	adds	r3, #50	; 0x32
 8004caa:	4a87      	ldr	r2, [pc, #540]	; (8004ec8 <UART_SetConfig+0x38c>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cb8:	441e      	add	r6, r3
 8004cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f04f 0100 	mov.w	r1, #0
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	1894      	adds	r4, r2, r2
 8004cc8:	623c      	str	r4, [r7, #32]
 8004cca:	415b      	adcs	r3, r3
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cd2:	1812      	adds	r2, r2, r0
 8004cd4:	eb41 0303 	adc.w	r3, r1, r3
 8004cd8:	f04f 0400 	mov.w	r4, #0
 8004cdc:	f04f 0500 	mov.w	r5, #0
 8004ce0:	00dd      	lsls	r5, r3, #3
 8004ce2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ce6:	00d4      	lsls	r4, r2, #3
 8004ce8:	4622      	mov	r2, r4
 8004cea:	462b      	mov	r3, r5
 8004cec:	1814      	adds	r4, r2, r0
 8004cee:	653c      	str	r4, [r7, #80]	; 0x50
 8004cf0:	414b      	adcs	r3, r1
 8004cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8004cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	1891      	adds	r1, r2, r2
 8004d00:	61b9      	str	r1, [r7, #24]
 8004d02:	415b      	adcs	r3, r3
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d0e:	f7fb ff17 	bl	8000b40 <__aeabi_uldivmod>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4b6c      	ldr	r3, [pc, #432]	; (8004ec8 <UART_SetConfig+0x38c>)
 8004d18:	fba3 1302 	umull	r1, r3, r3, r2
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	2164      	movs	r1, #100	; 0x64
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	3332      	adds	r3, #50	; 0x32
 8004d2a:	4a67      	ldr	r2, [pc, #412]	; (8004ec8 <UART_SetConfig+0x38c>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	f003 0207 	and.w	r2, r3, #7
 8004d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4432      	add	r2, r6
 8004d3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d3e:	e0b9      	b.n	8004eb4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d42:	461c      	mov	r4, r3
 8004d44:	f04f 0500 	mov.w	r5, #0
 8004d48:	4622      	mov	r2, r4
 8004d4a:	462b      	mov	r3, r5
 8004d4c:	1891      	adds	r1, r2, r2
 8004d4e:	6139      	str	r1, [r7, #16]
 8004d50:	415b      	adcs	r3, r3
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d58:	1912      	adds	r2, r2, r4
 8004d5a:	eb45 0303 	adc.w	r3, r5, r3
 8004d5e:	f04f 0000 	mov.w	r0, #0
 8004d62:	f04f 0100 	mov.w	r1, #0
 8004d66:	00d9      	lsls	r1, r3, #3
 8004d68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d6c:	00d0      	lsls	r0, r2, #3
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	eb12 0804 	adds.w	r8, r2, r4
 8004d76:	eb43 0905 	adc.w	r9, r3, r5
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f04f 0100 	mov.w	r1, #0
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	008b      	lsls	r3, r1, #2
 8004d8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d92:	0082      	lsls	r2, r0, #2
 8004d94:	4640      	mov	r0, r8
 8004d96:	4649      	mov	r1, r9
 8004d98:	f7fb fed2 	bl	8000b40 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4b49      	ldr	r3, [pc, #292]	; (8004ec8 <UART_SetConfig+0x38c>)
 8004da2:	fba3 2302 	umull	r2, r3, r3, r2
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	011e      	lsls	r6, r3, #4
 8004daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dac:	4618      	mov	r0, r3
 8004dae:	f04f 0100 	mov.w	r1, #0
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	1894      	adds	r4, r2, r2
 8004db8:	60bc      	str	r4, [r7, #8]
 8004dba:	415b      	adcs	r3, r3
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dc2:	1812      	adds	r2, r2, r0
 8004dc4:	eb41 0303 	adc.w	r3, r1, r3
 8004dc8:	f04f 0400 	mov.w	r4, #0
 8004dcc:	f04f 0500 	mov.w	r5, #0
 8004dd0:	00dd      	lsls	r5, r3, #3
 8004dd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dd6:	00d4      	lsls	r4, r2, #3
 8004dd8:	4622      	mov	r2, r4
 8004dda:	462b      	mov	r3, r5
 8004ddc:	1814      	adds	r4, r2, r0
 8004dde:	64bc      	str	r4, [r7, #72]	; 0x48
 8004de0:	414b      	adcs	r3, r1
 8004de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f04f 0100 	mov.w	r1, #0
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	008b      	lsls	r3, r1, #2
 8004df8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dfc:	0082      	lsls	r2, r0, #2
 8004dfe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e02:	f7fb fe9d 	bl	8000b40 <__aeabi_uldivmod>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ec8 <UART_SetConfig+0x38c>)
 8004e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	2164      	movs	r1, #100	; 0x64
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	3332      	adds	r3, #50	; 0x32
 8004e1e:	4a2a      	ldr	r2, [pc, #168]	; (8004ec8 <UART_SetConfig+0x38c>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2a:	441e      	add	r6, r3
 8004e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f04f 0100 	mov.w	r1, #0
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	1894      	adds	r4, r2, r2
 8004e3a:	603c      	str	r4, [r7, #0]
 8004e3c:	415b      	adcs	r3, r3
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e44:	1812      	adds	r2, r2, r0
 8004e46:	eb41 0303 	adc.w	r3, r1, r3
 8004e4a:	f04f 0400 	mov.w	r4, #0
 8004e4e:	f04f 0500 	mov.w	r5, #0
 8004e52:	00dd      	lsls	r5, r3, #3
 8004e54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e58:	00d4      	lsls	r4, r2, #3
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	eb12 0a00 	adds.w	sl, r2, r0
 8004e62:	eb43 0b01 	adc.w	fp, r3, r1
 8004e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f04f 0100 	mov.w	r1, #0
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	008b      	lsls	r3, r1, #2
 8004e7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e7e:	0082      	lsls	r2, r0, #2
 8004e80:	4650      	mov	r0, sl
 8004e82:	4659      	mov	r1, fp
 8004e84:	f7fb fe5c 	bl	8000b40 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <UART_SetConfig+0x38c>)
 8004e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	2164      	movs	r1, #100	; 0x64
 8004e96:	fb01 f303 	mul.w	r3, r1, r3
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	3332      	adds	r3, #50	; 0x32
 8004ea0:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <UART_SetConfig+0x38c>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	f003 020f 	and.w	r2, r3, #15
 8004eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4432      	add	r2, r6
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	377c      	adds	r7, #124	; 0x7c
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40011000 	.word	0x40011000
 8004ec4:	40011400 	.word	0x40011400
 8004ec8:	51eb851f 	.word	0x51eb851f

08004ecc <__errno>:
 8004ecc:	4b01      	ldr	r3, [pc, #4]	; (8004ed4 <__errno+0x8>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000020 	.word	0x20000020

08004ed8 <__libc_init_array>:
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	4d0d      	ldr	r5, [pc, #52]	; (8004f10 <__libc_init_array+0x38>)
 8004edc:	4c0d      	ldr	r4, [pc, #52]	; (8004f14 <__libc_init_array+0x3c>)
 8004ede:	1b64      	subs	r4, r4, r5
 8004ee0:	10a4      	asrs	r4, r4, #2
 8004ee2:	2600      	movs	r6, #0
 8004ee4:	42a6      	cmp	r6, r4
 8004ee6:	d109      	bne.n	8004efc <__libc_init_array+0x24>
 8004ee8:	4d0b      	ldr	r5, [pc, #44]	; (8004f18 <__libc_init_array+0x40>)
 8004eea:	4c0c      	ldr	r4, [pc, #48]	; (8004f1c <__libc_init_array+0x44>)
 8004eec:	f001 f9da 	bl	80062a4 <_init>
 8004ef0:	1b64      	subs	r4, r4, r5
 8004ef2:	10a4      	asrs	r4, r4, #2
 8004ef4:	2600      	movs	r6, #0
 8004ef6:	42a6      	cmp	r6, r4
 8004ef8:	d105      	bne.n	8004f06 <__libc_init_array+0x2e>
 8004efa:	bd70      	pop	{r4, r5, r6, pc}
 8004efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f00:	4798      	blx	r3
 8004f02:	3601      	adds	r6, #1
 8004f04:	e7ee      	b.n	8004ee4 <__libc_init_array+0xc>
 8004f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0a:	4798      	blx	r3
 8004f0c:	3601      	adds	r6, #1
 8004f0e:	e7f2      	b.n	8004ef6 <__libc_init_array+0x1e>
 8004f10:	08006500 	.word	0x08006500
 8004f14:	08006500 	.word	0x08006500
 8004f18:	08006500 	.word	0x08006500
 8004f1c:	08006504 	.word	0x08006504

08004f20 <memset>:
 8004f20:	4402      	add	r2, r0
 8004f22:	4603      	mov	r3, r0
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d100      	bne.n	8004f2a <memset+0xa>
 8004f28:	4770      	bx	lr
 8004f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f2e:	e7f9      	b.n	8004f24 <memset+0x4>

08004f30 <log>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	ed2d 8b02 	vpush	{d8}
 8004f36:	ec55 4b10 	vmov	r4, r5, d0
 8004f3a:	f000 f8f1 	bl	8005120 <__ieee754_log>
 8004f3e:	4b1e      	ldr	r3, [pc, #120]	; (8004fb8 <log+0x88>)
 8004f40:	eeb0 8a40 	vmov.f32	s16, s0
 8004f44:	eef0 8a60 	vmov.f32	s17, s1
 8004f48:	f993 3000 	ldrsb.w	r3, [r3]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	d01a      	beq.n	8004f86 <log+0x56>
 8004f50:	4622      	mov	r2, r4
 8004f52:	462b      	mov	r3, r5
 8004f54:	4620      	mov	r0, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	f7fb fd8c 	bl	8000a74 <__aeabi_dcmpun>
 8004f5c:	b998      	cbnz	r0, 8004f86 <log+0x56>
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2300      	movs	r3, #0
 8004f62:	4620      	mov	r0, r4
 8004f64:	4629      	mov	r1, r5
 8004f66:	f7fb fd7b 	bl	8000a60 <__aeabi_dcmpgt>
 8004f6a:	b960      	cbnz	r0, 8004f86 <log+0x56>
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2300      	movs	r3, #0
 8004f70:	4620      	mov	r0, r4
 8004f72:	4629      	mov	r1, r5
 8004f74:	f7fb fd4c 	bl	8000a10 <__aeabi_dcmpeq>
 8004f78:	b160      	cbz	r0, 8004f94 <log+0x64>
 8004f7a:	f7ff ffa7 	bl	8004ecc <__errno>
 8004f7e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8004fb0 <log+0x80>
 8004f82:	2322      	movs	r3, #34	; 0x22
 8004f84:	6003      	str	r3, [r0, #0]
 8004f86:	eeb0 0a48 	vmov.f32	s0, s16
 8004f8a:	eef0 0a68 	vmov.f32	s1, s17
 8004f8e:	ecbd 8b02 	vpop	{d8}
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	f7ff ff9a 	bl	8004ecc <__errno>
 8004f98:	ecbd 8b02 	vpop	{d8}
 8004f9c:	2321      	movs	r3, #33	; 0x21
 8004f9e:	6003      	str	r3, [r0, #0]
 8004fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fa4:	4805      	ldr	r0, [pc, #20]	; (8004fbc <log+0x8c>)
 8004fa6:	f001 b863 	b.w	8006070 <nan>
 8004faa:	bf00      	nop
 8004fac:	f3af 8000 	nop.w
 8004fb0:	00000000 	.word	0x00000000
 8004fb4:	fff00000 	.word	0xfff00000
 8004fb8:	20000084 	.word	0x20000084
 8004fbc:	080064b0 	.word	0x080064b0

08004fc0 <pow>:
 8004fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fc4:	ec59 8b10 	vmov	r8, r9, d0
 8004fc8:	ec57 6b11 	vmov	r6, r7, d1
 8004fcc:	f000 fa64 	bl	8005498 <__ieee754_pow>
 8004fd0:	4b4e      	ldr	r3, [pc, #312]	; (800510c <pow+0x14c>)
 8004fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	ec55 4b10 	vmov	r4, r5, d0
 8004fdc:	d015      	beq.n	800500a <pow+0x4a>
 8004fde:	4632      	mov	r2, r6
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	f7fb fd45 	bl	8000a74 <__aeabi_dcmpun>
 8004fea:	b970      	cbnz	r0, 800500a <pow+0x4a>
 8004fec:	4642      	mov	r2, r8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	f7fb fd3e 	bl	8000a74 <__aeabi_dcmpun>
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	b148      	cbz	r0, 8005012 <pow+0x52>
 8004ffe:	4630      	mov	r0, r6
 8005000:	4639      	mov	r1, r7
 8005002:	f7fb fd05 	bl	8000a10 <__aeabi_dcmpeq>
 8005006:	2800      	cmp	r0, #0
 8005008:	d17d      	bne.n	8005106 <pow+0x146>
 800500a:	ec45 4b10 	vmov	d0, r4, r5
 800500e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005012:	4640      	mov	r0, r8
 8005014:	4649      	mov	r1, r9
 8005016:	f7fb fcfb 	bl	8000a10 <__aeabi_dcmpeq>
 800501a:	b1e0      	cbz	r0, 8005056 <pow+0x96>
 800501c:	2200      	movs	r2, #0
 800501e:	2300      	movs	r3, #0
 8005020:	4630      	mov	r0, r6
 8005022:	4639      	mov	r1, r7
 8005024:	f7fb fcf4 	bl	8000a10 <__aeabi_dcmpeq>
 8005028:	2800      	cmp	r0, #0
 800502a:	d16c      	bne.n	8005106 <pow+0x146>
 800502c:	ec47 6b10 	vmov	d0, r6, r7
 8005030:	f001 f811 	bl	8006056 <finite>
 8005034:	2800      	cmp	r0, #0
 8005036:	d0e8      	beq.n	800500a <pow+0x4a>
 8005038:	2200      	movs	r2, #0
 800503a:	2300      	movs	r3, #0
 800503c:	4630      	mov	r0, r6
 800503e:	4639      	mov	r1, r7
 8005040:	f7fb fcf0 	bl	8000a24 <__aeabi_dcmplt>
 8005044:	2800      	cmp	r0, #0
 8005046:	d0e0      	beq.n	800500a <pow+0x4a>
 8005048:	f7ff ff40 	bl	8004ecc <__errno>
 800504c:	2321      	movs	r3, #33	; 0x21
 800504e:	6003      	str	r3, [r0, #0]
 8005050:	2400      	movs	r4, #0
 8005052:	4d2f      	ldr	r5, [pc, #188]	; (8005110 <pow+0x150>)
 8005054:	e7d9      	b.n	800500a <pow+0x4a>
 8005056:	ec45 4b10 	vmov	d0, r4, r5
 800505a:	f000 fffc 	bl	8006056 <finite>
 800505e:	bbb8      	cbnz	r0, 80050d0 <pow+0x110>
 8005060:	ec49 8b10 	vmov	d0, r8, r9
 8005064:	f000 fff7 	bl	8006056 <finite>
 8005068:	b390      	cbz	r0, 80050d0 <pow+0x110>
 800506a:	ec47 6b10 	vmov	d0, r6, r7
 800506e:	f000 fff2 	bl	8006056 <finite>
 8005072:	b368      	cbz	r0, 80050d0 <pow+0x110>
 8005074:	4622      	mov	r2, r4
 8005076:	462b      	mov	r3, r5
 8005078:	4620      	mov	r0, r4
 800507a:	4629      	mov	r1, r5
 800507c:	f7fb fcfa 	bl	8000a74 <__aeabi_dcmpun>
 8005080:	b160      	cbz	r0, 800509c <pow+0xdc>
 8005082:	f7ff ff23 	bl	8004ecc <__errno>
 8005086:	2321      	movs	r3, #33	; 0x21
 8005088:	6003      	str	r3, [r0, #0]
 800508a:	2200      	movs	r2, #0
 800508c:	2300      	movs	r3, #0
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	f7fb fb7f 	bl	8000794 <__aeabi_ddiv>
 8005096:	4604      	mov	r4, r0
 8005098:	460d      	mov	r5, r1
 800509a:	e7b6      	b.n	800500a <pow+0x4a>
 800509c:	f7ff ff16 	bl	8004ecc <__errno>
 80050a0:	2322      	movs	r3, #34	; 0x22
 80050a2:	6003      	str	r3, [r0, #0]
 80050a4:	2200      	movs	r2, #0
 80050a6:	2300      	movs	r3, #0
 80050a8:	4640      	mov	r0, r8
 80050aa:	4649      	mov	r1, r9
 80050ac:	f7fb fcba 	bl	8000a24 <__aeabi_dcmplt>
 80050b0:	2400      	movs	r4, #0
 80050b2:	b158      	cbz	r0, 80050cc <pow+0x10c>
 80050b4:	ec47 6b10 	vmov	d0, r6, r7
 80050b8:	f000 ffe2 	bl	8006080 <rint>
 80050bc:	4632      	mov	r2, r6
 80050be:	ec51 0b10 	vmov	r0, r1, d0
 80050c2:	463b      	mov	r3, r7
 80050c4:	f7fb fca4 	bl	8000a10 <__aeabi_dcmpeq>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d0c2      	beq.n	8005052 <pow+0x92>
 80050cc:	4d11      	ldr	r5, [pc, #68]	; (8005114 <pow+0x154>)
 80050ce:	e79c      	b.n	800500a <pow+0x4a>
 80050d0:	2200      	movs	r2, #0
 80050d2:	2300      	movs	r3, #0
 80050d4:	4620      	mov	r0, r4
 80050d6:	4629      	mov	r1, r5
 80050d8:	f7fb fc9a 	bl	8000a10 <__aeabi_dcmpeq>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d094      	beq.n	800500a <pow+0x4a>
 80050e0:	ec49 8b10 	vmov	d0, r8, r9
 80050e4:	f000 ffb7 	bl	8006056 <finite>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d08e      	beq.n	800500a <pow+0x4a>
 80050ec:	ec47 6b10 	vmov	d0, r6, r7
 80050f0:	f000 ffb1 	bl	8006056 <finite>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d088      	beq.n	800500a <pow+0x4a>
 80050f8:	f7ff fee8 	bl	8004ecc <__errno>
 80050fc:	2322      	movs	r3, #34	; 0x22
 80050fe:	6003      	str	r3, [r0, #0]
 8005100:	2400      	movs	r4, #0
 8005102:	2500      	movs	r5, #0
 8005104:	e781      	b.n	800500a <pow+0x4a>
 8005106:	4d04      	ldr	r5, [pc, #16]	; (8005118 <pow+0x158>)
 8005108:	2400      	movs	r4, #0
 800510a:	e77e      	b.n	800500a <pow+0x4a>
 800510c:	20000084 	.word	0x20000084
 8005110:	fff00000 	.word	0xfff00000
 8005114:	7ff00000 	.word	0x7ff00000
 8005118:	3ff00000 	.word	0x3ff00000
 800511c:	00000000 	.word	0x00000000

08005120 <__ieee754_log>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	ec51 0b10 	vmov	r0, r1, d0
 8005128:	ed2d 8b04 	vpush	{d8-d9}
 800512c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005130:	b083      	sub	sp, #12
 8005132:	460d      	mov	r5, r1
 8005134:	da29      	bge.n	800518a <__ieee754_log+0x6a>
 8005136:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800513a:	4303      	orrs	r3, r0
 800513c:	ee10 2a10 	vmov	r2, s0
 8005140:	d10c      	bne.n	800515c <__ieee754_log+0x3c>
 8005142:	49cf      	ldr	r1, [pc, #828]	; (8005480 <__ieee754_log+0x360>)
 8005144:	2200      	movs	r2, #0
 8005146:	2300      	movs	r3, #0
 8005148:	2000      	movs	r0, #0
 800514a:	f7fb fb23 	bl	8000794 <__aeabi_ddiv>
 800514e:	ec41 0b10 	vmov	d0, r0, r1
 8005152:	b003      	add	sp, #12
 8005154:	ecbd 8b04 	vpop	{d8-d9}
 8005158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515c:	2900      	cmp	r1, #0
 800515e:	da05      	bge.n	800516c <__ieee754_log+0x4c>
 8005160:	460b      	mov	r3, r1
 8005162:	f7fb f835 	bl	80001d0 <__aeabi_dsub>
 8005166:	2200      	movs	r2, #0
 8005168:	2300      	movs	r3, #0
 800516a:	e7ee      	b.n	800514a <__ieee754_log+0x2a>
 800516c:	4bc5      	ldr	r3, [pc, #788]	; (8005484 <__ieee754_log+0x364>)
 800516e:	2200      	movs	r2, #0
 8005170:	f7fb f9e6 	bl	8000540 <__aeabi_dmul>
 8005174:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005178:	460d      	mov	r5, r1
 800517a:	4ac3      	ldr	r2, [pc, #780]	; (8005488 <__ieee754_log+0x368>)
 800517c:	4295      	cmp	r5, r2
 800517e:	dd06      	ble.n	800518e <__ieee754_log+0x6e>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	f7fb f826 	bl	80001d4 <__adddf3>
 8005188:	e7e1      	b.n	800514e <__ieee754_log+0x2e>
 800518a:	2300      	movs	r3, #0
 800518c:	e7f5      	b.n	800517a <__ieee754_log+0x5a>
 800518e:	152c      	asrs	r4, r5, #20
 8005190:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005194:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005198:	441c      	add	r4, r3
 800519a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800519e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80051a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051a6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80051aa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80051ae:	ea42 0105 	orr.w	r1, r2, r5
 80051b2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80051b6:	2200      	movs	r2, #0
 80051b8:	4bb4      	ldr	r3, [pc, #720]	; (800548c <__ieee754_log+0x36c>)
 80051ba:	f7fb f809 	bl	80001d0 <__aeabi_dsub>
 80051be:	1cab      	adds	r3, r5, #2
 80051c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	4682      	mov	sl, r0
 80051c8:	468b      	mov	fp, r1
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	dc53      	bgt.n	8005278 <__ieee754_log+0x158>
 80051d0:	2300      	movs	r3, #0
 80051d2:	f7fb fc1d 	bl	8000a10 <__aeabi_dcmpeq>
 80051d6:	b1d0      	cbz	r0, 800520e <__ieee754_log+0xee>
 80051d8:	2c00      	cmp	r4, #0
 80051da:	f000 8122 	beq.w	8005422 <__ieee754_log+0x302>
 80051de:	4620      	mov	r0, r4
 80051e0:	f7fb f944 	bl	800046c <__aeabi_i2d>
 80051e4:	a390      	add	r3, pc, #576	; (adr r3, 8005428 <__ieee754_log+0x308>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	4606      	mov	r6, r0
 80051ec:	460f      	mov	r7, r1
 80051ee:	f7fb f9a7 	bl	8000540 <__aeabi_dmul>
 80051f2:	a38f      	add	r3, pc, #572	; (adr r3, 8005430 <__ieee754_log+0x310>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	4604      	mov	r4, r0
 80051fa:	460d      	mov	r5, r1
 80051fc:	4630      	mov	r0, r6
 80051fe:	4639      	mov	r1, r7
 8005200:	f7fb f99e 	bl	8000540 <__aeabi_dmul>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4620      	mov	r0, r4
 800520a:	4629      	mov	r1, r5
 800520c:	e7ba      	b.n	8005184 <__ieee754_log+0x64>
 800520e:	a38a      	add	r3, pc, #552	; (adr r3, 8005438 <__ieee754_log+0x318>)
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	4650      	mov	r0, sl
 8005216:	4659      	mov	r1, fp
 8005218:	f7fb f992 	bl	8000540 <__aeabi_dmul>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	2000      	movs	r0, #0
 8005222:	499b      	ldr	r1, [pc, #620]	; (8005490 <__ieee754_log+0x370>)
 8005224:	f7fa ffd4 	bl	80001d0 <__aeabi_dsub>
 8005228:	4652      	mov	r2, sl
 800522a:	4606      	mov	r6, r0
 800522c:	460f      	mov	r7, r1
 800522e:	465b      	mov	r3, fp
 8005230:	4650      	mov	r0, sl
 8005232:	4659      	mov	r1, fp
 8005234:	f7fb f984 	bl	8000540 <__aeabi_dmul>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4630      	mov	r0, r6
 800523e:	4639      	mov	r1, r7
 8005240:	f7fb f97e 	bl	8000540 <__aeabi_dmul>
 8005244:	4606      	mov	r6, r0
 8005246:	460f      	mov	r7, r1
 8005248:	b914      	cbnz	r4, 8005250 <__ieee754_log+0x130>
 800524a:	4632      	mov	r2, r6
 800524c:	463b      	mov	r3, r7
 800524e:	e0a2      	b.n	8005396 <__ieee754_log+0x276>
 8005250:	4620      	mov	r0, r4
 8005252:	f7fb f90b 	bl	800046c <__aeabi_i2d>
 8005256:	a374      	add	r3, pc, #464	; (adr r3, 8005428 <__ieee754_log+0x308>)
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	4680      	mov	r8, r0
 800525e:	4689      	mov	r9, r1
 8005260:	f7fb f96e 	bl	8000540 <__aeabi_dmul>
 8005264:	a372      	add	r3, pc, #456	; (adr r3, 8005430 <__ieee754_log+0x310>)
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	4604      	mov	r4, r0
 800526c:	460d      	mov	r5, r1
 800526e:	4640      	mov	r0, r8
 8005270:	4649      	mov	r1, r9
 8005272:	f7fb f965 	bl	8000540 <__aeabi_dmul>
 8005276:	e0a7      	b.n	80053c8 <__ieee754_log+0x2a8>
 8005278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800527c:	f7fa ffaa 	bl	80001d4 <__adddf3>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4650      	mov	r0, sl
 8005286:	4659      	mov	r1, fp
 8005288:	f7fb fa84 	bl	8000794 <__aeabi_ddiv>
 800528c:	ec41 0b18 	vmov	d8, r0, r1
 8005290:	4620      	mov	r0, r4
 8005292:	f7fb f8eb 	bl	800046c <__aeabi_i2d>
 8005296:	ec53 2b18 	vmov	r2, r3, d8
 800529a:	ec41 0b19 	vmov	d9, r0, r1
 800529e:	ec51 0b18 	vmov	r0, r1, d8
 80052a2:	f7fb f94d 	bl	8000540 <__aeabi_dmul>
 80052a6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80052aa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4680      	mov	r8, r0
 80052b6:	4689      	mov	r9, r1
 80052b8:	f7fb f942 	bl	8000540 <__aeabi_dmul>
 80052bc:	a360      	add	r3, pc, #384	; (adr r3, 8005440 <__ieee754_log+0x320>)
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	4606      	mov	r6, r0
 80052c4:	460f      	mov	r7, r1
 80052c6:	f7fb f93b 	bl	8000540 <__aeabi_dmul>
 80052ca:	a35f      	add	r3, pc, #380	; (adr r3, 8005448 <__ieee754_log+0x328>)
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	f7fa ff80 	bl	80001d4 <__adddf3>
 80052d4:	4632      	mov	r2, r6
 80052d6:	463b      	mov	r3, r7
 80052d8:	f7fb f932 	bl	8000540 <__aeabi_dmul>
 80052dc:	a35c      	add	r3, pc, #368	; (adr r3, 8005450 <__ieee754_log+0x330>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f7fa ff77 	bl	80001d4 <__adddf3>
 80052e6:	4632      	mov	r2, r6
 80052e8:	463b      	mov	r3, r7
 80052ea:	f7fb f929 	bl	8000540 <__aeabi_dmul>
 80052ee:	a35a      	add	r3, pc, #360	; (adr r3, 8005458 <__ieee754_log+0x338>)
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	f7fa ff6e 	bl	80001d4 <__adddf3>
 80052f8:	4642      	mov	r2, r8
 80052fa:	464b      	mov	r3, r9
 80052fc:	f7fb f920 	bl	8000540 <__aeabi_dmul>
 8005300:	a357      	add	r3, pc, #348	; (adr r3, 8005460 <__ieee754_log+0x340>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	4680      	mov	r8, r0
 8005308:	4689      	mov	r9, r1
 800530a:	4630      	mov	r0, r6
 800530c:	4639      	mov	r1, r7
 800530e:	f7fb f917 	bl	8000540 <__aeabi_dmul>
 8005312:	a355      	add	r3, pc, #340	; (adr r3, 8005468 <__ieee754_log+0x348>)
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f7fa ff5c 	bl	80001d4 <__adddf3>
 800531c:	4632      	mov	r2, r6
 800531e:	463b      	mov	r3, r7
 8005320:	f7fb f90e 	bl	8000540 <__aeabi_dmul>
 8005324:	a352      	add	r3, pc, #328	; (adr r3, 8005470 <__ieee754_log+0x350>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f7fa ff53 	bl	80001d4 <__adddf3>
 800532e:	4632      	mov	r2, r6
 8005330:	463b      	mov	r3, r7
 8005332:	f7fb f905 	bl	8000540 <__aeabi_dmul>
 8005336:	460b      	mov	r3, r1
 8005338:	4602      	mov	r2, r0
 800533a:	4649      	mov	r1, r9
 800533c:	4640      	mov	r0, r8
 800533e:	f7fa ff49 	bl	80001d4 <__adddf3>
 8005342:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005346:	9b01      	ldr	r3, [sp, #4]
 8005348:	3551      	adds	r5, #81	; 0x51
 800534a:	431d      	orrs	r5, r3
 800534c:	2d00      	cmp	r5, #0
 800534e:	4680      	mov	r8, r0
 8005350:	4689      	mov	r9, r1
 8005352:	dd48      	ble.n	80053e6 <__ieee754_log+0x2c6>
 8005354:	4b4e      	ldr	r3, [pc, #312]	; (8005490 <__ieee754_log+0x370>)
 8005356:	2200      	movs	r2, #0
 8005358:	4650      	mov	r0, sl
 800535a:	4659      	mov	r1, fp
 800535c:	f7fb f8f0 	bl	8000540 <__aeabi_dmul>
 8005360:	4652      	mov	r2, sl
 8005362:	465b      	mov	r3, fp
 8005364:	f7fb f8ec 	bl	8000540 <__aeabi_dmul>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4606      	mov	r6, r0
 800536e:	460f      	mov	r7, r1
 8005370:	4640      	mov	r0, r8
 8005372:	4649      	mov	r1, r9
 8005374:	f7fa ff2e 	bl	80001d4 <__adddf3>
 8005378:	ec53 2b18 	vmov	r2, r3, d8
 800537c:	f7fb f8e0 	bl	8000540 <__aeabi_dmul>
 8005380:	4680      	mov	r8, r0
 8005382:	4689      	mov	r9, r1
 8005384:	b964      	cbnz	r4, 80053a0 <__ieee754_log+0x280>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4630      	mov	r0, r6
 800538c:	4639      	mov	r1, r7
 800538e:	f7fa ff1f 	bl	80001d0 <__aeabi_dsub>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4650      	mov	r0, sl
 8005398:	4659      	mov	r1, fp
 800539a:	f7fa ff19 	bl	80001d0 <__aeabi_dsub>
 800539e:	e6d6      	b.n	800514e <__ieee754_log+0x2e>
 80053a0:	a321      	add	r3, pc, #132	; (adr r3, 8005428 <__ieee754_log+0x308>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	ec51 0b19 	vmov	r0, r1, d9
 80053aa:	f7fb f8c9 	bl	8000540 <__aeabi_dmul>
 80053ae:	a320      	add	r3, pc, #128	; (adr r3, 8005430 <__ieee754_log+0x310>)
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	4604      	mov	r4, r0
 80053b6:	460d      	mov	r5, r1
 80053b8:	ec51 0b19 	vmov	r0, r1, d9
 80053bc:	f7fb f8c0 	bl	8000540 <__aeabi_dmul>
 80053c0:	4642      	mov	r2, r8
 80053c2:	464b      	mov	r3, r9
 80053c4:	f7fa ff06 	bl	80001d4 <__adddf3>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4630      	mov	r0, r6
 80053ce:	4639      	mov	r1, r7
 80053d0:	f7fa fefe 	bl	80001d0 <__aeabi_dsub>
 80053d4:	4652      	mov	r2, sl
 80053d6:	465b      	mov	r3, fp
 80053d8:	f7fa fefa 	bl	80001d0 <__aeabi_dsub>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4620      	mov	r0, r4
 80053e2:	4629      	mov	r1, r5
 80053e4:	e7d9      	b.n	800539a <__ieee754_log+0x27a>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4650      	mov	r0, sl
 80053ec:	4659      	mov	r1, fp
 80053ee:	f7fa feef 	bl	80001d0 <__aeabi_dsub>
 80053f2:	ec53 2b18 	vmov	r2, r3, d8
 80053f6:	f7fb f8a3 	bl	8000540 <__aeabi_dmul>
 80053fa:	4606      	mov	r6, r0
 80053fc:	460f      	mov	r7, r1
 80053fe:	2c00      	cmp	r4, #0
 8005400:	f43f af23 	beq.w	800524a <__ieee754_log+0x12a>
 8005404:	a308      	add	r3, pc, #32	; (adr r3, 8005428 <__ieee754_log+0x308>)
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	ec51 0b19 	vmov	r0, r1, d9
 800540e:	f7fb f897 	bl	8000540 <__aeabi_dmul>
 8005412:	a307      	add	r3, pc, #28	; (adr r3, 8005430 <__ieee754_log+0x310>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	4604      	mov	r4, r0
 800541a:	460d      	mov	r5, r1
 800541c:	ec51 0b19 	vmov	r0, r1, d9
 8005420:	e727      	b.n	8005272 <__ieee754_log+0x152>
 8005422:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8005478 <__ieee754_log+0x358>
 8005426:	e694      	b.n	8005152 <__ieee754_log+0x32>
 8005428:	fee00000 	.word	0xfee00000
 800542c:	3fe62e42 	.word	0x3fe62e42
 8005430:	35793c76 	.word	0x35793c76
 8005434:	3dea39ef 	.word	0x3dea39ef
 8005438:	55555555 	.word	0x55555555
 800543c:	3fd55555 	.word	0x3fd55555
 8005440:	df3e5244 	.word	0xdf3e5244
 8005444:	3fc2f112 	.word	0x3fc2f112
 8005448:	96cb03de 	.word	0x96cb03de
 800544c:	3fc74664 	.word	0x3fc74664
 8005450:	94229359 	.word	0x94229359
 8005454:	3fd24924 	.word	0x3fd24924
 8005458:	55555593 	.word	0x55555593
 800545c:	3fe55555 	.word	0x3fe55555
 8005460:	d078c69f 	.word	0xd078c69f
 8005464:	3fc39a09 	.word	0x3fc39a09
 8005468:	1d8e78af 	.word	0x1d8e78af
 800546c:	3fcc71c5 	.word	0x3fcc71c5
 8005470:	9997fa04 	.word	0x9997fa04
 8005474:	3fd99999 	.word	0x3fd99999
	...
 8005480:	c3500000 	.word	0xc3500000
 8005484:	43500000 	.word	0x43500000
 8005488:	7fefffff 	.word	0x7fefffff
 800548c:	3ff00000 	.word	0x3ff00000
 8005490:	3fe00000 	.word	0x3fe00000
 8005494:	00000000 	.word	0x00000000

08005498 <__ieee754_pow>:
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	ed2d 8b06 	vpush	{d8-d10}
 80054a0:	b08d      	sub	sp, #52	; 0x34
 80054a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80054a6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80054aa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80054ae:	ea56 0100 	orrs.w	r1, r6, r0
 80054b2:	ec53 2b10 	vmov	r2, r3, d0
 80054b6:	f000 84d1 	beq.w	8005e5c <__ieee754_pow+0x9c4>
 80054ba:	497f      	ldr	r1, [pc, #508]	; (80056b8 <__ieee754_pow+0x220>)
 80054bc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80054c0:	428c      	cmp	r4, r1
 80054c2:	ee10 8a10 	vmov	r8, s0
 80054c6:	4699      	mov	r9, r3
 80054c8:	dc09      	bgt.n	80054de <__ieee754_pow+0x46>
 80054ca:	d103      	bne.n	80054d4 <__ieee754_pow+0x3c>
 80054cc:	b97a      	cbnz	r2, 80054ee <__ieee754_pow+0x56>
 80054ce:	42a6      	cmp	r6, r4
 80054d0:	dd02      	ble.n	80054d8 <__ieee754_pow+0x40>
 80054d2:	e00c      	b.n	80054ee <__ieee754_pow+0x56>
 80054d4:	428e      	cmp	r6, r1
 80054d6:	dc02      	bgt.n	80054de <__ieee754_pow+0x46>
 80054d8:	428e      	cmp	r6, r1
 80054da:	d110      	bne.n	80054fe <__ieee754_pow+0x66>
 80054dc:	b178      	cbz	r0, 80054fe <__ieee754_pow+0x66>
 80054de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80054e2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80054e6:	ea54 0308 	orrs.w	r3, r4, r8
 80054ea:	f000 84b7 	beq.w	8005e5c <__ieee754_pow+0x9c4>
 80054ee:	4873      	ldr	r0, [pc, #460]	; (80056bc <__ieee754_pow+0x224>)
 80054f0:	b00d      	add	sp, #52	; 0x34
 80054f2:	ecbd 8b06 	vpop	{d8-d10}
 80054f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fa:	f000 bdb9 	b.w	8006070 <nan>
 80054fe:	f1b9 0f00 	cmp.w	r9, #0
 8005502:	da36      	bge.n	8005572 <__ieee754_pow+0xda>
 8005504:	496e      	ldr	r1, [pc, #440]	; (80056c0 <__ieee754_pow+0x228>)
 8005506:	428e      	cmp	r6, r1
 8005508:	dc51      	bgt.n	80055ae <__ieee754_pow+0x116>
 800550a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800550e:	428e      	cmp	r6, r1
 8005510:	f340 84af 	ble.w	8005e72 <__ieee754_pow+0x9da>
 8005514:	1531      	asrs	r1, r6, #20
 8005516:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800551a:	2914      	cmp	r1, #20
 800551c:	dd0f      	ble.n	800553e <__ieee754_pow+0xa6>
 800551e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8005522:	fa20 fc01 	lsr.w	ip, r0, r1
 8005526:	fa0c f101 	lsl.w	r1, ip, r1
 800552a:	4281      	cmp	r1, r0
 800552c:	f040 84a1 	bne.w	8005e72 <__ieee754_pow+0x9da>
 8005530:	f00c 0c01 	and.w	ip, ip, #1
 8005534:	f1cc 0102 	rsb	r1, ip, #2
 8005538:	9100      	str	r1, [sp, #0]
 800553a:	b180      	cbz	r0, 800555e <__ieee754_pow+0xc6>
 800553c:	e059      	b.n	80055f2 <__ieee754_pow+0x15a>
 800553e:	2800      	cmp	r0, #0
 8005540:	d155      	bne.n	80055ee <__ieee754_pow+0x156>
 8005542:	f1c1 0114 	rsb	r1, r1, #20
 8005546:	fa46 fc01 	asr.w	ip, r6, r1
 800554a:	fa0c f101 	lsl.w	r1, ip, r1
 800554e:	42b1      	cmp	r1, r6
 8005550:	f040 848c 	bne.w	8005e6c <__ieee754_pow+0x9d4>
 8005554:	f00c 0c01 	and.w	ip, ip, #1
 8005558:	f1cc 0102 	rsb	r1, ip, #2
 800555c:	9100      	str	r1, [sp, #0]
 800555e:	4959      	ldr	r1, [pc, #356]	; (80056c4 <__ieee754_pow+0x22c>)
 8005560:	428e      	cmp	r6, r1
 8005562:	d12d      	bne.n	80055c0 <__ieee754_pow+0x128>
 8005564:	2f00      	cmp	r7, #0
 8005566:	da79      	bge.n	800565c <__ieee754_pow+0x1c4>
 8005568:	4956      	ldr	r1, [pc, #344]	; (80056c4 <__ieee754_pow+0x22c>)
 800556a:	2000      	movs	r0, #0
 800556c:	f7fb f912 	bl	8000794 <__aeabi_ddiv>
 8005570:	e016      	b.n	80055a0 <__ieee754_pow+0x108>
 8005572:	2100      	movs	r1, #0
 8005574:	9100      	str	r1, [sp, #0]
 8005576:	2800      	cmp	r0, #0
 8005578:	d13b      	bne.n	80055f2 <__ieee754_pow+0x15a>
 800557a:	494f      	ldr	r1, [pc, #316]	; (80056b8 <__ieee754_pow+0x220>)
 800557c:	428e      	cmp	r6, r1
 800557e:	d1ee      	bne.n	800555e <__ieee754_pow+0xc6>
 8005580:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005584:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005588:	ea53 0308 	orrs.w	r3, r3, r8
 800558c:	f000 8466 	beq.w	8005e5c <__ieee754_pow+0x9c4>
 8005590:	4b4d      	ldr	r3, [pc, #308]	; (80056c8 <__ieee754_pow+0x230>)
 8005592:	429c      	cmp	r4, r3
 8005594:	dd0d      	ble.n	80055b2 <__ieee754_pow+0x11a>
 8005596:	2f00      	cmp	r7, #0
 8005598:	f280 8464 	bge.w	8005e64 <__ieee754_pow+0x9cc>
 800559c:	2000      	movs	r0, #0
 800559e:	2100      	movs	r1, #0
 80055a0:	ec41 0b10 	vmov	d0, r0, r1
 80055a4:	b00d      	add	sp, #52	; 0x34
 80055a6:	ecbd 8b06 	vpop	{d8-d10}
 80055aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ae:	2102      	movs	r1, #2
 80055b0:	e7e0      	b.n	8005574 <__ieee754_pow+0xdc>
 80055b2:	2f00      	cmp	r7, #0
 80055b4:	daf2      	bge.n	800559c <__ieee754_pow+0x104>
 80055b6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80055ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80055be:	e7ef      	b.n	80055a0 <__ieee754_pow+0x108>
 80055c0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80055c4:	d104      	bne.n	80055d0 <__ieee754_pow+0x138>
 80055c6:	4610      	mov	r0, r2
 80055c8:	4619      	mov	r1, r3
 80055ca:	f7fa ffb9 	bl	8000540 <__aeabi_dmul>
 80055ce:	e7e7      	b.n	80055a0 <__ieee754_pow+0x108>
 80055d0:	493e      	ldr	r1, [pc, #248]	; (80056cc <__ieee754_pow+0x234>)
 80055d2:	428f      	cmp	r7, r1
 80055d4:	d10d      	bne.n	80055f2 <__ieee754_pow+0x15a>
 80055d6:	f1b9 0f00 	cmp.w	r9, #0
 80055da:	db0a      	blt.n	80055f2 <__ieee754_pow+0x15a>
 80055dc:	ec43 2b10 	vmov	d0, r2, r3
 80055e0:	b00d      	add	sp, #52	; 0x34
 80055e2:	ecbd 8b06 	vpop	{d8-d10}
 80055e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ea:	f000 bc77 	b.w	8005edc <__ieee754_sqrt>
 80055ee:	2100      	movs	r1, #0
 80055f0:	9100      	str	r1, [sp, #0]
 80055f2:	ec43 2b10 	vmov	d0, r2, r3
 80055f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055fa:	f000 fd23 	bl	8006044 <fabs>
 80055fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005602:	ec51 0b10 	vmov	r0, r1, d0
 8005606:	f1b8 0f00 	cmp.w	r8, #0
 800560a:	d12a      	bne.n	8005662 <__ieee754_pow+0x1ca>
 800560c:	b12c      	cbz	r4, 800561a <__ieee754_pow+0x182>
 800560e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80056c4 <__ieee754_pow+0x22c>
 8005612:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8005616:	45e6      	cmp	lr, ip
 8005618:	d123      	bne.n	8005662 <__ieee754_pow+0x1ca>
 800561a:	2f00      	cmp	r7, #0
 800561c:	da05      	bge.n	800562a <__ieee754_pow+0x192>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	2000      	movs	r0, #0
 8005624:	4927      	ldr	r1, [pc, #156]	; (80056c4 <__ieee754_pow+0x22c>)
 8005626:	f7fb f8b5 	bl	8000794 <__aeabi_ddiv>
 800562a:	f1b9 0f00 	cmp.w	r9, #0
 800562e:	dab7      	bge.n	80055a0 <__ieee754_pow+0x108>
 8005630:	9b00      	ldr	r3, [sp, #0]
 8005632:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005636:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800563a:	4323      	orrs	r3, r4
 800563c:	d108      	bne.n	8005650 <__ieee754_pow+0x1b8>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4610      	mov	r0, r2
 8005644:	4619      	mov	r1, r3
 8005646:	f7fa fdc3 	bl	80001d0 <__aeabi_dsub>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	e78d      	b.n	800556c <__ieee754_pow+0xd4>
 8005650:	9b00      	ldr	r3, [sp, #0]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d1a4      	bne.n	80055a0 <__ieee754_pow+0x108>
 8005656:	4602      	mov	r2, r0
 8005658:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800565c:	4610      	mov	r0, r2
 800565e:	4619      	mov	r1, r3
 8005660:	e79e      	b.n	80055a0 <__ieee754_pow+0x108>
 8005662:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8005666:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800566a:	950a      	str	r5, [sp, #40]	; 0x28
 800566c:	9d00      	ldr	r5, [sp, #0]
 800566e:	46ac      	mov	ip, r5
 8005670:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005672:	ea5c 0505 	orrs.w	r5, ip, r5
 8005676:	d0e4      	beq.n	8005642 <__ieee754_pow+0x1aa>
 8005678:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <__ieee754_pow+0x238>)
 800567a:	429e      	cmp	r6, r3
 800567c:	f340 80fc 	ble.w	8005878 <__ieee754_pow+0x3e0>
 8005680:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005684:	429e      	cmp	r6, r3
 8005686:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <__ieee754_pow+0x230>)
 8005688:	dd07      	ble.n	800569a <__ieee754_pow+0x202>
 800568a:	429c      	cmp	r4, r3
 800568c:	dc0a      	bgt.n	80056a4 <__ieee754_pow+0x20c>
 800568e:	2f00      	cmp	r7, #0
 8005690:	da84      	bge.n	800559c <__ieee754_pow+0x104>
 8005692:	a307      	add	r3, pc, #28	; (adr r3, 80056b0 <__ieee754_pow+0x218>)
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	e795      	b.n	80055c6 <__ieee754_pow+0x12e>
 800569a:	429c      	cmp	r4, r3
 800569c:	dbf7      	blt.n	800568e <__ieee754_pow+0x1f6>
 800569e:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <__ieee754_pow+0x22c>)
 80056a0:	429c      	cmp	r4, r3
 80056a2:	dd17      	ble.n	80056d4 <__ieee754_pow+0x23c>
 80056a4:	2f00      	cmp	r7, #0
 80056a6:	dcf4      	bgt.n	8005692 <__ieee754_pow+0x1fa>
 80056a8:	e778      	b.n	800559c <__ieee754_pow+0x104>
 80056aa:	bf00      	nop
 80056ac:	f3af 8000 	nop.w
 80056b0:	8800759c 	.word	0x8800759c
 80056b4:	7e37e43c 	.word	0x7e37e43c
 80056b8:	7ff00000 	.word	0x7ff00000
 80056bc:	080064b0 	.word	0x080064b0
 80056c0:	433fffff 	.word	0x433fffff
 80056c4:	3ff00000 	.word	0x3ff00000
 80056c8:	3fefffff 	.word	0x3fefffff
 80056cc:	3fe00000 	.word	0x3fe00000
 80056d0:	41e00000 	.word	0x41e00000
 80056d4:	4b64      	ldr	r3, [pc, #400]	; (8005868 <__ieee754_pow+0x3d0>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	f7fa fd7a 	bl	80001d0 <__aeabi_dsub>
 80056dc:	a356      	add	r3, pc, #344	; (adr r3, 8005838 <__ieee754_pow+0x3a0>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	4604      	mov	r4, r0
 80056e4:	460d      	mov	r5, r1
 80056e6:	f7fa ff2b 	bl	8000540 <__aeabi_dmul>
 80056ea:	a355      	add	r3, pc, #340	; (adr r3, 8005840 <__ieee754_pow+0x3a8>)
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	4606      	mov	r6, r0
 80056f2:	460f      	mov	r7, r1
 80056f4:	4620      	mov	r0, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	f7fa ff22 	bl	8000540 <__aeabi_dmul>
 80056fc:	4b5b      	ldr	r3, [pc, #364]	; (800586c <__ieee754_pow+0x3d4>)
 80056fe:	4682      	mov	sl, r0
 8005700:	468b      	mov	fp, r1
 8005702:	2200      	movs	r2, #0
 8005704:	4620      	mov	r0, r4
 8005706:	4629      	mov	r1, r5
 8005708:	f7fa ff1a 	bl	8000540 <__aeabi_dmul>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	a14d      	add	r1, pc, #308	; (adr r1, 8005848 <__ieee754_pow+0x3b0>)
 8005712:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005716:	f7fa fd5b 	bl	80001d0 <__aeabi_dsub>
 800571a:	4622      	mov	r2, r4
 800571c:	462b      	mov	r3, r5
 800571e:	f7fa ff0f 	bl	8000540 <__aeabi_dmul>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	2000      	movs	r0, #0
 8005728:	4951      	ldr	r1, [pc, #324]	; (8005870 <__ieee754_pow+0x3d8>)
 800572a:	f7fa fd51 	bl	80001d0 <__aeabi_dsub>
 800572e:	4622      	mov	r2, r4
 8005730:	4680      	mov	r8, r0
 8005732:	4689      	mov	r9, r1
 8005734:	462b      	mov	r3, r5
 8005736:	4620      	mov	r0, r4
 8005738:	4629      	mov	r1, r5
 800573a:	f7fa ff01 	bl	8000540 <__aeabi_dmul>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4640      	mov	r0, r8
 8005744:	4649      	mov	r1, r9
 8005746:	f7fa fefb 	bl	8000540 <__aeabi_dmul>
 800574a:	a341      	add	r3, pc, #260	; (adr r3, 8005850 <__ieee754_pow+0x3b8>)
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f7fa fef6 	bl	8000540 <__aeabi_dmul>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4650      	mov	r0, sl
 800575a:	4659      	mov	r1, fp
 800575c:	f7fa fd38 	bl	80001d0 <__aeabi_dsub>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4680      	mov	r8, r0
 8005766:	4689      	mov	r9, r1
 8005768:	4630      	mov	r0, r6
 800576a:	4639      	mov	r1, r7
 800576c:	f7fa fd32 	bl	80001d4 <__adddf3>
 8005770:	2400      	movs	r4, #0
 8005772:	4632      	mov	r2, r6
 8005774:	463b      	mov	r3, r7
 8005776:	4620      	mov	r0, r4
 8005778:	460d      	mov	r5, r1
 800577a:	f7fa fd29 	bl	80001d0 <__aeabi_dsub>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4640      	mov	r0, r8
 8005784:	4649      	mov	r1, r9
 8005786:	f7fa fd23 	bl	80001d0 <__aeabi_dsub>
 800578a:	9b00      	ldr	r3, [sp, #0]
 800578c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800578e:	3b01      	subs	r3, #1
 8005790:	4313      	orrs	r3, r2
 8005792:	4682      	mov	sl, r0
 8005794:	468b      	mov	fp, r1
 8005796:	f040 81f1 	bne.w	8005b7c <__ieee754_pow+0x6e4>
 800579a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005858 <__ieee754_pow+0x3c0>
 800579e:	eeb0 8a47 	vmov.f32	s16, s14
 80057a2:	eef0 8a67 	vmov.f32	s17, s15
 80057a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057aa:	2600      	movs	r6, #0
 80057ac:	4632      	mov	r2, r6
 80057ae:	463b      	mov	r3, r7
 80057b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057b4:	f7fa fd0c 	bl	80001d0 <__aeabi_dsub>
 80057b8:	4622      	mov	r2, r4
 80057ba:	462b      	mov	r3, r5
 80057bc:	f7fa fec0 	bl	8000540 <__aeabi_dmul>
 80057c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057c4:	4680      	mov	r8, r0
 80057c6:	4689      	mov	r9, r1
 80057c8:	4650      	mov	r0, sl
 80057ca:	4659      	mov	r1, fp
 80057cc:	f7fa feb8 	bl	8000540 <__aeabi_dmul>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4640      	mov	r0, r8
 80057d6:	4649      	mov	r1, r9
 80057d8:	f7fa fcfc 	bl	80001d4 <__adddf3>
 80057dc:	4632      	mov	r2, r6
 80057de:	463b      	mov	r3, r7
 80057e0:	4680      	mov	r8, r0
 80057e2:	4689      	mov	r9, r1
 80057e4:	4620      	mov	r0, r4
 80057e6:	4629      	mov	r1, r5
 80057e8:	f7fa feaa 	bl	8000540 <__aeabi_dmul>
 80057ec:	460b      	mov	r3, r1
 80057ee:	4604      	mov	r4, r0
 80057f0:	460d      	mov	r5, r1
 80057f2:	4602      	mov	r2, r0
 80057f4:	4649      	mov	r1, r9
 80057f6:	4640      	mov	r0, r8
 80057f8:	f7fa fcec 	bl	80001d4 <__adddf3>
 80057fc:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <__ieee754_pow+0x3dc>)
 80057fe:	4299      	cmp	r1, r3
 8005800:	ec45 4b19 	vmov	d9, r4, r5
 8005804:	4606      	mov	r6, r0
 8005806:	460f      	mov	r7, r1
 8005808:	468b      	mov	fp, r1
 800580a:	f340 82fe 	ble.w	8005e0a <__ieee754_pow+0x972>
 800580e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005812:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005816:	4303      	orrs	r3, r0
 8005818:	f000 81f0 	beq.w	8005bfc <__ieee754_pow+0x764>
 800581c:	a310      	add	r3, pc, #64	; (adr r3, 8005860 <__ieee754_pow+0x3c8>)
 800581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005822:	ec51 0b18 	vmov	r0, r1, d8
 8005826:	f7fa fe8b 	bl	8000540 <__aeabi_dmul>
 800582a:	a30d      	add	r3, pc, #52	; (adr r3, 8005860 <__ieee754_pow+0x3c8>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	e6cb      	b.n	80055ca <__ieee754_pow+0x132>
 8005832:	bf00      	nop
 8005834:	f3af 8000 	nop.w
 8005838:	60000000 	.word	0x60000000
 800583c:	3ff71547 	.word	0x3ff71547
 8005840:	f85ddf44 	.word	0xf85ddf44
 8005844:	3e54ae0b 	.word	0x3e54ae0b
 8005848:	55555555 	.word	0x55555555
 800584c:	3fd55555 	.word	0x3fd55555
 8005850:	652b82fe 	.word	0x652b82fe
 8005854:	3ff71547 	.word	0x3ff71547
 8005858:	00000000 	.word	0x00000000
 800585c:	bff00000 	.word	0xbff00000
 8005860:	8800759c 	.word	0x8800759c
 8005864:	7e37e43c 	.word	0x7e37e43c
 8005868:	3ff00000 	.word	0x3ff00000
 800586c:	3fd00000 	.word	0x3fd00000
 8005870:	3fe00000 	.word	0x3fe00000
 8005874:	408fffff 	.word	0x408fffff
 8005878:	4bd7      	ldr	r3, [pc, #860]	; (8005bd8 <__ieee754_pow+0x740>)
 800587a:	ea03 0309 	and.w	r3, r3, r9
 800587e:	2200      	movs	r2, #0
 8005880:	b92b      	cbnz	r3, 800588e <__ieee754_pow+0x3f6>
 8005882:	4bd6      	ldr	r3, [pc, #856]	; (8005bdc <__ieee754_pow+0x744>)
 8005884:	f7fa fe5c 	bl	8000540 <__aeabi_dmul>
 8005888:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800588c:	460c      	mov	r4, r1
 800588e:	1523      	asrs	r3, r4, #20
 8005890:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005894:	4413      	add	r3, r2
 8005896:	9309      	str	r3, [sp, #36]	; 0x24
 8005898:	4bd1      	ldr	r3, [pc, #836]	; (8005be0 <__ieee754_pow+0x748>)
 800589a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800589e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80058a2:	429c      	cmp	r4, r3
 80058a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80058a8:	dd08      	ble.n	80058bc <__ieee754_pow+0x424>
 80058aa:	4bce      	ldr	r3, [pc, #824]	; (8005be4 <__ieee754_pow+0x74c>)
 80058ac:	429c      	cmp	r4, r3
 80058ae:	f340 8163 	ble.w	8005b78 <__ieee754_pow+0x6e0>
 80058b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b4:	3301      	adds	r3, #1
 80058b6:	9309      	str	r3, [sp, #36]	; 0x24
 80058b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80058bc:	2400      	movs	r4, #0
 80058be:	00e3      	lsls	r3, r4, #3
 80058c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80058c2:	4bc9      	ldr	r3, [pc, #804]	; (8005be8 <__ieee754_pow+0x750>)
 80058c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058c8:	ed93 7b00 	vldr	d7, [r3]
 80058cc:	4629      	mov	r1, r5
 80058ce:	ec53 2b17 	vmov	r2, r3, d7
 80058d2:	eeb0 8a47 	vmov.f32	s16, s14
 80058d6:	eef0 8a67 	vmov.f32	s17, s15
 80058da:	4682      	mov	sl, r0
 80058dc:	f7fa fc78 	bl	80001d0 <__aeabi_dsub>
 80058e0:	4652      	mov	r2, sl
 80058e2:	4606      	mov	r6, r0
 80058e4:	460f      	mov	r7, r1
 80058e6:	462b      	mov	r3, r5
 80058e8:	ec51 0b18 	vmov	r0, r1, d8
 80058ec:	f7fa fc72 	bl	80001d4 <__adddf3>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	2000      	movs	r0, #0
 80058f6:	49bd      	ldr	r1, [pc, #756]	; (8005bec <__ieee754_pow+0x754>)
 80058f8:	f7fa ff4c 	bl	8000794 <__aeabi_ddiv>
 80058fc:	ec41 0b19 	vmov	d9, r0, r1
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4630      	mov	r0, r6
 8005906:	4639      	mov	r1, r7
 8005908:	f7fa fe1a 	bl	8000540 <__aeabi_dmul>
 800590c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005910:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005914:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005918:	2300      	movs	r3, #0
 800591a:	9304      	str	r3, [sp, #16]
 800591c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005920:	46ab      	mov	fp, r5
 8005922:	106d      	asrs	r5, r5, #1
 8005924:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005928:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800592c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005930:	2200      	movs	r2, #0
 8005932:	4640      	mov	r0, r8
 8005934:	4649      	mov	r1, r9
 8005936:	4614      	mov	r4, r2
 8005938:	461d      	mov	r5, r3
 800593a:	f7fa fe01 	bl	8000540 <__aeabi_dmul>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	4630      	mov	r0, r6
 8005944:	4639      	mov	r1, r7
 8005946:	f7fa fc43 	bl	80001d0 <__aeabi_dsub>
 800594a:	ec53 2b18 	vmov	r2, r3, d8
 800594e:	4606      	mov	r6, r0
 8005950:	460f      	mov	r7, r1
 8005952:	4620      	mov	r0, r4
 8005954:	4629      	mov	r1, r5
 8005956:	f7fa fc3b 	bl	80001d0 <__aeabi_dsub>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4650      	mov	r0, sl
 8005960:	4659      	mov	r1, fp
 8005962:	f7fa fc35 	bl	80001d0 <__aeabi_dsub>
 8005966:	4642      	mov	r2, r8
 8005968:	464b      	mov	r3, r9
 800596a:	f7fa fde9 	bl	8000540 <__aeabi_dmul>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4630      	mov	r0, r6
 8005974:	4639      	mov	r1, r7
 8005976:	f7fa fc2b 	bl	80001d0 <__aeabi_dsub>
 800597a:	ec53 2b19 	vmov	r2, r3, d9
 800597e:	f7fa fddf 	bl	8000540 <__aeabi_dmul>
 8005982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005986:	ec41 0b18 	vmov	d8, r0, r1
 800598a:	4610      	mov	r0, r2
 800598c:	4619      	mov	r1, r3
 800598e:	f7fa fdd7 	bl	8000540 <__aeabi_dmul>
 8005992:	a37d      	add	r3, pc, #500	; (adr r3, 8005b88 <__ieee754_pow+0x6f0>)
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	4604      	mov	r4, r0
 800599a:	460d      	mov	r5, r1
 800599c:	f7fa fdd0 	bl	8000540 <__aeabi_dmul>
 80059a0:	a37b      	add	r3, pc, #492	; (adr r3, 8005b90 <__ieee754_pow+0x6f8>)
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	f7fa fc15 	bl	80001d4 <__adddf3>
 80059aa:	4622      	mov	r2, r4
 80059ac:	462b      	mov	r3, r5
 80059ae:	f7fa fdc7 	bl	8000540 <__aeabi_dmul>
 80059b2:	a379      	add	r3, pc, #484	; (adr r3, 8005b98 <__ieee754_pow+0x700>)
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f7fa fc0c 	bl	80001d4 <__adddf3>
 80059bc:	4622      	mov	r2, r4
 80059be:	462b      	mov	r3, r5
 80059c0:	f7fa fdbe 	bl	8000540 <__aeabi_dmul>
 80059c4:	a376      	add	r3, pc, #472	; (adr r3, 8005ba0 <__ieee754_pow+0x708>)
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	f7fa fc03 	bl	80001d4 <__adddf3>
 80059ce:	4622      	mov	r2, r4
 80059d0:	462b      	mov	r3, r5
 80059d2:	f7fa fdb5 	bl	8000540 <__aeabi_dmul>
 80059d6:	a374      	add	r3, pc, #464	; (adr r3, 8005ba8 <__ieee754_pow+0x710>)
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f7fa fbfa 	bl	80001d4 <__adddf3>
 80059e0:	4622      	mov	r2, r4
 80059e2:	462b      	mov	r3, r5
 80059e4:	f7fa fdac 	bl	8000540 <__aeabi_dmul>
 80059e8:	a371      	add	r3, pc, #452	; (adr r3, 8005bb0 <__ieee754_pow+0x718>)
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f7fa fbf1 	bl	80001d4 <__adddf3>
 80059f2:	4622      	mov	r2, r4
 80059f4:	4606      	mov	r6, r0
 80059f6:	460f      	mov	r7, r1
 80059f8:	462b      	mov	r3, r5
 80059fa:	4620      	mov	r0, r4
 80059fc:	4629      	mov	r1, r5
 80059fe:	f7fa fd9f 	bl	8000540 <__aeabi_dmul>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4630      	mov	r0, r6
 8005a08:	4639      	mov	r1, r7
 8005a0a:	f7fa fd99 	bl	8000540 <__aeabi_dmul>
 8005a0e:	4642      	mov	r2, r8
 8005a10:	4604      	mov	r4, r0
 8005a12:	460d      	mov	r5, r1
 8005a14:	464b      	mov	r3, r9
 8005a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a1a:	f7fa fbdb 	bl	80001d4 <__adddf3>
 8005a1e:	ec53 2b18 	vmov	r2, r3, d8
 8005a22:	f7fa fd8d 	bl	8000540 <__aeabi_dmul>
 8005a26:	4622      	mov	r2, r4
 8005a28:	462b      	mov	r3, r5
 8005a2a:	f7fa fbd3 	bl	80001d4 <__adddf3>
 8005a2e:	4642      	mov	r2, r8
 8005a30:	4682      	mov	sl, r0
 8005a32:	468b      	mov	fp, r1
 8005a34:	464b      	mov	r3, r9
 8005a36:	4640      	mov	r0, r8
 8005a38:	4649      	mov	r1, r9
 8005a3a:	f7fa fd81 	bl	8000540 <__aeabi_dmul>
 8005a3e:	4b6c      	ldr	r3, [pc, #432]	; (8005bf0 <__ieee754_pow+0x758>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	4606      	mov	r6, r0
 8005a44:	460f      	mov	r7, r1
 8005a46:	f7fa fbc5 	bl	80001d4 <__adddf3>
 8005a4a:	4652      	mov	r2, sl
 8005a4c:	465b      	mov	r3, fp
 8005a4e:	f7fa fbc1 	bl	80001d4 <__adddf3>
 8005a52:	9c04      	ldr	r4, [sp, #16]
 8005a54:	460d      	mov	r5, r1
 8005a56:	4622      	mov	r2, r4
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	f7fa fd6f 	bl	8000540 <__aeabi_dmul>
 8005a62:	4b63      	ldr	r3, [pc, #396]	; (8005bf0 <__ieee754_pow+0x758>)
 8005a64:	4680      	mov	r8, r0
 8005a66:	4689      	mov	r9, r1
 8005a68:	2200      	movs	r2, #0
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	f7fa fbaf 	bl	80001d0 <__aeabi_dsub>
 8005a72:	4632      	mov	r2, r6
 8005a74:	463b      	mov	r3, r7
 8005a76:	f7fa fbab 	bl	80001d0 <__aeabi_dsub>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4650      	mov	r0, sl
 8005a80:	4659      	mov	r1, fp
 8005a82:	f7fa fba5 	bl	80001d0 <__aeabi_dsub>
 8005a86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a8a:	f7fa fd59 	bl	8000540 <__aeabi_dmul>
 8005a8e:	4622      	mov	r2, r4
 8005a90:	4606      	mov	r6, r0
 8005a92:	460f      	mov	r7, r1
 8005a94:	462b      	mov	r3, r5
 8005a96:	ec51 0b18 	vmov	r0, r1, d8
 8005a9a:	f7fa fd51 	bl	8000540 <__aeabi_dmul>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	4639      	mov	r1, r7
 8005aa6:	f7fa fb95 	bl	80001d4 <__adddf3>
 8005aaa:	4606      	mov	r6, r0
 8005aac:	460f      	mov	r7, r1
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	f7fa fb8d 	bl	80001d4 <__adddf3>
 8005aba:	9c04      	ldr	r4, [sp, #16]
 8005abc:	a33e      	add	r3, pc, #248	; (adr r3, 8005bb8 <__ieee754_pow+0x720>)
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	460d      	mov	r5, r1
 8005ac6:	f7fa fd3b 	bl	8000540 <__aeabi_dmul>
 8005aca:	4642      	mov	r2, r8
 8005acc:	ec41 0b18 	vmov	d8, r0, r1
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	f7fa fb7b 	bl	80001d0 <__aeabi_dsub>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4630      	mov	r0, r6
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	f7fa fb75 	bl	80001d0 <__aeabi_dsub>
 8005ae6:	a336      	add	r3, pc, #216	; (adr r3, 8005bc0 <__ieee754_pow+0x728>)
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f7fa fd28 	bl	8000540 <__aeabi_dmul>
 8005af0:	a335      	add	r3, pc, #212	; (adr r3, 8005bc8 <__ieee754_pow+0x730>)
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	4606      	mov	r6, r0
 8005af8:	460f      	mov	r7, r1
 8005afa:	4620      	mov	r0, r4
 8005afc:	4629      	mov	r1, r5
 8005afe:	f7fa fd1f 	bl	8000540 <__aeabi_dmul>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4630      	mov	r0, r6
 8005b08:	4639      	mov	r1, r7
 8005b0a:	f7fa fb63 	bl	80001d4 <__adddf3>
 8005b0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b10:	4b38      	ldr	r3, [pc, #224]	; (8005bf4 <__ieee754_pow+0x75c>)
 8005b12:	4413      	add	r3, r2
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fb5c 	bl	80001d4 <__adddf3>
 8005b1c:	4682      	mov	sl, r0
 8005b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b20:	468b      	mov	fp, r1
 8005b22:	f7fa fca3 	bl	800046c <__aeabi_i2d>
 8005b26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b28:	4b33      	ldr	r3, [pc, #204]	; (8005bf8 <__ieee754_pow+0x760>)
 8005b2a:	4413      	add	r3, r2
 8005b2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b30:	4606      	mov	r6, r0
 8005b32:	460f      	mov	r7, r1
 8005b34:	4652      	mov	r2, sl
 8005b36:	465b      	mov	r3, fp
 8005b38:	ec51 0b18 	vmov	r0, r1, d8
 8005b3c:	f7fa fb4a 	bl	80001d4 <__adddf3>
 8005b40:	4642      	mov	r2, r8
 8005b42:	464b      	mov	r3, r9
 8005b44:	f7fa fb46 	bl	80001d4 <__adddf3>
 8005b48:	4632      	mov	r2, r6
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	f7fa fb42 	bl	80001d4 <__adddf3>
 8005b50:	9c04      	ldr	r4, [sp, #16]
 8005b52:	4632      	mov	r2, r6
 8005b54:	463b      	mov	r3, r7
 8005b56:	4620      	mov	r0, r4
 8005b58:	460d      	mov	r5, r1
 8005b5a:	f7fa fb39 	bl	80001d0 <__aeabi_dsub>
 8005b5e:	4642      	mov	r2, r8
 8005b60:	464b      	mov	r3, r9
 8005b62:	f7fa fb35 	bl	80001d0 <__aeabi_dsub>
 8005b66:	ec53 2b18 	vmov	r2, r3, d8
 8005b6a:	f7fa fb31 	bl	80001d0 <__aeabi_dsub>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4650      	mov	r0, sl
 8005b74:	4659      	mov	r1, fp
 8005b76:	e606      	b.n	8005786 <__ieee754_pow+0x2ee>
 8005b78:	2401      	movs	r4, #1
 8005b7a:	e6a0      	b.n	80058be <__ieee754_pow+0x426>
 8005b7c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005bd0 <__ieee754_pow+0x738>
 8005b80:	e60d      	b.n	800579e <__ieee754_pow+0x306>
 8005b82:	bf00      	nop
 8005b84:	f3af 8000 	nop.w
 8005b88:	4a454eef 	.word	0x4a454eef
 8005b8c:	3fca7e28 	.word	0x3fca7e28
 8005b90:	93c9db65 	.word	0x93c9db65
 8005b94:	3fcd864a 	.word	0x3fcd864a
 8005b98:	a91d4101 	.word	0xa91d4101
 8005b9c:	3fd17460 	.word	0x3fd17460
 8005ba0:	518f264d 	.word	0x518f264d
 8005ba4:	3fd55555 	.word	0x3fd55555
 8005ba8:	db6fabff 	.word	0xdb6fabff
 8005bac:	3fdb6db6 	.word	0x3fdb6db6
 8005bb0:	33333303 	.word	0x33333303
 8005bb4:	3fe33333 	.word	0x3fe33333
 8005bb8:	e0000000 	.word	0xe0000000
 8005bbc:	3feec709 	.word	0x3feec709
 8005bc0:	dc3a03fd 	.word	0xdc3a03fd
 8005bc4:	3feec709 	.word	0x3feec709
 8005bc8:	145b01f5 	.word	0x145b01f5
 8005bcc:	be3e2fe0 	.word	0xbe3e2fe0
 8005bd0:	00000000 	.word	0x00000000
 8005bd4:	3ff00000 	.word	0x3ff00000
 8005bd8:	7ff00000 	.word	0x7ff00000
 8005bdc:	43400000 	.word	0x43400000
 8005be0:	0003988e 	.word	0x0003988e
 8005be4:	000bb679 	.word	0x000bb679
 8005be8:	080064b8 	.word	0x080064b8
 8005bec:	3ff00000 	.word	0x3ff00000
 8005bf0:	40080000 	.word	0x40080000
 8005bf4:	080064d8 	.word	0x080064d8
 8005bf8:	080064c8 	.word	0x080064c8
 8005bfc:	a3b5      	add	r3, pc, #724	; (adr r3, 8005ed4 <__ieee754_pow+0xa3c>)
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	4640      	mov	r0, r8
 8005c04:	4649      	mov	r1, r9
 8005c06:	f7fa fae5 	bl	80001d4 <__adddf3>
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	ec41 0b1a 	vmov	d10, r0, r1
 8005c10:	462b      	mov	r3, r5
 8005c12:	4630      	mov	r0, r6
 8005c14:	4639      	mov	r1, r7
 8005c16:	f7fa fadb 	bl	80001d0 <__aeabi_dsub>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	ec51 0b1a 	vmov	r0, r1, d10
 8005c22:	f7fa ff1d 	bl	8000a60 <__aeabi_dcmpgt>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	f47f adf8 	bne.w	800581c <__ieee754_pow+0x384>
 8005c2c:	4aa4      	ldr	r2, [pc, #656]	; (8005ec0 <__ieee754_pow+0xa28>)
 8005c2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f340 810b 	ble.w	8005e4e <__ieee754_pow+0x9b6>
 8005c38:	151b      	asrs	r3, r3, #20
 8005c3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005c3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005c42:	fa4a f303 	asr.w	r3, sl, r3
 8005c46:	445b      	add	r3, fp
 8005c48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005c4c:	4e9d      	ldr	r6, [pc, #628]	; (8005ec4 <__ieee754_pow+0xa2c>)
 8005c4e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005c52:	4116      	asrs	r6, r2
 8005c54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005c58:	2000      	movs	r0, #0
 8005c5a:	ea23 0106 	bic.w	r1, r3, r6
 8005c5e:	f1c2 0214 	rsb	r2, r2, #20
 8005c62:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005c66:	fa4a fa02 	asr.w	sl, sl, r2
 8005c6a:	f1bb 0f00 	cmp.w	fp, #0
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4620      	mov	r0, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	bfb8      	it	lt
 8005c78:	f1ca 0a00 	rsblt	sl, sl, #0
 8005c7c:	f7fa faa8 	bl	80001d0 <__aeabi_dsub>
 8005c80:	ec41 0b19 	vmov	d9, r0, r1
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	ec51 0b19 	vmov	r0, r1, d9
 8005c8c:	f7fa faa2 	bl	80001d4 <__adddf3>
 8005c90:	2400      	movs	r4, #0
 8005c92:	a379      	add	r3, pc, #484	; (adr r3, 8005e78 <__ieee754_pow+0x9e0>)
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	4620      	mov	r0, r4
 8005c9a:	460d      	mov	r5, r1
 8005c9c:	f7fa fc50 	bl	8000540 <__aeabi_dmul>
 8005ca0:	ec53 2b19 	vmov	r2, r3, d9
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	460f      	mov	r7, r1
 8005ca8:	4620      	mov	r0, r4
 8005caa:	4629      	mov	r1, r5
 8005cac:	f7fa fa90 	bl	80001d0 <__aeabi_dsub>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4640      	mov	r0, r8
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	f7fa fa8a 	bl	80001d0 <__aeabi_dsub>
 8005cbc:	a370      	add	r3, pc, #448	; (adr r3, 8005e80 <__ieee754_pow+0x9e8>)
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f7fa fc3d 	bl	8000540 <__aeabi_dmul>
 8005cc6:	a370      	add	r3, pc, #448	; (adr r3, 8005e88 <__ieee754_pow+0x9f0>)
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	4680      	mov	r8, r0
 8005cce:	4689      	mov	r9, r1
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	f7fa fc34 	bl	8000540 <__aeabi_dmul>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4640      	mov	r0, r8
 8005cde:	4649      	mov	r1, r9
 8005ce0:	f7fa fa78 	bl	80001d4 <__adddf3>
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	460d      	mov	r5, r1
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4630      	mov	r0, r6
 8005cee:	4639      	mov	r1, r7
 8005cf0:	f7fa fa70 	bl	80001d4 <__adddf3>
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	4680      	mov	r8, r0
 8005cfa:	4689      	mov	r9, r1
 8005cfc:	f7fa fa68 	bl	80001d0 <__aeabi_dsub>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4620      	mov	r0, r4
 8005d06:	4629      	mov	r1, r5
 8005d08:	f7fa fa62 	bl	80001d0 <__aeabi_dsub>
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	4606      	mov	r6, r0
 8005d10:	460f      	mov	r7, r1
 8005d12:	464b      	mov	r3, r9
 8005d14:	4640      	mov	r0, r8
 8005d16:	4649      	mov	r1, r9
 8005d18:	f7fa fc12 	bl	8000540 <__aeabi_dmul>
 8005d1c:	a35c      	add	r3, pc, #368	; (adr r3, 8005e90 <__ieee754_pow+0x9f8>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	4604      	mov	r4, r0
 8005d24:	460d      	mov	r5, r1
 8005d26:	f7fa fc0b 	bl	8000540 <__aeabi_dmul>
 8005d2a:	a35b      	add	r3, pc, #364	; (adr r3, 8005e98 <__ieee754_pow+0xa00>)
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	f7fa fa4e 	bl	80001d0 <__aeabi_dsub>
 8005d34:	4622      	mov	r2, r4
 8005d36:	462b      	mov	r3, r5
 8005d38:	f7fa fc02 	bl	8000540 <__aeabi_dmul>
 8005d3c:	a358      	add	r3, pc, #352	; (adr r3, 8005ea0 <__ieee754_pow+0xa08>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f7fa fa47 	bl	80001d4 <__adddf3>
 8005d46:	4622      	mov	r2, r4
 8005d48:	462b      	mov	r3, r5
 8005d4a:	f7fa fbf9 	bl	8000540 <__aeabi_dmul>
 8005d4e:	a356      	add	r3, pc, #344	; (adr r3, 8005ea8 <__ieee754_pow+0xa10>)
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f7fa fa3c 	bl	80001d0 <__aeabi_dsub>
 8005d58:	4622      	mov	r2, r4
 8005d5a:	462b      	mov	r3, r5
 8005d5c:	f7fa fbf0 	bl	8000540 <__aeabi_dmul>
 8005d60:	a353      	add	r3, pc, #332	; (adr r3, 8005eb0 <__ieee754_pow+0xa18>)
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	f7fa fa35 	bl	80001d4 <__adddf3>
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	462b      	mov	r3, r5
 8005d6e:	f7fa fbe7 	bl	8000540 <__aeabi_dmul>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4640      	mov	r0, r8
 8005d78:	4649      	mov	r1, r9
 8005d7a:	f7fa fa29 	bl	80001d0 <__aeabi_dsub>
 8005d7e:	4604      	mov	r4, r0
 8005d80:	460d      	mov	r5, r1
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4640      	mov	r0, r8
 8005d88:	4649      	mov	r1, r9
 8005d8a:	f7fa fbd9 	bl	8000540 <__aeabi_dmul>
 8005d8e:	2200      	movs	r2, #0
 8005d90:	ec41 0b19 	vmov	d9, r0, r1
 8005d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d98:	4620      	mov	r0, r4
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	f7fa fa18 	bl	80001d0 <__aeabi_dsub>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	ec51 0b19 	vmov	r0, r1, d9
 8005da8:	f7fa fcf4 	bl	8000794 <__aeabi_ddiv>
 8005dac:	4632      	mov	r2, r6
 8005dae:	4604      	mov	r4, r0
 8005db0:	460d      	mov	r5, r1
 8005db2:	463b      	mov	r3, r7
 8005db4:	4640      	mov	r0, r8
 8005db6:	4649      	mov	r1, r9
 8005db8:	f7fa fbc2 	bl	8000540 <__aeabi_dmul>
 8005dbc:	4632      	mov	r2, r6
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	f7fa fa08 	bl	80001d4 <__adddf3>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	f7fa fa00 	bl	80001d0 <__aeabi_dsub>
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	f7fa f9fc 	bl	80001d0 <__aeabi_dsub>
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4602      	mov	r2, r0
 8005ddc:	493a      	ldr	r1, [pc, #232]	; (8005ec8 <__ieee754_pow+0xa30>)
 8005dde:	2000      	movs	r0, #0
 8005de0:	f7fa f9f6 	bl	80001d0 <__aeabi_dsub>
 8005de4:	e9cd 0100 	strd	r0, r1, [sp]
 8005de8:	9b01      	ldr	r3, [sp, #4]
 8005dea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df2:	da2f      	bge.n	8005e54 <__ieee754_pow+0x9bc>
 8005df4:	4650      	mov	r0, sl
 8005df6:	ed9d 0b00 	vldr	d0, [sp]
 8005dfa:	f000 f9cd 	bl	8006198 <scalbn>
 8005dfe:	ec51 0b10 	vmov	r0, r1, d0
 8005e02:	ec53 2b18 	vmov	r2, r3, d8
 8005e06:	f7ff bbe0 	b.w	80055ca <__ieee754_pow+0x132>
 8005e0a:	4b30      	ldr	r3, [pc, #192]	; (8005ecc <__ieee754_pow+0xa34>)
 8005e0c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005e10:	429e      	cmp	r6, r3
 8005e12:	f77f af0b 	ble.w	8005c2c <__ieee754_pow+0x794>
 8005e16:	4b2e      	ldr	r3, [pc, #184]	; (8005ed0 <__ieee754_pow+0xa38>)
 8005e18:	440b      	add	r3, r1
 8005e1a:	4303      	orrs	r3, r0
 8005e1c:	d00b      	beq.n	8005e36 <__ieee754_pow+0x99e>
 8005e1e:	a326      	add	r3, pc, #152	; (adr r3, 8005eb8 <__ieee754_pow+0xa20>)
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	ec51 0b18 	vmov	r0, r1, d8
 8005e28:	f7fa fb8a 	bl	8000540 <__aeabi_dmul>
 8005e2c:	a322      	add	r3, pc, #136	; (adr r3, 8005eb8 <__ieee754_pow+0xa20>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7ff bbca 	b.w	80055ca <__ieee754_pow+0x132>
 8005e36:	4622      	mov	r2, r4
 8005e38:	462b      	mov	r3, r5
 8005e3a:	f7fa f9c9 	bl	80001d0 <__aeabi_dsub>
 8005e3e:	4642      	mov	r2, r8
 8005e40:	464b      	mov	r3, r9
 8005e42:	f7fa fe03 	bl	8000a4c <__aeabi_dcmpge>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	f43f aef0 	beq.w	8005c2c <__ieee754_pow+0x794>
 8005e4c:	e7e7      	b.n	8005e1e <__ieee754_pow+0x986>
 8005e4e:	f04f 0a00 	mov.w	sl, #0
 8005e52:	e717      	b.n	8005c84 <__ieee754_pow+0x7ec>
 8005e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	e7d2      	b.n	8005e02 <__ieee754_pow+0x96a>
 8005e5c:	491a      	ldr	r1, [pc, #104]	; (8005ec8 <__ieee754_pow+0xa30>)
 8005e5e:	2000      	movs	r0, #0
 8005e60:	f7ff bb9e 	b.w	80055a0 <__ieee754_pow+0x108>
 8005e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e68:	f7ff bb9a 	b.w	80055a0 <__ieee754_pow+0x108>
 8005e6c:	9000      	str	r0, [sp, #0]
 8005e6e:	f7ff bb76 	b.w	800555e <__ieee754_pow+0xc6>
 8005e72:	2100      	movs	r1, #0
 8005e74:	f7ff bb60 	b.w	8005538 <__ieee754_pow+0xa0>
 8005e78:	00000000 	.word	0x00000000
 8005e7c:	3fe62e43 	.word	0x3fe62e43
 8005e80:	fefa39ef 	.word	0xfefa39ef
 8005e84:	3fe62e42 	.word	0x3fe62e42
 8005e88:	0ca86c39 	.word	0x0ca86c39
 8005e8c:	be205c61 	.word	0xbe205c61
 8005e90:	72bea4d0 	.word	0x72bea4d0
 8005e94:	3e663769 	.word	0x3e663769
 8005e98:	c5d26bf1 	.word	0xc5d26bf1
 8005e9c:	3ebbbd41 	.word	0x3ebbbd41
 8005ea0:	af25de2c 	.word	0xaf25de2c
 8005ea4:	3f11566a 	.word	0x3f11566a
 8005ea8:	16bebd93 	.word	0x16bebd93
 8005eac:	3f66c16c 	.word	0x3f66c16c
 8005eb0:	5555553e 	.word	0x5555553e
 8005eb4:	3fc55555 	.word	0x3fc55555
 8005eb8:	c2f8f359 	.word	0xc2f8f359
 8005ebc:	01a56e1f 	.word	0x01a56e1f
 8005ec0:	3fe00000 	.word	0x3fe00000
 8005ec4:	000fffff 	.word	0x000fffff
 8005ec8:	3ff00000 	.word	0x3ff00000
 8005ecc:	4090cbff 	.word	0x4090cbff
 8005ed0:	3f6f3400 	.word	0x3f6f3400
 8005ed4:	652b82fe 	.word	0x652b82fe
 8005ed8:	3c971547 	.word	0x3c971547

08005edc <__ieee754_sqrt>:
 8005edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee0:	ec55 4b10 	vmov	r4, r5, d0
 8005ee4:	4e56      	ldr	r6, [pc, #344]	; (8006040 <__ieee754_sqrt+0x164>)
 8005ee6:	43ae      	bics	r6, r5
 8005ee8:	ee10 0a10 	vmov	r0, s0
 8005eec:	ee10 3a10 	vmov	r3, s0
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	462a      	mov	r2, r5
 8005ef4:	d110      	bne.n	8005f18 <__ieee754_sqrt+0x3c>
 8005ef6:	ee10 2a10 	vmov	r2, s0
 8005efa:	462b      	mov	r3, r5
 8005efc:	f7fa fb20 	bl	8000540 <__aeabi_dmul>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4620      	mov	r0, r4
 8005f06:	4629      	mov	r1, r5
 8005f08:	f7fa f964 	bl	80001d4 <__adddf3>
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	460d      	mov	r5, r1
 8005f10:	ec45 4b10 	vmov	d0, r4, r5
 8005f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f18:	2d00      	cmp	r5, #0
 8005f1a:	dc10      	bgt.n	8005f3e <__ieee754_sqrt+0x62>
 8005f1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005f20:	4330      	orrs	r0, r6
 8005f22:	d0f5      	beq.n	8005f10 <__ieee754_sqrt+0x34>
 8005f24:	b15d      	cbz	r5, 8005f3e <__ieee754_sqrt+0x62>
 8005f26:	ee10 2a10 	vmov	r2, s0
 8005f2a:	462b      	mov	r3, r5
 8005f2c:	ee10 0a10 	vmov	r0, s0
 8005f30:	f7fa f94e 	bl	80001d0 <__aeabi_dsub>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	f7fa fc2c 	bl	8000794 <__aeabi_ddiv>
 8005f3c:	e7e6      	b.n	8005f0c <__ieee754_sqrt+0x30>
 8005f3e:	1509      	asrs	r1, r1, #20
 8005f40:	d076      	beq.n	8006030 <__ieee754_sqrt+0x154>
 8005f42:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005f46:	07ce      	lsls	r6, r1, #31
 8005f48:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8005f4c:	bf5e      	ittt	pl
 8005f4e:	0fda      	lsrpl	r2, r3, #31
 8005f50:	005b      	lslpl	r3, r3, #1
 8005f52:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005f56:	0fda      	lsrs	r2, r3, #31
 8005f58:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8005f5c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005f60:	2000      	movs	r0, #0
 8005f62:	106d      	asrs	r5, r5, #1
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	f04f 0e16 	mov.w	lr, #22
 8005f6a:	4684      	mov	ip, r0
 8005f6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f70:	eb0c 0401 	add.w	r4, ip, r1
 8005f74:	4294      	cmp	r4, r2
 8005f76:	bfde      	ittt	le
 8005f78:	1b12      	suble	r2, r2, r4
 8005f7a:	eb04 0c01 	addle.w	ip, r4, r1
 8005f7e:	1840      	addle	r0, r0, r1
 8005f80:	0052      	lsls	r2, r2, #1
 8005f82:	f1be 0e01 	subs.w	lr, lr, #1
 8005f86:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005f8a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005f8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005f92:	d1ed      	bne.n	8005f70 <__ieee754_sqrt+0x94>
 8005f94:	4671      	mov	r1, lr
 8005f96:	2720      	movs	r7, #32
 8005f98:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005f9c:	4562      	cmp	r2, ip
 8005f9e:	eb04 060e 	add.w	r6, r4, lr
 8005fa2:	dc02      	bgt.n	8005faa <__ieee754_sqrt+0xce>
 8005fa4:	d113      	bne.n	8005fce <__ieee754_sqrt+0xf2>
 8005fa6:	429e      	cmp	r6, r3
 8005fa8:	d811      	bhi.n	8005fce <__ieee754_sqrt+0xf2>
 8005faa:	2e00      	cmp	r6, #0
 8005fac:	eb06 0e04 	add.w	lr, r6, r4
 8005fb0:	da43      	bge.n	800603a <__ieee754_sqrt+0x15e>
 8005fb2:	f1be 0f00 	cmp.w	lr, #0
 8005fb6:	db40      	blt.n	800603a <__ieee754_sqrt+0x15e>
 8005fb8:	f10c 0801 	add.w	r8, ip, #1
 8005fbc:	eba2 020c 	sub.w	r2, r2, ip
 8005fc0:	429e      	cmp	r6, r3
 8005fc2:	bf88      	it	hi
 8005fc4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8005fc8:	1b9b      	subs	r3, r3, r6
 8005fca:	4421      	add	r1, r4
 8005fcc:	46c4      	mov	ip, r8
 8005fce:	0052      	lsls	r2, r2, #1
 8005fd0:	3f01      	subs	r7, #1
 8005fd2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005fd6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005fda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005fde:	d1dd      	bne.n	8005f9c <__ieee754_sqrt+0xc0>
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	d006      	beq.n	8005ff2 <__ieee754_sqrt+0x116>
 8005fe4:	1c4c      	adds	r4, r1, #1
 8005fe6:	bf13      	iteet	ne
 8005fe8:	3101      	addne	r1, #1
 8005fea:	3001      	addeq	r0, #1
 8005fec:	4639      	moveq	r1, r7
 8005fee:	f021 0101 	bicne.w	r1, r1, #1
 8005ff2:	1043      	asrs	r3, r0, #1
 8005ff4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005ff8:	0849      	lsrs	r1, r1, #1
 8005ffa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005ffe:	07c2      	lsls	r2, r0, #31
 8006000:	bf48      	it	mi
 8006002:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006006:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800600a:	460c      	mov	r4, r1
 800600c:	463d      	mov	r5, r7
 800600e:	e77f      	b.n	8005f10 <__ieee754_sqrt+0x34>
 8006010:	0ada      	lsrs	r2, r3, #11
 8006012:	3815      	subs	r0, #21
 8006014:	055b      	lsls	r3, r3, #21
 8006016:	2a00      	cmp	r2, #0
 8006018:	d0fa      	beq.n	8006010 <__ieee754_sqrt+0x134>
 800601a:	02d7      	lsls	r7, r2, #11
 800601c:	d50a      	bpl.n	8006034 <__ieee754_sqrt+0x158>
 800601e:	f1c1 0420 	rsb	r4, r1, #32
 8006022:	fa23 f404 	lsr.w	r4, r3, r4
 8006026:	1e4d      	subs	r5, r1, #1
 8006028:	408b      	lsls	r3, r1
 800602a:	4322      	orrs	r2, r4
 800602c:	1b41      	subs	r1, r0, r5
 800602e:	e788      	b.n	8005f42 <__ieee754_sqrt+0x66>
 8006030:	4608      	mov	r0, r1
 8006032:	e7f0      	b.n	8006016 <__ieee754_sqrt+0x13a>
 8006034:	0052      	lsls	r2, r2, #1
 8006036:	3101      	adds	r1, #1
 8006038:	e7ef      	b.n	800601a <__ieee754_sqrt+0x13e>
 800603a:	46e0      	mov	r8, ip
 800603c:	e7be      	b.n	8005fbc <__ieee754_sqrt+0xe0>
 800603e:	bf00      	nop
 8006040:	7ff00000 	.word	0x7ff00000

08006044 <fabs>:
 8006044:	ec51 0b10 	vmov	r0, r1, d0
 8006048:	ee10 2a10 	vmov	r2, s0
 800604c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006050:	ec43 2b10 	vmov	d0, r2, r3
 8006054:	4770      	bx	lr

08006056 <finite>:
 8006056:	b082      	sub	sp, #8
 8006058:	ed8d 0b00 	vstr	d0, [sp]
 800605c:	9801      	ldr	r0, [sp, #4]
 800605e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006062:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006066:	0fc0      	lsrs	r0, r0, #31
 8006068:	b002      	add	sp, #8
 800606a:	4770      	bx	lr
 800606c:	0000      	movs	r0, r0
	...

08006070 <nan>:
 8006070:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006078 <nan+0x8>
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	00000000 	.word	0x00000000
 800607c:	7ff80000 	.word	0x7ff80000

08006080 <rint>:
 8006080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006082:	ec51 0b10 	vmov	r0, r1, d0
 8006086:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800608a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800608e:	2e13      	cmp	r6, #19
 8006090:	ee10 4a10 	vmov	r4, s0
 8006094:	460b      	mov	r3, r1
 8006096:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800609a:	dc58      	bgt.n	800614e <rint+0xce>
 800609c:	2e00      	cmp	r6, #0
 800609e:	da2b      	bge.n	80060f8 <rint+0x78>
 80060a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80060a4:	4302      	orrs	r2, r0
 80060a6:	d023      	beq.n	80060f0 <rint+0x70>
 80060a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80060ac:	4302      	orrs	r2, r0
 80060ae:	4254      	negs	r4, r2
 80060b0:	4314      	orrs	r4, r2
 80060b2:	0c4b      	lsrs	r3, r1, #17
 80060b4:	0b24      	lsrs	r4, r4, #12
 80060b6:	045b      	lsls	r3, r3, #17
 80060b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80060bc:	ea44 0103 	orr.w	r1, r4, r3
 80060c0:	4b32      	ldr	r3, [pc, #200]	; (800618c <rint+0x10c>)
 80060c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80060c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4630      	mov	r0, r6
 80060d0:	4639      	mov	r1, r7
 80060d2:	f7fa f87f 	bl	80001d4 <__adddf3>
 80060d6:	e9cd 0100 	strd	r0, r1, [sp]
 80060da:	463b      	mov	r3, r7
 80060dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060e0:	4632      	mov	r2, r6
 80060e2:	f7fa f875 	bl	80001d0 <__aeabi_dsub>
 80060e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80060ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80060ee:	4639      	mov	r1, r7
 80060f0:	ec41 0b10 	vmov	d0, r0, r1
 80060f4:	b003      	add	sp, #12
 80060f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f8:	4a25      	ldr	r2, [pc, #148]	; (8006190 <rint+0x110>)
 80060fa:	4132      	asrs	r2, r6
 80060fc:	ea01 0702 	and.w	r7, r1, r2
 8006100:	4307      	orrs	r7, r0
 8006102:	d0f5      	beq.n	80060f0 <rint+0x70>
 8006104:	0851      	lsrs	r1, r2, #1
 8006106:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800610a:	4314      	orrs	r4, r2
 800610c:	d00c      	beq.n	8006128 <rint+0xa8>
 800610e:	ea23 0201 	bic.w	r2, r3, r1
 8006112:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006116:	2e13      	cmp	r6, #19
 8006118:	fa43 f606 	asr.w	r6, r3, r6
 800611c:	bf0c      	ite	eq
 800611e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006122:	2400      	movne	r4, #0
 8006124:	ea42 0306 	orr.w	r3, r2, r6
 8006128:	4918      	ldr	r1, [pc, #96]	; (800618c <rint+0x10c>)
 800612a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800612e:	4622      	mov	r2, r4
 8006130:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006134:	4620      	mov	r0, r4
 8006136:	4629      	mov	r1, r5
 8006138:	f7fa f84c 	bl	80001d4 <__adddf3>
 800613c:	e9cd 0100 	strd	r0, r1, [sp]
 8006140:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006144:	4622      	mov	r2, r4
 8006146:	462b      	mov	r3, r5
 8006148:	f7fa f842 	bl	80001d0 <__aeabi_dsub>
 800614c:	e7d0      	b.n	80060f0 <rint+0x70>
 800614e:	2e33      	cmp	r6, #51	; 0x33
 8006150:	dd07      	ble.n	8006162 <rint+0xe2>
 8006152:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006156:	d1cb      	bne.n	80060f0 <rint+0x70>
 8006158:	ee10 2a10 	vmov	r2, s0
 800615c:	f7fa f83a 	bl	80001d4 <__adddf3>
 8006160:	e7c6      	b.n	80060f0 <rint+0x70>
 8006162:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006166:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800616a:	40d6      	lsrs	r6, r2
 800616c:	4230      	tst	r0, r6
 800616e:	d0bf      	beq.n	80060f0 <rint+0x70>
 8006170:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8006174:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8006178:	bf1f      	itttt	ne
 800617a:	ea24 0101 	bicne.w	r1, r4, r1
 800617e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006182:	fa44 f202 	asrne.w	r2, r4, r2
 8006186:	ea41 0402 	orrne.w	r4, r1, r2
 800618a:	e7cd      	b.n	8006128 <rint+0xa8>
 800618c:	080064e8 	.word	0x080064e8
 8006190:	000fffff 	.word	0x000fffff
 8006194:	00000000 	.word	0x00000000

08006198 <scalbn>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	ec55 4b10 	vmov	r4, r5, d0
 800619e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80061a2:	4606      	mov	r6, r0
 80061a4:	462b      	mov	r3, r5
 80061a6:	b99a      	cbnz	r2, 80061d0 <scalbn+0x38>
 80061a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80061ac:	4323      	orrs	r3, r4
 80061ae:	d036      	beq.n	800621e <scalbn+0x86>
 80061b0:	4b39      	ldr	r3, [pc, #228]	; (8006298 <scalbn+0x100>)
 80061b2:	4629      	mov	r1, r5
 80061b4:	ee10 0a10 	vmov	r0, s0
 80061b8:	2200      	movs	r2, #0
 80061ba:	f7fa f9c1 	bl	8000540 <__aeabi_dmul>
 80061be:	4b37      	ldr	r3, [pc, #220]	; (800629c <scalbn+0x104>)
 80061c0:	429e      	cmp	r6, r3
 80061c2:	4604      	mov	r4, r0
 80061c4:	460d      	mov	r5, r1
 80061c6:	da10      	bge.n	80061ea <scalbn+0x52>
 80061c8:	a32b      	add	r3, pc, #172	; (adr r3, 8006278 <scalbn+0xe0>)
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	e03a      	b.n	8006246 <scalbn+0xae>
 80061d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80061d4:	428a      	cmp	r2, r1
 80061d6:	d10c      	bne.n	80061f2 <scalbn+0x5a>
 80061d8:	ee10 2a10 	vmov	r2, s0
 80061dc:	4620      	mov	r0, r4
 80061de:	4629      	mov	r1, r5
 80061e0:	f7f9 fff8 	bl	80001d4 <__adddf3>
 80061e4:	4604      	mov	r4, r0
 80061e6:	460d      	mov	r5, r1
 80061e8:	e019      	b.n	800621e <scalbn+0x86>
 80061ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80061ee:	460b      	mov	r3, r1
 80061f0:	3a36      	subs	r2, #54	; 0x36
 80061f2:	4432      	add	r2, r6
 80061f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80061f8:	428a      	cmp	r2, r1
 80061fa:	dd08      	ble.n	800620e <scalbn+0x76>
 80061fc:	2d00      	cmp	r5, #0
 80061fe:	a120      	add	r1, pc, #128	; (adr r1, 8006280 <scalbn+0xe8>)
 8006200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006204:	da1c      	bge.n	8006240 <scalbn+0xa8>
 8006206:	a120      	add	r1, pc, #128	; (adr r1, 8006288 <scalbn+0xf0>)
 8006208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800620c:	e018      	b.n	8006240 <scalbn+0xa8>
 800620e:	2a00      	cmp	r2, #0
 8006210:	dd08      	ble.n	8006224 <scalbn+0x8c>
 8006212:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006216:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800621a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800621e:	ec45 4b10 	vmov	d0, r4, r5
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006228:	da19      	bge.n	800625e <scalbn+0xc6>
 800622a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800622e:	429e      	cmp	r6, r3
 8006230:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006234:	dd0a      	ble.n	800624c <scalbn+0xb4>
 8006236:	a112      	add	r1, pc, #72	; (adr r1, 8006280 <scalbn+0xe8>)
 8006238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e2      	bne.n	8006206 <scalbn+0x6e>
 8006240:	a30f      	add	r3, pc, #60	; (adr r3, 8006280 <scalbn+0xe8>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7fa f97b 	bl	8000540 <__aeabi_dmul>
 800624a:	e7cb      	b.n	80061e4 <scalbn+0x4c>
 800624c:	a10a      	add	r1, pc, #40	; (adr r1, 8006278 <scalbn+0xe0>)
 800624e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0b8      	beq.n	80061c8 <scalbn+0x30>
 8006256:	a10e      	add	r1, pc, #56	; (adr r1, 8006290 <scalbn+0xf8>)
 8006258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800625c:	e7b4      	b.n	80061c8 <scalbn+0x30>
 800625e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006262:	3236      	adds	r2, #54	; 0x36
 8006264:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006268:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800626c:	4620      	mov	r0, r4
 800626e:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <scalbn+0x108>)
 8006270:	2200      	movs	r2, #0
 8006272:	e7e8      	b.n	8006246 <scalbn+0xae>
 8006274:	f3af 8000 	nop.w
 8006278:	c2f8f359 	.word	0xc2f8f359
 800627c:	01a56e1f 	.word	0x01a56e1f
 8006280:	8800759c 	.word	0x8800759c
 8006284:	7e37e43c 	.word	0x7e37e43c
 8006288:	8800759c 	.word	0x8800759c
 800628c:	fe37e43c 	.word	0xfe37e43c
 8006290:	c2f8f359 	.word	0xc2f8f359
 8006294:	81a56e1f 	.word	0x81a56e1f
 8006298:	43500000 	.word	0x43500000
 800629c:	ffff3cb0 	.word	0xffff3cb0
 80062a0:	3c900000 	.word	0x3c900000

080062a4 <_init>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	bf00      	nop
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr

080062b0 <_fini>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	bf00      	nop
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr
