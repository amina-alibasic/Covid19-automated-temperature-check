
full_pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00005310  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08005498  08005498  00015498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c0  080056c0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080056c0  080056c0  000156c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c8  080056c8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056cc  080056cc  000156cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080056d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000088  08005758  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005758  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cae5  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c88  00000000  00000000  0002cb9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002e828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002f3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e9d  00000000  00000000  0002fef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc5f  00000000  00000000  00052d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d77c5  00000000  00000000  0005f9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001371b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003590  00000000  00000000  00137204  2**2
=======
  1 .text         00005ab8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08005c40  08005c40  00015c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e78  08005e78  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005e78  08005e78  00015e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e80  08005e80  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000088  08005f10  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08005f10  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c981  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c65  00000000  00000000  0002ca39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002e6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002f248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e19  00000000  00000000  0002fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb0e  00000000  00000000  00052b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7795  00000000  00000000  0005f66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00136e04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003560  00000000  00000000  00136e58  2**2
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001a8:	08005480 	.word	0x08005480
=======
 80001a8:	08005c28 	.word	0x08005c28
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
<<<<<<< HEAD
 80001c4:	08005480 	.word	0x08005480
=======
 80001c4:	08005c28 	.word	0x08005c28
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <main>:
  	  	  "Da li ste bili u kontaktu s nekim ko je bio pozitivan na Covid-19?"};
char* warning = "Molimo Vas da posjetite Covid ambulantu.";


int main(void)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b090      	sub	sp, #64	; 0x40
 8000e3c:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000e3e:	f001 fbdf 	bl	8002600 <HAL_Init>
 // SystemClock_Config();
  /* Initialize all configured peripherals */
  initUSART2(921600);
 8000e42:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 8000e46:	f001 f93b 	bl	80020c0 <initUSART2>
  MX_GPIO_Init();
 8000e4a:	f000 faad 	bl	80013a8 <MX_GPIO_Init>
  MX_TIM12_Init();
 8000e4e:	f000 fa47 	bl	80012e0 <MX_TIM12_Init>
  MX_USART2_UART_Init();
 8000e52:	f000 fa7f 	bl	8001354 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e56:	f000 f9d9 	bl	800120c <MX_ADC1_Init>


  HAL_TIM_Base_Start(&htim12); //Initialize stm32 timer for DC motor
 8000e5a:	486f      	ldr	r0, [pc, #444]	; (8001018 <main+0x1e0>)
 8000e5c:	f002 fbd4 	bl	8003608 <HAL_TIM_Base_Start>
=======
 8000e3e:	f001 fb95 	bl	800256c <HAL_Init>
  SystemClock_Config();
 8000e42:	f000 f9d1 	bl	80011e8 <SystemClock_Config>


  /* Initialize all configured peripherals */
  initUSART2(921600);
 8000e46:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 8000e4a:	f001 f8ef 	bl	800202c <initUSART2>
  MX_GPIO_Init();
 8000e4e:	f000 fb01 	bl	8001454 <MX_GPIO_Init>
  MX_TIM12_Init();
 8000e52:	f000 fa9b 	bl	800138c <MX_TIM12_Init>
  MX_USART2_UART_Init();
 8000e56:	f000 fad3 	bl	8001400 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e5a:	f000 fa2d 	bl	80012b8 <MX_ADC1_Init>


  HAL_TIM_Base_Start(&htim12); //Initialize stm32 timer for DC motor
 8000e5e:	486a      	ldr	r0, [pc, #424]	; (8001008 <main+0x1d0>)
 8000e60:	f002 ff9c 	bl	8003d9c <HAL_TIM_Base_Start>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  // HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);  //PB0 Start pwm  motor 100% duty cycle
   //__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 40);

  uint16_t raw;
  while(1){
<<<<<<< HEAD
	  counter = 0;
 8000e60:	4b6e      	ldr	r3, [pc, #440]	; (800101c <main+0x1e4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
	  HAL_Delay(100);
 8000e66:	2064      	movs	r0, #100	; 0x64
 8000e68:	f001 fc3c 	bl	80026e4 <HAL_Delay>
	  printUSART2("Dobrodosli.\n");
 8000e6c:	486c      	ldr	r0, [pc, #432]	; (8001020 <main+0x1e8>)
 8000e6e:	f001 f995 	bl	800219c <printUSART2>
	  HAL_Delay(100);
 8000e72:	2064      	movs	r0, #100	; 0x64
 8000e74:	f001 fc36 	bl	80026e4 <HAL_Delay>
	  printUSART2("Molimo Vas dodirnite senzor za mjerenje temperature");
 8000e78:	486a      	ldr	r0, [pc, #424]	; (8001024 <main+0x1ec>)
 8000e7a:	f001 f98f 	bl	800219c <printUSART2>
	  HAL_Delay(100);
 8000e7e:	2064      	movs	r0, #100	; 0x64
 8000e80:	f001 fc30 	bl	80026e4 <HAL_Delay>
	  printUSART2(" i sacekajte da se Vasa temperatura izmjeri.\n");
 8000e84:	4868      	ldr	r0, [pc, #416]	; (8001028 <main+0x1f0>)
 8000e86:	f001 f989 	bl	800219c <printUSART2>
	  HAL_Delay(2000);
 8000e8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e8e:	f001 fc29 	bl	80026e4 <HAL_Delay>
        raw = getADC();
 8000e92:	f000 fa0d 	bl	80012b0 <getADC>
 8000e96:	4603      	mov	r3, r0
 8000e98:	87fb      	strh	r3, [r7, #62]	; 0x3e
 	  	double v = raw * 3.3 / 4096;
 8000e9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fae5 	bl	800046c <__aeabi_i2d>
 8000ea2:	a353      	add	r3, pc, #332	; (adr r3, 8000ff0 <main+0x1b8>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff fb4a 	bl	8000540 <__aeabi_dmul>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	4b5c      	ldr	r3, [pc, #368]	; (800102c <main+0x1f4>)
 8000eba:	f7ff fc6b 	bl	8000794 <__aeabi_ddiv>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 	  	double Rt = 10 * v / ( 3.3 - v );
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	4b59      	ldr	r3, [pc, #356]	; (8001030 <main+0x1f8>)
 8000ecc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000ed0:	f7ff fb36 	bl	8000540 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4614      	mov	r4, r2
 8000eda:	461d      	mov	r5, r3
 8000edc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ee0:	a143      	add	r1, pc, #268	; (adr r1, 8000ff0 <main+0x1b8>)
 8000ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ee6:	f7ff f973 	bl	80001d0 <__aeabi_dsub>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4620      	mov	r0, r4
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	f7ff fc4f 	bl	8000794 <__aeabi_ddiv>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 	  	double temp = 1 / (log(Rt / 10) / 3950 + 1 / (273.15 + 25));
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	4b4b      	ldr	r3, [pc, #300]	; (8001030 <main+0x1f8>)
 8000f04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f08:	f7ff fc44 	bl	8000794 <__aeabi_ddiv>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	ec43 2b17 	vmov	d7, r2, r3
 8000f14:	eeb0 0a47 	vmov.f32	s0, s14
 8000f18:	eef0 0a67 	vmov.f32	s1, s15
 8000f1c:	f003 f8f0 	bl	8004100 <log>
 8000f20:	ec51 0b10 	vmov	r0, r1, d0
 8000f24:	a334      	add	r3, pc, #208	; (adr r3, 8000ff8 <main+0x1c0>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	f7ff fc33 	bl	8000794 <__aeabi_ddiv>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	a332      	add	r3, pc, #200	; (adr r3, 8001000 <main+0x1c8>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff f94a 	bl	80001d4 <__adddf3>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	f04f 0000 	mov.w	r0, #0
 8000f48:	493a      	ldr	r1, [pc, #232]	; (8001034 <main+0x1fc>)
 8000f4a:	f7ff fc23 	bl	8000794 <__aeabi_ddiv>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	e9c7 2308 	strd	r2, r3, [r7, #32]
 	  	double tempc = temp - 273.15 - 2;
 8000f56:	a32c      	add	r3, pc, #176	; (adr r3, 8001008 <main+0x1d0>)
 8000f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f60:	f7ff f936 	bl	80001d0 <__aeabi_dsub>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f74:	f7ff f92c 	bl	80001d0 <__aeabi_dsub>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  	 // check if user has touched the thermistor
	  	 // no room temperature is over 30 and person's temperature is under 30
	  	 if(tempc > 30){
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <main+0x200>)
 8000f86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f8a:	f7ff fd69 	bl	8000a60 <__aeabi_dcmpgt>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d006      	beq.n	8000fa2 <main+0x16a>
	  	 	 printUSART2("Mjerenje ...\n");
 8000f94:	4829      	ldr	r0, [pc, #164]	; (800103c <main+0x204>)
 8000f96:	f001 f901 	bl	800219c <printUSART2>
	  	 	 HAL_Delay(5000); // wait aprox. 5sec for sensor to measure the temperature
 8000f9a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f9e:	f001 fba1 	bl	80026e4 <HAL_Delay>
	  	 }
         char res[20];
	  	 ftoa(tempc, res, 1);
 8000fa2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fa6:	f7ff fd7b 	bl	8000aa0 <__aeabi_d2f>
 8000faa:	4602      	mov	r2, r0
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	ee00 2a10 	vmov	s0, r2
 8000fb6:	f000 fb0b 	bl	80015d0 <ftoa>
	  	 printUSART2("Vasa temperatura iznosi %s\n", res);
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4820      	ldr	r0, [pc, #128]	; (8001040 <main+0x208>)
 8000fc0:	f001 f8ec 	bl	800219c <printUSART2>
	  	 if(tempc > 36.9) { yesAnswer(); return 0;}
 8000fc4:	a312      	add	r3, pc, #72	; (adr r3, 8001010 <main+0x1d8>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fce:	f7ff fd47 	bl	8000a60 <__aeabi_dcmpgt>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <main+0x1a8>
 8000fd8:	f000 f8c4 	bl	8001164 <yesAnswer>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e002      	b.n	8000fe6 <main+0x1ae>

	  	 outputQuestions();
 8000fe0:	f000 f830 	bl	8001044 <outputQuestions>
  while(1){
 8000fe4:	e73c      	b.n	8000e60 <main+0x28>
  }

}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3740      	adds	r7, #64	; 0x40
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bdb0      	pop	{r4, r5, r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	66666666 	.word	0x66666666
 8000ff4:	400a6666 	.word	0x400a6666
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40aedc00 	.word	0x40aedc00
 8001000:	dcb5db83 	.word	0xdcb5db83
 8001004:	3f6b79e1 	.word	0x3f6b79e1
 8001008:	66666666 	.word	0x66666666
 800100c:	40711266 	.word	0x40711266
 8001010:	33333333 	.word	0x33333333
 8001014:	40427333 	.word	0x40427333
 8001018:	20000180 	.word	0x20000180
 800101c:	200000f0 	.word	0x200000f0
 8001020:	080055ac 	.word	0x080055ac
 8001024:	080055bc 	.word	0x080055bc
 8001028:	080055f0 	.word	0x080055f0
 800102c:	40b00000 	.word	0x40b00000
 8001030:	40240000 	.word	0x40240000
 8001034:	3ff00000 	.word	0x3ff00000
 8001038:	403e0000 	.word	0x403e0000
 800103c:	08005620 	.word	0x08005620
 8001040:	08005630 	.word	0x08005630

08001044 <outputQuestions>:


void outputQuestions(void){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
=======
  printUSART2("Dobrodosli.\n");
 8000e64:	4869      	ldr	r0, [pc, #420]	; (800100c <main+0x1d4>)
 8000e66:	f001 f94f 	bl	8002108 <printUSART2>
  printUSART2("Molimo Vas dodirnite senzor za mjerenje temperature");
 8000e6a:	4869      	ldr	r0, [pc, #420]	; (8001010 <main+0x1d8>)
 8000e6c:	f001 f94c 	bl	8002108 <printUSART2>
  printUSART2(" i sacekajte da se Vasa temperatura izmjeri.\n");
 8000e70:	4868      	ldr	r0, [pc, #416]	; (8001014 <main+0x1dc>)
 8000e72:	f001 f949 	bl	8002108 <printUSART2>
  HAL_Delay(5000);
 8000e76:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e7a:	f001 fbe9 	bl	8002650 <HAL_Delay>
        raw = getADC();
 8000e7e:	f000 fa6d 	bl	800135c <getADC>
 8000e82:	4603      	mov	r3, r0
 8000e84:	87fb      	strh	r3, [r7, #62]	; 0x3e
 	  	double v = raw * 3.3 / 4096;
 8000e86:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff faef 	bl	800046c <__aeabi_i2d>
 8000e8e:	a354      	add	r3, pc, #336	; (adr r3, 8000fe0 <main+0x1a8>)
 8000e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e94:	f7ff fb54 	bl	8000540 <__aeabi_dmul>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <main+0x1e0>)
 8000ea6:	f7ff fc75 	bl	8000794 <__aeabi_ddiv>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 	  	double Rt = 10 * v / ( 3.3 - v );
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b59      	ldr	r3, [pc, #356]	; (800101c <main+0x1e4>)
 8000eb8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000ebc:	f7ff fb40 	bl	8000540 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4614      	mov	r4, r2
 8000ec6:	461d      	mov	r5, r3
 8000ec8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ecc:	a144      	add	r1, pc, #272	; (adr r1, 8000fe0 <main+0x1a8>)
 8000ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ed2:	f7ff f97d 	bl	80001d0 <__aeabi_dsub>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4620      	mov	r0, r4
 8000edc:	4629      	mov	r1, r5
 8000ede:	f7ff fc59 	bl	8000794 <__aeabi_ddiv>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 	  	double temp = 1 / (log(Rt / 10) / 3950 + 1 / (273.15 + 25));
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	4b4b      	ldr	r3, [pc, #300]	; (800101c <main+0x1e4>)
 8000ef0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000ef4:	f7ff fc4e 	bl	8000794 <__aeabi_ddiv>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	ec43 2b17 	vmov	d7, r2, r3
 8000f00:	eeb0 0a47 	vmov.f32	s0, s14
 8000f04:	eef0 0a67 	vmov.f32	s1, s15
 8000f08:	f003 fcce 	bl	80048a8 <log>
 8000f0c:	ec51 0b10 	vmov	r0, r1, d0
 8000f10:	a335      	add	r3, pc, #212	; (adr r3, 8000fe8 <main+0x1b0>)
 8000f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f16:	f7ff fc3d 	bl	8000794 <__aeabi_ddiv>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	a333      	add	r3, pc, #204	; (adr r3, 8000ff0 <main+0x1b8>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	f7ff f954 	bl	80001d4 <__adddf3>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	f04f 0000 	mov.w	r0, #0
 8000f34:	493a      	ldr	r1, [pc, #232]	; (8001020 <main+0x1e8>)
 8000f36:	f7ff fc2d 	bl	8000794 <__aeabi_ddiv>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 	  	double tempc = temp - 273.15 - 2;
 8000f42:	a32d      	add	r3, pc, #180	; (adr r3, 8000ff8 <main+0x1c0>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f4c:	f7ff f940 	bl	80001d0 <__aeabi_dsub>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f60:	f7ff f936 	bl	80001d0 <__aeabi_dsub>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  	 // check if user has touched the thermistor
	  	 // no room temperature is over 30 and person's temperature is under 30
	  	 if(tempc > 30){
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <main+0x1ec>)
 8000f72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f76:	f7ff fd73 	bl	8000a60 <__aeabi_dcmpgt>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d006      	beq.n	8000f8e <main+0x156>
	  	 	 printUSART2("Mjerenje ...\n");
 8000f80:	4829      	ldr	r0, [pc, #164]	; (8001028 <main+0x1f0>)
 8000f82:	f001 f8c1 	bl	8002108 <printUSART2>
	  	 	 HAL_Delay(5000); // wait aprox. 5sec for sensor to measure the temperature
 8000f86:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f8a:	f001 fb61 	bl	8002650 <HAL_Delay>
	  	 }
         char res[20];
	  	 ftoa(tempc, res, 1);
 8000f8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f92:	f7ff fd85 	bl	8000aa0 <__aeabi_d2f>
 8000f96:	4602      	mov	r2, r0
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	ee00 2a10 	vmov	s0, r2
 8000fa2:	f000 fb6d 	bl	8001680 <ftoa>
	  	 printUSART2("Vasa temperatura iznosi %s\n", res);
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4820      	ldr	r0, [pc, #128]	; (800102c <main+0x1f4>)
 8000fac:	f001 f8ac 	bl	8002108 <printUSART2>
	  	 if(tempc > 36.9) { yesAnswer(); return 0;}
 8000fb0:	a313      	add	r3, pc, #76	; (adr r3, 8001000 <main+0x1c8>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fba:	f7ff fd51 	bl	8000a60 <__aeabi_dcmpgt>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <main+0x194>
 8000fc4:	f000 f8bc 	bl	8001140 <yesAnswer>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	e002      	b.n	8000fd2 <main+0x19a>

	  	 outputQuestions();
 8000fcc:	f000 f830 	bl	8001030 <outputQuestions>
  while(1){
 8000fd0:	e748      	b.n	8000e64 <main+0x2c>
  }


	  	 	 			HAL_Delay(1000);

}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3740      	adds	r7, #64	; 0x40
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	66666666 	.word	0x66666666
 8000fe4:	400a6666 	.word	0x400a6666
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	40aedc00 	.word	0x40aedc00
 8000ff0:	dcb5db83 	.word	0xdcb5db83
 8000ff4:	3f6b79e1 	.word	0x3f6b79e1
 8000ff8:	66666666 	.word	0x66666666
 8000ffc:	40711266 	.word	0x40711266
 8001000:	33333333 	.word	0x33333333
 8001004:	40427333 	.word	0x40427333
 8001008:	20000138 	.word	0x20000138
 800100c:	08005d54 	.word	0x08005d54
 8001010:	08005d64 	.word	0x08005d64
 8001014:	08005d98 	.word	0x08005d98
 8001018:	40b00000 	.word	0x40b00000
 800101c:	40240000 	.word	0x40240000
 8001020:	3ff00000 	.word	0x3ff00000
 8001024:	403e0000 	.word	0x403e0000
 8001028:	08005dc8 	.word	0x08005dc8
 800102c:	08005dd8 	.word	0x08005dd8

08001030 <outputQuestions>:


void outputQuestions(void){
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
	while(1){
		HAL_Delay(100);
 8001048:	2064      	movs	r0, #100	; 0x64
 800104a:	f001 fb4b 	bl	80026e4 <HAL_Delay>
		counter = 0;
 800104e:	4b37      	ldr	r3, [pc, #220]	; (800112c <outputQuestions+0xe8>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
	// first question
	printUSART2("%s\n", nextQuestion());
<<<<<<< HEAD
 8001054:	f000 f872 	bl	800113c <nextQuestion>
 8001058:	4603      	mov	r3, r0
 800105a:	4619      	mov	r1, r3
 800105c:	4834      	ldr	r0, [pc, #208]	; (8001130 <outputQuestions+0xec>)
 800105e:	f001 f89d 	bl	800219c <printUSART2>

	// check for YES button press
	if(checkYes()) { yesAnswer(); }
 8001062:	f000 f895 	bl	8001190 <checkYes>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <outputQuestions+0x2e>
 800106c:	f000 f87a 	bl	8001164 <yesAnswer>
 8001070:	e057      	b.n	8001122 <outputQuestions+0xde>

	// check for NO button press
	else if(checkNo()) {
 8001072:	f000 f8af 	bl	80011d4 <checkNo>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d052      	beq.n	8001122 <outputQuestions+0xde>
		// second question
		printUSART2("%s\n", nextQuestion());
 800107c:	f000 f85e 	bl	800113c <nextQuestion>
 8001080:	4603      	mov	r3, r0
 8001082:	4619      	mov	r1, r3
 8001084:	482a      	ldr	r0, [pc, #168]	; (8001130 <outputQuestions+0xec>)
 8001086:	f001 f889 	bl	800219c <printUSART2>

		// check for YES button press
		if(checkYes()) { yesAnswer(); }
 800108a:	f000 f881 	bl	8001190 <checkYes>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <outputQuestions+0x56>
 8001094:	f000 f866 	bl	8001164 <yesAnswer>
 8001098:	e043      	b.n	8001122 <outputQuestions+0xde>
		else if(checkNo()) {
 800109a:	f000 f89b 	bl	80011d4 <checkNo>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d03e      	beq.n	8001122 <outputQuestions+0xde>
			// 3rd question
			printUSART2("%s\n", nextQuestion());
 80010a4:	f000 f84a 	bl	800113c <nextQuestion>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4619      	mov	r1, r3
 80010ac:	4820      	ldr	r0, [pc, #128]	; (8001130 <outputQuestions+0xec>)
 80010ae:	f001 f875 	bl	800219c <printUSART2>

		  	if(checkYes()) { yesAnswer(); }
 80010b2:	f000 f86d 	bl	8001190 <checkYes>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <outputQuestions+0x7e>
 80010bc:	f000 f852 	bl	8001164 <yesAnswer>
 80010c0:	e02f      	b.n	8001122 <outputQuestions+0xde>
		  	else if(checkNo()) {
 80010c2:	f000 f887 	bl	80011d4 <checkNo>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d02a      	beq.n	8001122 <outputQuestions+0xde>
		  		// 4th question
		  		printUSART2("%s\n", nextQuestion());
 80010cc:	f000 f836 	bl	800113c <nextQuestion>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4619      	mov	r1, r3
 80010d4:	4816      	ldr	r0, [pc, #88]	; (8001130 <outputQuestions+0xec>)
 80010d6:	f001 f861 	bl	800219c <printUSART2>

		  		if(checkYes()) { yesAnswer(); }
 80010da:	f000 f859 	bl	8001190 <checkYes>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <outputQuestions+0xa6>
 80010e4:	f000 f83e 	bl	8001164 <yesAnswer>
 80010e8:	e01b      	b.n	8001122 <outputQuestions+0xde>
		  	 	else if(checkNo()) {
 80010ea:	f000 f873 	bl	80011d4 <checkNo>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d016      	beq.n	8001122 <outputQuestions+0xde>
		  	 		// turn on green LED
		  	 	 	 HAL_GPIO_WritePin(GPIOA,green_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fa:	480e      	ldr	r0, [pc, #56]	; (8001134 <outputQuestions+0xf0>)
 80010fc:	f002 f9a8 	bl	8003450 <HAL_GPIO_WritePin>
		  	 	 	 printUSART2("Mozete uci u prostoriju.");
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <outputQuestions+0xf4>)
 8001102:	f001 f84b 	bl	800219c <printUSART2>
		  	 	 	 HAL_GPIO_WritePin(GPIOA,DC_in1_Pin,GPIO_PIN_SET);   // Start motor clockwise rotation
 8001106:	2201      	movs	r2, #1
 8001108:	2110      	movs	r1, #16
 800110a:	480a      	ldr	r0, [pc, #40]	; (8001134 <outputQuestions+0xf0>)
 800110c:	f002 f9a0 	bl	8003450 <HAL_GPIO_WritePin>
		  	 	 	 HAL_GPIO_WritePin(GPIOA,DC_in2_Pin,GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2120      	movs	r1, #32
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <outputQuestions+0xf0>)
 8001116:	f002 f99b 	bl	8003450 <HAL_GPIO_WritePin>
		  	 	 	 HAL_Delay(3000);
 800111a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800111e:	f001 fae1 	bl	80026e4 <HAL_Delay>
=======
 8001034:	f000 f870 	bl	8001118 <nextQuestion>
 8001038:	4603      	mov	r3, r0
 800103a:	4619      	mov	r1, r3
 800103c:	4833      	ldr	r0, [pc, #204]	; (800110c <outputQuestions+0xdc>)
 800103e:	f001 f863 	bl	8002108 <printUSART2>

	// check for YES button press
	if(checkYes()) { yesAnswer(); }
 8001042:	f000 f893 	bl	800116c <checkYes>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <outputQuestions+0x22>
 800104c:	f000 f878 	bl	8001140 <yesAnswer>
 8001050:	e057      	b.n	8001102 <outputQuestions+0xd2>

	// check for NO button press
	else if(checkNo()) {
 8001052:	f000 f8ad 	bl	80011b0 <checkNo>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d052      	beq.n	8001102 <outputQuestions+0xd2>
		// second question
		printUSART2("%s\n", nextQuestion());
 800105c:	f000 f85c 	bl	8001118 <nextQuestion>
 8001060:	4603      	mov	r3, r0
 8001062:	4619      	mov	r1, r3
 8001064:	4829      	ldr	r0, [pc, #164]	; (800110c <outputQuestions+0xdc>)
 8001066:	f001 f84f 	bl	8002108 <printUSART2>

		// check for YES button press
		if(checkYes()) { yesAnswer(); }
 800106a:	f000 f87f 	bl	800116c <checkYes>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <outputQuestions+0x4a>
 8001074:	f000 f864 	bl	8001140 <yesAnswer>
 8001078:	e043      	b.n	8001102 <outputQuestions+0xd2>
		else if(checkNo()) {
 800107a:	f000 f899 	bl	80011b0 <checkNo>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d03e      	beq.n	8001102 <outputQuestions+0xd2>
			// 3rd question
			printUSART2("%s\n", nextQuestion());
 8001084:	f000 f848 	bl	8001118 <nextQuestion>
 8001088:	4603      	mov	r3, r0
 800108a:	4619      	mov	r1, r3
 800108c:	481f      	ldr	r0, [pc, #124]	; (800110c <outputQuestions+0xdc>)
 800108e:	f001 f83b 	bl	8002108 <printUSART2>

		  	if(checkYes()) { yesAnswer(); }
 8001092:	f000 f86b 	bl	800116c <checkYes>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <outputQuestions+0x72>
 800109c:	f000 f850 	bl	8001140 <yesAnswer>
 80010a0:	e02f      	b.n	8001102 <outputQuestions+0xd2>
		  	else if(checkNo()) {
 80010a2:	f000 f885 	bl	80011b0 <checkNo>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d02a      	beq.n	8001102 <outputQuestions+0xd2>
		  		// 4th question
		  		printUSART2("%s\n", nextQuestion());
 80010ac:	f000 f834 	bl	8001118 <nextQuestion>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4619      	mov	r1, r3
 80010b4:	4815      	ldr	r0, [pc, #84]	; (800110c <outputQuestions+0xdc>)
 80010b6:	f001 f827 	bl	8002108 <printUSART2>

		  		if(checkYes()) { yesAnswer(); }
 80010ba:	f000 f857 	bl	800116c <checkYes>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <outputQuestions+0x9a>
 80010c4:	f000 f83c 	bl	8001140 <yesAnswer>
 80010c8:	e01b      	b.n	8001102 <outputQuestions+0xd2>
		  	 	else if(checkNo()) {
 80010ca:	f000 f871 	bl	80011b0 <checkNo>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d016      	beq.n	8001102 <outputQuestions+0xd2>
		  	 		// turn on green LED
		  	 	 	 HAL_GPIO_WritePin(GPIOA,green_Pin, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <outputQuestions+0xe0>)
 80010dc:	f002 f96e 	bl	80033bc <HAL_GPIO_WritePin>
		  	 	 	 printUSART2("Mozete uci u prostoriju.");
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <outputQuestions+0xe4>)
 80010e2:	f001 f811 	bl	8002108 <printUSART2>
		  	 	 	 HAL_GPIO_WritePin(GPIOA,DC_in1_Pin,GPIO_PIN_SET);   // Start motor clockwise rotation
 80010e6:	2201      	movs	r2, #1
 80010e8:	2110      	movs	r1, #16
 80010ea:	4809      	ldr	r0, [pc, #36]	; (8001110 <outputQuestions+0xe0>)
 80010ec:	f002 f966 	bl	80033bc <HAL_GPIO_WritePin>
		  	 	 	 HAL_GPIO_WritePin(GPIOA,DC_in2_Pin,GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2120      	movs	r1, #32
 80010f4:	4806      	ldr	r0, [pc, #24]	; (8001110 <outputQuestions+0xe0>)
 80010f6:	f002 f961 	bl	80033bc <HAL_GPIO_WritePin>
		  	 	 	 HAL_Delay(3000);
 80010fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010fe:	f001 faa7 	bl	8002650 <HAL_Delay>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

		  	 	 }
		  	}
		 }
	}
<<<<<<< HEAD
	HAL_Delay(100);
 8001122:	2064      	movs	r0, #100	; 0x64
 8001124:	f001 fade 	bl	80026e4 <HAL_Delay>
		HAL_Delay(100);
 8001128:	e78e      	b.n	8001048 <outputQuestions+0x4>
 800112a:	bf00      	nop
 800112c:	200000f0 	.word	0x200000f0
 8001130:	0800564c 	.word	0x0800564c
 8001134:	40020000 	.word	0x40020000
 8001138:	08005650 	.word	0x08005650

0800113c <nextQuestion>:
=======
	HAL_Delay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f001 faa4 	bl	8002650 <HAL_Delay>
	printUSART2("%s\n", nextQuestion());
 8001108:	e794      	b.n	8001034 <outputQuestions+0x4>
 800110a:	bf00      	nop
 800110c:	08005df4 	.word	0x08005df4
 8001110:	40020000 	.word	0x40020000
 8001114:	08005df8 	.word	0x08005df8

08001118 <nextQuestion>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
	}
}


char* nextQuestion(){
<<<<<<< HEAD
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
	return questions[counter++];
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <nextQuestion+0x20>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	4905      	ldr	r1, [pc, #20]	; (800115c <nextQuestion+0x20>)
 8001148:	600a      	str	r2, [r1, #0]
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <nextQuestion+0x24>)
 800114c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200000f0 	.word	0x200000f0
 8001160:	20000000 	.word	0x20000000

08001164 <yesAnswer>:

void yesAnswer(){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	// turn on red LED
	HAL_GPIO_WritePin(GPIOA,red_Pin,GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <yesAnswer+0x20>)
 8001170:	f002 f96e 	bl	8003450 <HAL_GPIO_WritePin>
	printUSART2("%s", warning);
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <yesAnswer+0x24>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	4804      	ldr	r0, [pc, #16]	; (800118c <yesAnswer+0x28>)
 800117c:	f001 f80e 	bl	800219c <printUSART2>
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40020000 	.word	0x40020000
 8001188:	20000010 	.word	0x20000010
 800118c:	0800566c 	.word	0x0800566c

08001190 <checkYes>:

int checkYes(){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	 state = HAL_GPIO_ReadPin(GPIOA,yes_button_Pin);
 8001194:	2101      	movs	r1, #1
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <checkYes+0x38>)
 8001198:	f002 f942 	bl	8003420 <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <checkYes+0x3c>)
 80011a2:	601a      	str	r2, [r3, #0]
	 HAL_Delay(10);
 80011a4:	200a      	movs	r0, #10
 80011a6:	f001 fa9d 	bl	80026e4 <HAL_Delay>
	 if(state){
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <checkYes+0x3c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d006      	beq.n	80011c0 <checkYes+0x30>
		 // turn on red LED
		 HAL_GPIO_TogglePin(GPIOD,red_Pin);
 80011b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <checkYes+0x40>)
 80011b8:	f002 f963 	bl	8003482 <HAL_GPIO_TogglePin>
		 return 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <checkYes+0x32>
	 }
	 else return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020000 	.word	0x40020000
 80011cc:	200000a4 	.word	0x200000a4
 80011d0:	40020c00 	.word	0x40020c00

080011d4 <checkNo>:

int checkNo(){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	  // check for NO button press
	  state = HAL_GPIO_ReadPin(GPIOD, no_button_Pin);
 80011d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <checkNo+0x30>)
 80011de:	f002 f91f 	bl	8003420 <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <checkNo+0x34>)
 80011e8:	601a      	str	r2, [r3, #0]
	  HAL_Delay(10);
 80011ea:	200a      	movs	r0, #10
 80011ec:	f001 fa7a 	bl	80026e4 <HAL_Delay>
	  if(state){ return 1;}
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <checkNo+0x34>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <checkNo+0x28>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <checkNo+0x2a>
	  else return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40020c00 	.word	0x40020c00
 8001208:	200000a4 	.word	0x200000a4

0800120c <MX_ADC1_Init>:
	  }
}
=======
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	return questions[counter++];
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <nextQuestion+0x20>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	4905      	ldr	r1, [pc, #20]	; (8001138 <nextQuestion+0x20>)
 8001124:	600a      	str	r2, [r1, #0]
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <nextQuestion+0x24>)
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200000f0 	.word	0x200000f0
 800113c:	20000000 	.word	0x20000000

08001140 <yesAnswer>:

void yesAnswer(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	// turn on red LED
	HAL_GPIO_WritePin(GPIOA,red_Pin,GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <yesAnswer+0x20>)
 800114c:	f002 f936 	bl	80033bc <HAL_GPIO_WritePin>
	printUSART2("%s", warning);
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <yesAnswer+0x24>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <yesAnswer+0x28>)
 8001158:	f000 ffd6 	bl	8002108 <printUSART2>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020000 	.word	0x40020000
 8001164:	20000010 	.word	0x20000010
 8001168:	08005e14 	.word	0x08005e14

0800116c <checkYes>:

int checkYes(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	 state = HAL_GPIO_ReadPin(GPIOA,yes_button_Pin);
 8001170:	2101      	movs	r1, #1
 8001172:	480c      	ldr	r0, [pc, #48]	; (80011a4 <checkYes+0x38>)
 8001174:	f002 f90a 	bl	800338c <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <checkYes+0x3c>)
 800117e:	601a      	str	r2, [r3, #0]
	 HAL_Delay(10);
 8001180:	200a      	movs	r0, #10
 8001182:	f001 fa65 	bl	8002650 <HAL_Delay>
	 if(state){
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <checkYes+0x3c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <checkYes+0x30>
		 // turn on red LED
		 HAL_GPIO_TogglePin(GPIOD,red_Pin);
 800118e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <checkYes+0x40>)
 8001194:	f002 f92b 	bl	80033ee <HAL_GPIO_TogglePin>
		 return 1;
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <checkYes+0x32>
	 }
	 else return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40020000 	.word	0x40020000
 80011a8:	200000a4 	.word	0x200000a4
 80011ac:	40020c00 	.word	0x40020c00

080011b0 <checkNo>:

int checkNo(){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	  // check for NO button press
	  state = HAL_GPIO_ReadPin(GPIOD, no_button_Pin);
 80011b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <checkNo+0x30>)
 80011ba:	f002 f8e7 	bl	800338c <HAL_GPIO_ReadPin>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <checkNo+0x34>)
 80011c4:	601a      	str	r2, [r3, #0]
	  HAL_Delay(10);
 80011c6:	200a      	movs	r0, #10
 80011c8:	f001 fa42 	bl	8002650 <HAL_Delay>
	  if(state){ return 1;}
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <checkNo+0x34>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <checkNo+0x28>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <checkNo+0x2a>
	  else return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	200000a4 	.word	0x200000a4

080011e8 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b094      	sub	sp, #80	; 0x50
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 0320 	add.w	r3, r7, #32
 80011f2:	2230      	movs	r2, #48	; 0x30
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fb4c 	bl	8004894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <SystemClock_Config+0xc8>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	4a26      	ldr	r2, [pc, #152]	; (80012b0 <SystemClock_Config+0xc8>)
 8001216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121a:	6413      	str	r3, [r2, #64]	; 0x40
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <SystemClock_Config+0xc8>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <SystemClock_Config+0xcc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a20      	ldr	r2, [pc, #128]	; (80012b4 <SystemClock_Config+0xcc>)
 8001232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <SystemClock_Config+0xcc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001244:	2302      	movs	r3, #2
 8001246:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001248:	2301      	movs	r3, #1
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800124c:	2310      	movs	r3, #16
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001250:	2302      	movs	r3, #2
 8001252:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001254:	2300      	movs	r3, #0
 8001256:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001258:	2308      	movs	r3, #8
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800125c:	2354      	movs	r3, #84	; 0x54
 800125e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001268:	f107 0320 	add.w	r3, r7, #32
 800126c:	4618      	mov	r0, r3
 800126e:	f002 f8fd 	bl	800346c <HAL_RCC_OscConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001278:	f000 f986 	bl	8001588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127c:	230f      	movs	r3, #15
 800127e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001280:	2302      	movs	r3, #2
 8001282:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	2102      	movs	r1, #2
 8001298:	4618      	mov	r0, r3
 800129a:	f002 fb5f 	bl	800395c <HAL_RCC_ClockConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012a4:	f000 f970 	bl	8001588 <Error_Handler>
  }
}
 80012a8:	bf00      	nop
 80012aa:	3750      	adds	r7, #80	; 0x50
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000

080012b8 <MX_ADC1_Init>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec


static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001220:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <MX_ADC1_Init+0x9c>)
 8001222:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001226:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800122a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_ADC1_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_ADC1_Init+0x98>)
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_ADC1_Init+0xa0>)
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_ADC1_Init+0x98>)
 800125a:	2201      	movs	r2, #1
 800125c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001268:	2201      	movs	r2, #1
 800126a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_ADC1_Init+0x98>)
 800126e:	f001 fa5d 	bl	800272c <HAL_ADC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001278:	f000 f92e 	bl	80014d8 <Error_Handler>
=======
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <MX_ADC1_Init+0x98>)
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <MX_ADC1_Init+0x9c>)
 80012ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_ADC1_Init+0x98>)
 80012d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_ADC1_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_ADC1_Init+0x98>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_ADC1_Init+0x98>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_ADC1_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_ADC1_Init+0x98>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_ADC1_Init+0x98>)
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <MX_ADC1_Init+0xa0>)
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_ADC1_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_ADC1_Init+0x98>)
 8001306:	2201      	movs	r2, #1
 8001308:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_ADC1_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_ADC1_Init+0x98>)
 8001314:	2201      	movs	r2, #1
 8001316:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <MX_ADC1_Init+0x98>)
 800131a:	f001 f9bd 	bl	8002698 <HAL_ADC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001324:	f000 f930 	bl	8001588 <Error_Handler>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
<<<<<<< HEAD
 800127c:	2301      	movs	r3, #1
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_ADC1_Init+0x98>)
 800128e:	f001 fbfb 	bl	8002a88 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001298:	f000 f91e 	bl	80014d8 <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200000a8 	.word	0x200000a8
 80012a8:	40012000 	.word	0x40012000
 80012ac:	0f000001 	.word	0x0f000001

080012b0 <getADC>:
=======
 8001328:	2301      	movs	r3, #1
 800132a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800132c:	2301      	movs	r3, #1
 800132e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_ADC1_Init+0x98>)
 800133a:	f001 fb5b 	bl	80029f4 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001344:	f000 f920 	bl	8001588 <Error_Handler>
  }
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200000a8 	.word	0x200000a8
 8001354:	40012000 	.word	0x40012000
 8001358:	0f000001 	.word	0x0f000001

0800135c <getADC>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec


uint16_t getADC(void)
{
<<<<<<< HEAD
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	HAL_ADC_Start (&hadc1);
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <getADC+0x2c>)
 80012b6:	f001 fa7d 	bl	80027b4 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1,10000) != HAL_OK);
 80012ba:	bf00      	nop
 80012bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <getADC+0x2c>)
 80012c2:	f001 fb49 	bl	8002958 <HAL_ADC_PollForConversion>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f7      	bne.n	80012bc <getADC+0xc>
	// HAL_ADC_PollForConversion(&hadc1,10000);

	return HAL_ADC_GetValue(&hadc1);
 80012cc:	4803      	ldr	r0, [pc, #12]	; (80012dc <getADC+0x2c>)
 80012ce:	f001 fbce 	bl	8002a6e <HAL_ADC_GetValue>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29b      	uxth	r3, r3
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200000a8 	.word	0x200000a8

080012e0 <MX_TIM12_Init>:

static void MX_TIM12_Init(void) // for DC
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_TIM12_Init+0x6c>)
 80012f4:	4a16      	ldr	r2, [pc, #88]	; (8001350 <MX_TIM12_Init+0x70>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_TIM12_Init+0x6c>)
 80012fa:	2253      	movs	r2, #83	; 0x53
 80012fc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_TIM12_Init+0x6c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_TIM12_Init+0x6c>)
 8001306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800130a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_TIM12_Init+0x6c>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_TIM12_Init+0x6c>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_TIM12_Init+0x6c>)
 800131a:	f002 f925 	bl	8003568 <HAL_TIM_Base_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8001324:	f000 f8d8 	bl	80014d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_TIM12_Init+0x6c>)
 8001334:	f002 f9d0 	bl	80036d8 <HAL_TIM_ConfigClockSource>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 800133e:	f000 f8cb 	bl	80014d8 <Error_Handler>
  }

}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000180 	.word	0x20000180
 8001350:	40001800 	.word	0x40001800

08001354 <MX_USART2_UART_Init>:
=======
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	HAL_ADC_Start (&hadc1);
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <getADC+0x2c>)
 8001362:	f001 f9dd 	bl	8002720 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1,10000) != HAL_OK);
 8001366:	bf00      	nop
 8001368:	f242 7110 	movw	r1, #10000	; 0x2710
 800136c:	4806      	ldr	r0, [pc, #24]	; (8001388 <getADC+0x2c>)
 800136e:	f001 faa9 	bl	80028c4 <HAL_ADC_PollForConversion>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f7      	bne.n	8001368 <getADC+0xc>
	// HAL_ADC_PollForConversion(&hadc1,10000);

	return HAL_ADC_GetValue(&hadc1);
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <getADC+0x2c>)
 800137a:	f001 fb2e 	bl	80029da <HAL_ADC_GetValue>
 800137e:	4603      	mov	r3, r0
 8001380:	b29b      	uxth	r3, r3
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200000a8 	.word	0x200000a8

0800138c <MX_TIM12_Init>:


static void MX_TIM12_Init(void) // for DC
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_TIM12_Init+0x6c>)
 80013a0:	4a16      	ldr	r2, [pc, #88]	; (80013fc <MX_TIM12_Init+0x70>)
 80013a2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_TIM12_Init+0x6c>)
 80013a6:	2253      	movs	r2, #83	; 0x53
 80013a8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_TIM12_Init+0x6c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_TIM12_Init+0x6c>)
 80013b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_TIM12_Init+0x6c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_TIM12_Init+0x6c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_TIM12_Init+0x6c>)
 80013c6:	f002 fc99 	bl	8003cfc <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80013d0:	f000 f8da 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <MX_TIM12_Init+0x6c>)
 80013e0:	f002 fd44 	bl	8003e6c <HAL_TIM_ConfigClockSource>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80013ea:	f000 f8cd 	bl	8001588 <Error_Handler>
  }

}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000138 	.word	0x20000138
 80013fc:	40001800 	.word	0x40001800

08001400 <MX_USART2_UART_Init>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec


static void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <MX_USART2_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800138c:	f002 fba2 	bl	8003ad4 <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f000 f89f 	bl	80014d8 <Error_Handler>
  }
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000013c 	.word	0x2000013c
 80013a4:	40004400 	.word	0x40004400

080013a8 <MX_GPIO_Init>:
=======
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_USART2_UART_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_USART2_UART_Init+0x4c>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USART2_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USART2_UART_Init+0x4c>)
 8001438:	f002 ff16 	bl	8004268 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001442:	f000 f8a1 	bl	8001588 <Error_Handler>
  }
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000f4 	.word	0x200000f4
 8001450:	40004400 	.word	0x40004400

08001454 <MX_GPIO_Init>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec


static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <MX_GPIO_Init+0x120>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a40      	ldr	r2, [pc, #256]	; (80014c8 <MX_GPIO_Init+0x120>)
 80013c8:	f043 0310 	orr.w	r3, r3, #16
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b3e      	ldr	r3, [pc, #248]	; (80014c8 <MX_GPIO_Init+0x120>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <MX_GPIO_Init+0x120>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a39      	ldr	r2, [pc, #228]	; (80014c8 <MX_GPIO_Init+0x120>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <MX_GPIO_Init+0x120>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MX_GPIO_Init+0x120>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a32      	ldr	r2, [pc, #200]	; (80014c8 <MX_GPIO_Init+0x120>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <MX_GPIO_Init+0x120>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_in1_Pin|DC_in2_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2130      	movs	r1, #48	; 0x30
 8001416:	482d      	ldr	r0, [pc, #180]	; (80014cc <MX_GPIO_Init+0x124>)
 8001418:	f002 f81a 	bl	8003450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_Pin|red_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8001422:	482b      	ldr	r0, [pc, #172]	; (80014d0 <MX_GPIO_Init+0x128>)
 8001424:	f002 f814 	bl	8003450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yes_button_Pin */
  GPIO_InitStruct.Pin = yes_button_Pin;
 8001428:	2301      	movs	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	4619      	mov	r1, r3
 800143a:	4824      	ldr	r0, [pc, #144]	; (80014cc <MX_GPIO_Init+0x124>)
 800143c:	f001 fe54 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_in1_Pin DC_in2_Pin */
  GPIO_InitStruct.Pin = DC_in1_Pin|DC_in2_Pin;
 8001440:	2330      	movs	r3, #48	; 0x30
 8001442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4619      	mov	r1, r3
 8001456:	481d      	ldr	r0, [pc, #116]	; (80014cc <MX_GPIO_Init+0x124>)
 8001458:	f001 fe46 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : no_button_Pin */
    GPIO_InitStruct.Pin = no_button_Pin;
 800145c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001460:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_GPIO_Init+0x12c>)
 8001464:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(no_button_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4619      	mov	r1, r3
 8001470:	4817      	ldr	r0, [pc, #92]	; (80014d0 <MX_GPIO_Init+0x128>)
 8001472:	f001 fe39 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_Pin red_Pin */
  GPIO_InitStruct.Pin = green_Pin|red_Pin;
 8001476:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800147a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	4619      	mov	r1, r3
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <MX_GPIO_Init+0x128>)
 8001490:	f001 fe2a 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_sensor_Pin */
    GPIO_InitStruct.Pin = IR_sensor_Pin;
 8001494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001498:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800149e:	2302      	movs	r3, #2
 80014a0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(IR_sensor_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4619      	mov	r1, r3
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <MX_GPIO_Init+0x124>)
 80014aa:	f001 fe1d 	bl	80030e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2028      	movs	r0, #40	; 0x28
 80014b4:	f001 fde1 	bl	800307a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014b8:	2028      	movs	r0, #40	; 0x28
 80014ba:	f001 fdfa 	bl	80030b2 <HAL_NVIC_EnableIRQ>

}
 80014be:	bf00      	nop
 80014c0:	3720      	adds	r7, #32
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	10110000 	.word	0x10110000

080014d8 <Error_Handler>:
=======
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <MX_GPIO_Init+0x124>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a41      	ldr	r2, [pc, #260]	; (8001578 <MX_GPIO_Init+0x124>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <MX_GPIO_Init+0x124>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <MX_GPIO_Init+0x124>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a3a      	ldr	r2, [pc, #232]	; (8001578 <MX_GPIO_Init+0x124>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <MX_GPIO_Init+0x124>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <MX_GPIO_Init+0x124>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a33      	ldr	r2, [pc, #204]	; (8001578 <MX_GPIO_Init+0x124>)
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <MX_GPIO_Init+0x124>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_in1_Pin|DC_in2_Pin|trigger_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 7198 	mov.w	r1, #304	; 0x130
 80014c4:	482d      	ldr	r0, [pc, #180]	; (800157c <MX_GPIO_Init+0x128>)
 80014c6:	f001 ff79 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_Pin|red_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80014d0:	482b      	ldr	r0, [pc, #172]	; (8001580 <MX_GPIO_Init+0x12c>)
 80014d2:	f001 ff73 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yes_button_Pin echo_Pin */
  GPIO_InitStruct.Pin = yes_button_Pin|echo_Pin;
 80014d6:	f240 2301 	movw	r3, #513	; 0x201
 80014da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	4824      	ldr	r0, [pc, #144]	; (800157c <MX_GPIO_Init+0x128>)
 80014ec:	f001 fdb2 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_in1_Pin DC_in2_Pin trigger_Pin */
  GPIO_InitStruct.Pin = DC_in1_Pin|DC_in2_Pin|trigger_Pin;
 80014f0:	f44f 7398 	mov.w	r3, #304	; 0x130
 80014f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4619      	mov	r1, r3
 8001508:	481c      	ldr	r0, [pc, #112]	; (800157c <MX_GPIO_Init+0x128>)
 800150a:	f001 fda3 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : no_button_Pin */
  GPIO_InitStruct.Pin = no_button_Pin;
 800150e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_GPIO_Init+0x130>)
 8001516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(no_button_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	4817      	ldr	r0, [pc, #92]	; (8001580 <MX_GPIO_Init+0x12c>)
 8001524:	f001 fd96 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_Pin red_Pin */
  GPIO_InitStruct.Pin = green_Pin|red_Pin;
 8001528:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800152c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	4619      	mov	r1, r3
 8001540:	480f      	ldr	r0, [pc, #60]	; (8001580 <MX_GPIO_Init+0x12c>)
 8001542:	f001 fd87 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_sensor_Pin */
  GPIO_InitStruct.Pin = IR_sensor_Pin;
 8001546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001550:	2302      	movs	r3, #2
 8001552:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_sensor_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4619      	mov	r1, r3
 800155a:	4808      	ldr	r0, [pc, #32]	; (800157c <MX_GPIO_Init+0x128>)
 800155c:	f001 fd7a 	bl	8003054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	2028      	movs	r0, #40	; 0x28
 8001566:	f001 fd3e 	bl	8002fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800156a:	2028      	movs	r0, #40	; 0x28
 800156c:	f001 fd57 	bl	800301e <HAL_NVIC_EnableIRQ>

}
 8001570:	bf00      	nop
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020c00 	.word	0x40020c00
 8001584:	10110000 	.word	0x10110000

08001588 <Error_Handler>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec


void Error_Handler(void)
{
<<<<<<< HEAD
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
=======
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
=======
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 80014e0:	e7fe      	b.n	80014e0 <Error_Handler+0x8>

080014e2 <reverse>:
=======
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>

08001592 <reverse>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE END Error_Handler_Debug */
}


void reverse(char* str, int len)
{
<<<<<<< HEAD
 80014e2:	b480      	push	{r7}
 80014e4:	b087      	sub	sp, #28
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80014f6:	e018      	b.n	800152a <reverse+0x48>
        temp = str[i];
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	441a      	add	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	440b      	add	r3, r1
 800150e:	7812      	ldrb	r2, [r2, #0]
 8001510:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]
        i++;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
        j--;
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	3b01      	subs	r3, #1
 8001528:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	429a      	cmp	r2, r3
 8001530:	dbe2      	blt.n	80014f8 <reverse+0x16>
    }
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <intToStr>:
=======
 8001592:	b480      	push	{r7}
 8001594:	b087      	sub	sp, #28
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80015a6:	e018      	b.n	80015da <reverse+0x48>
        temp = str[i];
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	441a      	add	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	440b      	add	r3, r1
 80015be:	7812      	ldrb	r2, [r2, #0]
 80015c0:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]
        i++;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
        j--;
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	429a      	cmp	r2, r3
 80015e0:	dbe2      	blt.n	80015a8 <reverse+0x16>
    }
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	371c      	adds	r7, #28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <intToStr>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
<<<<<<< HEAD
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
    while (x) {
 8001550:	e01d      	b.n	800158e <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <intToStr+0x8c>)
 8001556:	fb83 1302 	smull	r1, r3, r3, r2
 800155a:	1099      	asrs	r1, r3, #2
 800155c:	17d3      	asrs	r3, r2, #31
 800155e:	1ac9      	subs	r1, r1, r3
 8001560:	460b      	mov	r3, r1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	1ad1      	subs	r1, r2, r3
 800156a:	b2ca      	uxtb	r2, r1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	1c59      	adds	r1, r3, #1
 8001570:	6179      	str	r1, [r7, #20]
 8001572:	4619      	mov	r1, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	440b      	add	r3, r1
 8001578:	3230      	adds	r2, #48	; 0x30
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <intToStr+0x8c>)
 8001582:	fb82 1203 	smull	r1, r2, r2, r3
 8001586:	1092      	asrs	r2, r2, #2
 8001588:	17db      	asrs	r3, r3, #31
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	60fb      	str	r3, [r7, #12]
    while (x) {
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1de      	bne.n	8001552 <intToStr+0x12>
=======
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
    int i = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
    while (x) {
 8001600:	e01d      	b.n	800163e <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <intToStr+0x8c>)
 8001606:	fb83 1302 	smull	r1, r3, r3, r2
 800160a:	1099      	asrs	r1, r3, #2
 800160c:	17d3      	asrs	r3, r2, #31
 800160e:	1ac9      	subs	r1, r1, r3
 8001610:	460b      	mov	r3, r1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	1ad1      	subs	r1, r2, r3
 800161a:	b2ca      	uxtb	r2, r1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	1c59      	adds	r1, r3, #1
 8001620:	6179      	str	r1, [r7, #20]
 8001622:	4619      	mov	r1, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	440b      	add	r3, r1
 8001628:	3230      	adds	r2, #48	; 0x30
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4a12      	ldr	r2, [pc, #72]	; (800167c <intToStr+0x8c>)
 8001632:	fb82 1203 	smull	r1, r2, r2, r3
 8001636:	1092      	asrs	r2, r2, #2
 8001638:	17db      	asrs	r3, r3, #31
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	60fb      	str	r3, [r7, #12]
    while (x) {
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1de      	bne.n	8001602 <intToStr+0x12>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
<<<<<<< HEAD
 8001594:	e007      	b.n	80015a6 <intToStr+0x66>
        str[i++] = '0';
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	617a      	str	r2, [r7, #20]
 800159c:	461a      	mov	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4413      	add	r3, r2
 80015a2:	2230      	movs	r2, #48	; 0x30
 80015a4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dbf3      	blt.n	8001596 <intToStr+0x56>

    reverse(str, i);
 80015ae:	6979      	ldr	r1, [r7, #20]
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f7ff ff96 	bl	80014e2 <reverse>
    str[i] = '\0';
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	4413      	add	r3, r2
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
    return i;
 80015c0:	697b      	ldr	r3, [r7, #20]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	66666667 	.word	0x66666667

080015d0 <ftoa>:
=======
 8001644:	e007      	b.n	8001656 <intToStr+0x66>
        str[i++] = '0';
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	617a      	str	r2, [r7, #20]
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	4413      	add	r3, r2
 8001652:	2230      	movs	r2, #48	; 0x30
 8001654:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	dbf3      	blt.n	8001646 <intToStr+0x56>

    reverse(str, i);
 800165e:	6979      	ldr	r1, [r7, #20]
 8001660:	68b8      	ldr	r0, [r7, #8]
 8001662:	f7ff ff96 	bl	8001592 <reverse>
    str[i] = '\0';
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	4413      	add	r3, r2
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
    return i;
 8001670:	697b      	ldr	r3, [r7, #20]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	66666667 	.word	0x66666667

08001680 <ftoa>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
<<<<<<< HEAD
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80015da:	60b8      	str	r0, [r7, #8]
 80015dc:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 80015de:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e6:	ee17 3a90 	vmov	r3, s15
 80015ea:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80015fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fe:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	69f8      	ldr	r0, [r7, #28]
 8001608:	f7ff ff9a 	bl	8001540 <intToStr>
 800160c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d030      	beq.n	8001676 <ftoa+0xa6>
        res[i] = '.'; // add dot
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	4413      	add	r3, r2
 800161a:	222e      	movs	r2, #46	; 0x2e
 800161c:	701a      	strb	r2, [r3, #0]
=======
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	ed87 0a03 	vstr	s0, [r7, #12]
 800168a:	60b8      	str	r0, [r7, #8]
 800168c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800168e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001696:	ee17 3a90 	vmov	r3, s15
 800169a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80016aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ae:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	69f8      	ldr	r0, [r7, #28]
 80016b8:	f7ff ff9a 	bl	80015f0 <intToStr>
 80016bc:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d030      	beq.n	8001726 <ftoa+0xa6>
        res[i] = '.'; // add dot
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4413      	add	r3, r2
 80016ca:	222e      	movs	r2, #46	; 0x2e
 80016cc:	701a      	strb	r2, [r3, #0]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
<<<<<<< HEAD
 800161e:	69b8      	ldr	r0, [r7, #24]
 8001620:	f7fe ff36 	bl	8000490 <__aeabi_f2d>
 8001624:	4604      	mov	r4, r0
 8001626:	460d      	mov	r5, r1
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7fe ff1f 	bl	800046c <__aeabi_i2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	ec43 2b11 	vmov	d1, r2, r3
 8001636:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001680 <ftoa+0xb0>
 800163a:	f002 fda9 	bl	8004190 <pow>
 800163e:	ec53 2b10 	vmov	r2, r3, d0
 8001642:	4620      	mov	r0, r4
 8001644:	4629      	mov	r1, r5
 8001646:	f7fe ff7b 	bl	8000540 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fa25 	bl	8000aa0 <__aeabi_d2f>
 8001656:	4603      	mov	r3, r0
 8001658:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 800165a:	edd7 7a06 	vldr	s15, [r7, #24]
 800165e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	4413      	add	r3, r2
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4619      	mov	r1, r3
 800166e:	ee17 0a90 	vmov	r0, s15
 8001672:	f7ff ff65 	bl	8001540 <intToStr>
    }
}
 8001676:	bf00      	nop
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bdb0      	pop	{r4, r5, r7, pc}
 800167e:	bf00      	nop
 8001680:	00000000 	.word	0x00000000
 8001684:	40240000 	.word	0x40240000

08001688 <getDNumMISC>:
=======
 80016ce:	69b8      	ldr	r0, [r7, #24]
 80016d0:	f7fe fede 	bl	8000490 <__aeabi_f2d>
 80016d4:	4604      	mov	r4, r0
 80016d6:	460d      	mov	r5, r1
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7fe fec7 	bl	800046c <__aeabi_i2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	ec43 2b11 	vmov	d1, r2, r3
 80016e6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001730 <ftoa+0xb0>
 80016ea:	f003 f925 	bl	8004938 <pow>
 80016ee:	ec53 2b10 	vmov	r2, r3, d0
 80016f2:	4620      	mov	r0, r4
 80016f4:	4629      	mov	r1, r5
 80016f6:	f7fe ff23 	bl	8000540 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f7ff f9cd 	bl	8000aa0 <__aeabi_d2f>
 8001706:	4603      	mov	r3, r0
 8001708:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 800170a:	edd7 7a06 	vldr	s15, [r7, #24]
 800170e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	4413      	add	r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4619      	mov	r1, r3
 800171e:	ee17 0a90 	vmov	r0, s15
 8001722:	f7ff ff65 	bl	80015f0 <intToStr>
    }
}
 8001726:	bf00      	nop
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bdb0      	pop	{r4, r5, r7, pc}
 800172e:	bf00      	nop
 8001730:	00000000 	.word	0x00000000
 8001734:	40240000 	.word	0x40240000

08001738 <getDNumMISC>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
#include "misc.h"

void getDNumMISC(uint8_t *dnum, uint32_t num)
{ /// calculate decimal digits from integer number 'num' and store them as ASCII char in dnum array
<<<<<<< HEAD
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
    uint8_t k;
    uint32_t step = 1000000000;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <getDNumMISC+0x70>)
 8001694:	60bb      	str	r3, [r7, #8]

    for (k = 0; k < 10; k++)
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	e023      	b.n	80016e4 <getDNumMISC+0x5c>
    {                     // convert integer value in hex format to decimal format
        dnum[9 - k] = 48; // set char value
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	f1c3 0309 	rsb	r3, r3, #9
 80016a2:	461a      	mov	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	2230      	movs	r2, #48	; 0x30
 80016aa:	701a      	strb	r2, [r3, #0]
        while (num >= step)
 80016ac:	e00d      	b.n	80016ca <getDNumMISC+0x42>
        {
            dnum[9 - k]++;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	f1c3 0309 	rsb	r3, r3, #9
 80016b4:	461a      	mov	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	3201      	adds	r2, #1
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]
            num -= step;
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	603b      	str	r3, [r7, #0]
        while (num >= step)
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d2ed      	bcs.n	80016ae <getDNumMISC+0x26>
        }
        step /= 10;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	4a09      	ldr	r2, [pc, #36]	; (80016fc <getDNumMISC+0x74>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	08db      	lsrs	r3, r3, #3
 80016dc:	60bb      	str	r3, [r7, #8]
    for (k = 0; k < 10; k++)
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	3301      	adds	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	2b09      	cmp	r3, #9
 80016e8:	d9d8      	bls.n	800169c <getDNumMISC+0x14>
    }
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	3b9aca00 	.word	0x3b9aca00
 80016fc:	cccccccd 	.word	0xcccccccd

08001700 <putDNumMISC>:

void putDNumMISC(uint8_t *dnum, uint16_t *m, uint8_t *r_str)
{ /// add unsigned integer number digits into string r_str
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
    uint8_t k = 0, flag = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	75fb      	strb	r3, [r7, #23]
 8001710:	2300      	movs	r3, #0
 8001712:	75bb      	strb	r3, [r7, #22]

    for (k = 0; k < 10; k++)
 8001714:	2300      	movs	r3, #0
 8001716:	75fb      	strb	r3, [r7, #23]
 8001718:	e03a      	b.n	8001790 <putDNumMISC+0x90>
    { // convert integer value in hex format to decimal format
        if (flag == 0)
 800171a:	7dbb      	ldrb	r3, [r7, #22]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d121      	bne.n	8001764 <putDNumMISC+0x64>
        {
            if ((dnum[9 - k] != 48) || (k == 9)) // include the 0x00000000 number
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	f1c3 0309 	rsb	r3, r3, #9
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b30      	cmp	r3, #48	; 0x30
 8001730:	d102      	bne.n	8001738 <putDNumMISC+0x38>
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b09      	cmp	r3, #9
 8001736:	d128      	bne.n	800178a <putDNumMISC+0x8a>
            {
                flag = 1;
 8001738:	2301      	movs	r3, #1
 800173a:	75bb      	strb	r3, [r7, #22]
                r_str[(*m)] = dnum[9 - k];
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	f1c3 0309 	rsb	r3, r3, #9
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	441a      	add	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	440b      	add	r3, r1
 8001752:	7812      	ldrb	r2, [r2, #0]
 8001754:	701a      	strb	r2, [r3, #0]
                (*m)++;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	801a      	strh	r2, [r3, #0]
 8001762:	e012      	b.n	800178a <putDNumMISC+0x8a>
=======
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
    uint8_t k;
    uint32_t step = 1000000000;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <getDNumMISC+0x70>)
 8001744:	60bb      	str	r3, [r7, #8]

    for (k = 0; k < 10; k++)
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e023      	b.n	8001794 <getDNumMISC+0x5c>
    {                     // convert integer value in hex format to decimal format
        dnum[9 - k] = 48; // set char value
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	f1c3 0309 	rsb	r3, r3, #9
 8001752:	461a      	mov	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	2230      	movs	r2, #48	; 0x30
 800175a:	701a      	strb	r2, [r3, #0]
        while (num >= step)
 800175c:	e00d      	b.n	800177a <getDNumMISC+0x42>
        {
            dnum[9 - k]++;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	f1c3 0309 	rsb	r3, r3, #9
 8001764:	461a      	mov	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	3201      	adds	r2, #1
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]
            num -= step;
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	603b      	str	r3, [r7, #0]
        while (num >= step)
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	429a      	cmp	r2, r3
 8001780:	d2ed      	bcs.n	800175e <getDNumMISC+0x26>
        }
        step /= 10;
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	4a09      	ldr	r2, [pc, #36]	; (80017ac <getDNumMISC+0x74>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	08db      	lsrs	r3, r3, #3
 800178c:	60bb      	str	r3, [r7, #8]
    for (k = 0; k < 10; k++)
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	3301      	adds	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b09      	cmp	r3, #9
 8001798:	d9d8      	bls.n	800174c <getDNumMISC+0x14>
    }
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	3b9aca00 	.word	0x3b9aca00
 80017ac:	cccccccd 	.word	0xcccccccd

080017b0 <putDNumMISC>:

void putDNumMISC(uint8_t *dnum, uint16_t *m, uint8_t *r_str)
{ /// add unsigned integer number digits into string r_str
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
    uint8_t k = 0, flag = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	75fb      	strb	r3, [r7, #23]
 80017c0:	2300      	movs	r3, #0
 80017c2:	75bb      	strb	r3, [r7, #22]

    for (k = 0; k < 10; k++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	75fb      	strb	r3, [r7, #23]
 80017c8:	e03a      	b.n	8001840 <putDNumMISC+0x90>
    { // convert integer value in hex format to decimal format
        if (flag == 0)
 80017ca:	7dbb      	ldrb	r3, [r7, #22]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d121      	bne.n	8001814 <putDNumMISC+0x64>
        {
            if ((dnum[9 - k] != 48) || (k == 9)) // include the 0x00000000 number
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	f1c3 0309 	rsb	r3, r3, #9
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b30      	cmp	r3, #48	; 0x30
 80017e0:	d102      	bne.n	80017e8 <putDNumMISC+0x38>
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	2b09      	cmp	r3, #9
 80017e6:	d128      	bne.n	800183a <putDNumMISC+0x8a>
            {
                flag = 1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	75bb      	strb	r3, [r7, #22]
                r_str[(*m)] = dnum[9 - k];
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	f1c3 0309 	rsb	r3, r3, #9
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	441a      	add	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	440b      	add	r3, r1
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	701a      	strb	r2, [r3, #0]
                (*m)++;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	801a      	strh	r2, [r3, #0]
 8001812:	e012      	b.n	800183a <putDNumMISC+0x8a>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
            }
        }
        else
        {
            r_str[(*m)] = dnum[9 - k];
<<<<<<< HEAD
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	f1c3 0309 	rsb	r3, r3, #9
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	441a      	add	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	440b      	add	r3, r1
 800177a:	7812      	ldrb	r2, [r2, #0]
 800177c:	701a      	strb	r2, [r3, #0]
            (*m)++;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	801a      	strh	r2, [r3, #0]
    for (k = 0; k < 10; k++)
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	3301      	adds	r3, #1
 800178e:	75fb      	strb	r3, [r7, #23]
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b09      	cmp	r3, #9
 8001794:	d9c1      	bls.n	800171a <putDNumMISC+0x1a>
        }
    }
     r_str[(*m)] = 0x00;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
}
 80017a4:	bf00      	nop
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <getStr4NumMISC>:

void getStr4NumMISC(uint16_t type, uint32_t  * num, uint8_t * rstr)
{   /// print text and one signed integer or float number
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b090      	sub	sp, #64	; 0x40
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	81fb      	strh	r3, [r7, #14]
=======
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	f1c3 0309 	rsb	r3, r3, #9
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	441a      	add	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	440b      	add	r3, r1
 800182a:	7812      	ldrb	r2, [r2, #0]
 800182c:	701a      	strb	r2, [r3, #0]
            (*m)++;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	801a      	strh	r2, [r3, #0]
    for (k = 0; k < 10; k++)
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	3301      	adds	r3, #1
 800183e:	75fb      	strb	r3, [r7, #23]
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	2b09      	cmp	r3, #9
 8001844:	d9c1      	bls.n	80017ca <putDNumMISC+0x1a>
        }
    }
     r_str[(*m)] = 0x00;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4413      	add	r3, r2
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
}
 8001854:	bf00      	nop
 8001856:	371c      	adds	r7, #28
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <getStr4NumMISC>:

void getStr4NumMISC(uint16_t type, uint32_t  * num, uint8_t * rstr)
{   /// print text and one signed integer or float number
 8001860:	b580      	push	{r7, lr}
 8001862:	b090      	sub	sp, #64	; 0x40
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	81fb      	strh	r3, [r7, #14]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    // the 'num' number is not modified!
    int32_t * p_int32;
    uint8_t dnum[11];
    uint8_t k;
    uint16_t m = 0;
<<<<<<< HEAD
 80017be:	2300      	movs	r3, #0
 80017c0:	827b      	strh	r3, [r7, #18]
    rstr[0] = 0x00;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
    
    switch(type)
 80017c8:	89fb      	ldrh	r3, [r7, #14]
 80017ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017ce:	f000 826f 	beq.w	8001cb0 <getStr4NumMISC+0x500>
 80017d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017d6:	f300 82a4 	bgt.w	8001d22 <getStr4NumMISC+0x572>
 80017da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017de:	f000 822b 	beq.w	8001c38 <getStr4NumMISC+0x488>
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e6:	f300 829c 	bgt.w	8001d22 <getStr4NumMISC+0x572>
 80017ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ee:	f000 81e7 	beq.w	8001bc0 <getStr4NumMISC+0x410>
 80017f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f6:	f300 8294 	bgt.w	8001d22 <getStr4NumMISC+0x572>
 80017fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017fe:	f000 8104 	beq.w	8001a0a <getStr4NumMISC+0x25a>
 8001802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001806:	f300 828c 	bgt.w	8001d22 <getStr4NumMISC+0x572>
 800180a:	2b80      	cmp	r3, #128	; 0x80
 800180c:	f000 828d 	beq.w	8001d2a <getStr4NumMISC+0x57a>
 8001810:	2b80      	cmp	r3, #128	; 0x80
 8001812:	f300 8286 	bgt.w	8001d22 <getStr4NumMISC+0x572>
 8001816:	2b20      	cmp	r3, #32
 8001818:	dc4a      	bgt.n	80018b0 <getStr4NumMISC+0x100>
 800181a:	2b00      	cmp	r3, #0
 800181c:	f340 8281 	ble.w	8001d22 <getStr4NumMISC+0x572>
 8001820:	3b01      	subs	r3, #1
 8001822:	2b1f      	cmp	r3, #31
 8001824:	f200 827d 	bhi.w	8001d22 <getStr4NumMISC+0x572>
 8001828:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <getStr4NumMISC+0x80>)
 800182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182e:	bf00      	nop
 8001830:	080018b9 	.word	0x080018b9
 8001834:	08001911 	.word	0x08001911
 8001838:	08001d23 	.word	0x08001d23
 800183c:	08001969 	.word	0x08001969
 8001840:	08001d23 	.word	0x08001d23
 8001844:	08001d23 	.word	0x08001d23
 8001848:	08001d23 	.word	0x08001d23
 800184c:	080019bd 	.word	0x080019bd
 8001850:	08001d23 	.word	0x08001d23
 8001854:	08001d23 	.word	0x08001d23
 8001858:	08001d23 	.word	0x08001d23
 800185c:	08001d23 	.word	0x08001d23
 8001860:	08001d23 	.word	0x08001d23
 8001864:	08001d23 	.word	0x08001d23
 8001868:	08001d23 	.word	0x08001d23
 800186c:	080019bd 	.word	0x080019bd
 8001870:	08001d23 	.word	0x08001d23
 8001874:	08001d23 	.word	0x08001d23
 8001878:	08001d23 	.word	0x08001d23
 800187c:	08001d23 	.word	0x08001d23
 8001880:	08001d23 	.word	0x08001d23
 8001884:	08001d23 	.word	0x08001d23
 8001888:	08001d23 	.word	0x08001d23
 800188c:	08001d23 	.word	0x08001d23
 8001890:	08001d23 	.word	0x08001d23
 8001894:	08001d23 	.word	0x08001d23
 8001898:	08001d23 	.word	0x08001d23
 800189c:	08001d23 	.word	0x08001d23
 80018a0:	08001d23 	.word	0x08001d23
 80018a4:	08001d23 	.word	0x08001d23
 80018a8:	08001d23 	.word	0x08001d23
 80018ac:	080019bd 	.word	0x080019bd
 80018b0:	2b40      	cmp	r3, #64	; 0x40
 80018b2:	f000 823c 	beq.w	8001d2e <getStr4NumMISC+0x57e>
 80018b6:	e234      	b.n	8001d22 <getStr4NumMISC+0x572>
=======
 800186e:	2300      	movs	r3, #0
 8001870:	827b      	strh	r3, [r7, #18]
    rstr[0] = 0x00;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
    
    switch(type)
 8001878:	89fb      	ldrh	r3, [r7, #14]
 800187a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800187e:	f000 826f 	beq.w	8001d60 <getStr4NumMISC+0x500>
 8001882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001886:	f300 82a4 	bgt.w	8001dd2 <getStr4NumMISC+0x572>
 800188a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188e:	f000 822b 	beq.w	8001ce8 <getStr4NumMISC+0x488>
 8001892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001896:	f300 829c 	bgt.w	8001dd2 <getStr4NumMISC+0x572>
 800189a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800189e:	f000 81e7 	beq.w	8001c70 <getStr4NumMISC+0x410>
 80018a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a6:	f300 8294 	bgt.w	8001dd2 <getStr4NumMISC+0x572>
 80018aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ae:	f000 8104 	beq.w	8001aba <getStr4NumMISC+0x25a>
 80018b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018b6:	f300 828c 	bgt.w	8001dd2 <getStr4NumMISC+0x572>
 80018ba:	2b80      	cmp	r3, #128	; 0x80
 80018bc:	f000 828d 	beq.w	8001dda <getStr4NumMISC+0x57a>
 80018c0:	2b80      	cmp	r3, #128	; 0x80
 80018c2:	f300 8286 	bgt.w	8001dd2 <getStr4NumMISC+0x572>
 80018c6:	2b20      	cmp	r3, #32
 80018c8:	dc4a      	bgt.n	8001960 <getStr4NumMISC+0x100>
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f340 8281 	ble.w	8001dd2 <getStr4NumMISC+0x572>
 80018d0:	3b01      	subs	r3, #1
 80018d2:	2b1f      	cmp	r3, #31
 80018d4:	f200 827d 	bhi.w	8001dd2 <getStr4NumMISC+0x572>
 80018d8:	a201      	add	r2, pc, #4	; (adr r2, 80018e0 <getStr4NumMISC+0x80>)
 80018da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018de:	bf00      	nop
 80018e0:	08001969 	.word	0x08001969
 80018e4:	080019c1 	.word	0x080019c1
 80018e8:	08001dd3 	.word	0x08001dd3
 80018ec:	08001a19 	.word	0x08001a19
 80018f0:	08001dd3 	.word	0x08001dd3
 80018f4:	08001dd3 	.word	0x08001dd3
 80018f8:	08001dd3 	.word	0x08001dd3
 80018fc:	08001a6d 	.word	0x08001a6d
 8001900:	08001dd3 	.word	0x08001dd3
 8001904:	08001dd3 	.word	0x08001dd3
 8001908:	08001dd3 	.word	0x08001dd3
 800190c:	08001dd3 	.word	0x08001dd3
 8001910:	08001dd3 	.word	0x08001dd3
 8001914:	08001dd3 	.word	0x08001dd3
 8001918:	08001dd3 	.word	0x08001dd3
 800191c:	08001a6d 	.word	0x08001a6d
 8001920:	08001dd3 	.word	0x08001dd3
 8001924:	08001dd3 	.word	0x08001dd3
 8001928:	08001dd3 	.word	0x08001dd3
 800192c:	08001dd3 	.word	0x08001dd3
 8001930:	08001dd3 	.word	0x08001dd3
 8001934:	08001dd3 	.word	0x08001dd3
 8001938:	08001dd3 	.word	0x08001dd3
 800193c:	08001dd3 	.word	0x08001dd3
 8001940:	08001dd3 	.word	0x08001dd3
 8001944:	08001dd3 	.word	0x08001dd3
 8001948:	08001dd3 	.word	0x08001dd3
 800194c:	08001dd3 	.word	0x08001dd3
 8001950:	08001dd3 	.word	0x08001dd3
 8001954:	08001dd3 	.word	0x08001dd3
 8001958:	08001dd3 	.word	0x08001dd3
 800195c:	08001a6d 	.word	0x08001a6d
 8001960:	2b40      	cmp	r3, #64	; 0x40
 8001962:	f000 823c 	beq.w	8001dde <getStr4NumMISC+0x57e>
 8001966:	e234      	b.n	8001dd2 <getStr4NumMISC+0x572>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    {
		case(PRINT_ARG_TYPE_BINARY_BYTE):
		{// 8 bit binary representation
			for(k=0;k<8;k++)
<<<<<<< HEAD
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80018be:	e01c      	b.n	80018fa <getStr4NumMISC+0x14a>
			{
				if((*num) & 0x00000080)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <getStr4NumMISC+0x12a>
				{
					rstr[k] = '1';
 80018cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	2231      	movs	r2, #49	; 0x31
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	e005      	b.n	80018e6 <getStr4NumMISC+0x136>
=======
 8001968:	2300      	movs	r3, #0
 800196a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800196e:	e01c      	b.n	80019aa <getStr4NumMISC+0x14a>
			{
				if((*num) & 0x00000080)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <getStr4NumMISC+0x12a>
				{
					rstr[k] = '1';
 800197c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	2231      	movs	r2, #49	; 0x31
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	e005      	b.n	8001996 <getStr4NumMISC+0x136>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
				}
				else
				{
					rstr[k] = '0';
<<<<<<< HEAD
 80018da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	2230      	movs	r2, #48	; 0x30
 80018e4:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	005a      	lsls	r2, r3, #1
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	601a      	str	r2, [r3, #0]
			for(k=0;k<8;k++)
 80018f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018f4:	3301      	adds	r3, #1
 80018f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80018fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018fe:	2b07      	cmp	r3, #7
 8001900:	d9de      	bls.n	80018c0 <getStr4NumMISC+0x110>
			}
			rstr[k] = 0x00;
 8001902:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
			break;
 800190e:	e20f      	b.n	8001d30 <getStr4NumMISC+0x580>
=======
 800198a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	2230      	movs	r2, #48	; 0x30
 8001994:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	005a      	lsls	r2, r3, #1
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	601a      	str	r2, [r3, #0]
			for(k=0;k<8;k++)
 80019a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019a4:	3301      	adds	r3, #1
 80019a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80019aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ae:	2b07      	cmp	r3, #7
 80019b0:	d9de      	bls.n	8001970 <getStr4NumMISC+0x110>
			}
			rstr[k] = 0x00;
 80019b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
			break;
 80019be:	e20f      	b.n	8001de0 <getStr4NumMISC+0x580>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
		}
		case(PRINT_ARG_TYPE_BINARY_HALFWORD):
		{// 16 bit binary representation
			for(k=0;k<16;k++)
<<<<<<< HEAD
 8001910:	2300      	movs	r3, #0
 8001912:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001916:	e01c      	b.n	8001952 <getStr4NumMISC+0x1a2>
			{
				if((*num) & 0x00008000)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <getStr4NumMISC+0x182>
				{
					rstr[k] = '1';
 8001924:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	2231      	movs	r2, #49	; 0x31
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	e005      	b.n	800193e <getStr4NumMISC+0x18e>
=======
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80019c6:	e01c      	b.n	8001a02 <getStr4NumMISC+0x1a2>
			{
				if((*num) & 0x00008000)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <getStr4NumMISC+0x182>
				{
					rstr[k] = '1';
 80019d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	2231      	movs	r2, #49	; 0x31
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e005      	b.n	80019ee <getStr4NumMISC+0x18e>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
				}
				else
				{
					rstr[k] = '0';
<<<<<<< HEAD
 8001932:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	2230      	movs	r2, #48	; 0x30
 800193c:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	005a      	lsls	r2, r3, #1
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	601a      	str	r2, [r3, #0]
			for(k=0;k<16;k++)
 8001948:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800194c:	3301      	adds	r3, #1
 800194e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001952:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001956:	2b0f      	cmp	r3, #15
 8001958:	d9de      	bls.n	8001918 <getStr4NumMISC+0x168>
			}
			rstr[k] = 0x00;
 800195a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
			break;
 8001966:	e1e3      	b.n	8001d30 <getStr4NumMISC+0x580>
=======
 80019e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	2230      	movs	r2, #48	; 0x30
 80019ec:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	005a      	lsls	r2, r3, #1
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	601a      	str	r2, [r3, #0]
			for(k=0;k<16;k++)
 80019f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019fc:	3301      	adds	r3, #1
 80019fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a06:	2b0f      	cmp	r3, #15
 8001a08:	d9de      	bls.n	80019c8 <getStr4NumMISC+0x168>
			}
			rstr[k] = 0x00;
 8001a0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
			break;
 8001a16:	e1e3      	b.n	8001de0 <getStr4NumMISC+0x580>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
		}
		case(PRINT_ARG_TYPE_BINARY_WORD):
		{// 32 bit binary representation
			for(k=0;k<32;k++)
<<<<<<< HEAD
 8001968:	2300      	movs	r3, #0
 800196a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800196e:	e01a      	b.n	80019a6 <getStr4NumMISC+0x1f6>
			{
				if((*num) & 0x80000000)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	da06      	bge.n	8001986 <getStr4NumMISC+0x1d6>
				{
					rstr[k] = '1';
 8001978:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	2231      	movs	r2, #49	; 0x31
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	e005      	b.n	8001992 <getStr4NumMISC+0x1e2>
=======
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a1e:	e01a      	b.n	8001a56 <getStr4NumMISC+0x1f6>
			{
				if((*num) & 0x80000000)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	da06      	bge.n	8001a36 <getStr4NumMISC+0x1d6>
				{
					rstr[k] = '1';
 8001a28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	2231      	movs	r2, #49	; 0x31
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	e005      	b.n	8001a42 <getStr4NumMISC+0x1e2>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
				}
				else
				{
					rstr[k] = '0';
<<<<<<< HEAD
 8001986:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	2230      	movs	r2, #48	; 0x30
 8001990:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	005a      	lsls	r2, r3, #1
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	601a      	str	r2, [r3, #0]
			for(k=0;k<32;k++)
 800199c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019a0:	3301      	adds	r3, #1
 80019a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80019a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019aa:	2b1f      	cmp	r3, #31
 80019ac:	d9e0      	bls.n	8001970 <getStr4NumMISC+0x1c0>
			}
			rstr[k] = 0x00;
 80019ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
			break;
 80019ba:	e1b9      	b.n	8001d30 <getStr4NumMISC+0x580>
=======
 8001a36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2230      	movs	r2, #48	; 0x30
 8001a40:	701a      	strb	r2, [r3, #0]
				}
				*num = (*num)<<1;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	005a      	lsls	r2, r3, #1
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	601a      	str	r2, [r3, #0]
			for(k=0;k<32;k++)
 8001a4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a50:	3301      	adds	r3, #1
 8001a52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a5a:	2b1f      	cmp	r3, #31
 8001a5c:	d9e0      	bls.n	8001a20 <getStr4NumMISC+0x1c0>
			}
			rstr[k] = 0x00;
 8001a5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
			break;
 8001a6a:	e1b9      	b.n	8001de0 <getStr4NumMISC+0x580>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
		}
		case(PRINT_ARG_TYPE_DECIMAL_BYTE):
		case(PRINT_ARG_TYPE_DECIMAL_HALFWORD):
		case(PRINT_ARG_TYPE_DECIMAL_WORD):
		{// conver integer number into appropriate string
			p_int32 = (int32_t *)num;
<<<<<<< HEAD
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	623b      	str	r3, [r7, #32]
            if (*p_int32 < 0)
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da0e      	bge.n	80019e6 <getStr4NumMISC+0x236>
            { // print the sign character
                rstr[m] = '-';
 80019c8:	8a7b      	ldrh	r3, [r7, #18]
 80019ca:	461a      	mov	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	222d      	movs	r2, #45	; 0x2d
 80019d2:	701a      	strb	r2, [r3, #0]
                m++;
 80019d4:	8a7b      	ldrh	r3, [r7, #18]
 80019d6:	3301      	adds	r3, #1
 80019d8:	b29b      	uxth	r3, r3
 80019da:	827b      	strh	r3, [r7, #18]
                *p_int32 = (*p_int32)*(-1);
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	425a      	negs	r2, r3
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	601a      	str	r2, [r3, #0]
            }

            getDNumMISC(dnum, (uint32_t)(*p_int32));
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fe48 	bl	8001688 <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 80019f8:	f107 0112 	add.w	r1, r7, #18
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fe7c 	bl	8001700 <putDNumMISC>
			break;
 8001a08:	e192      	b.n	8001d30 <getStr4NumMISC+0x580>
=======
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	623b      	str	r3, [r7, #32]
            if (*p_int32 < 0)
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da0e      	bge.n	8001a96 <getStr4NumMISC+0x236>
            { // print the sign character
                rstr[m] = '-';
 8001a78:	8a7b      	ldrh	r3, [r7, #18]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	222d      	movs	r2, #45	; 0x2d
 8001a82:	701a      	strb	r2, [r3, #0]
                m++;
 8001a84:	8a7b      	ldrh	r3, [r7, #18]
 8001a86:	3301      	adds	r3, #1
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	827b      	strh	r3, [r7, #18]
                *p_int32 = (*p_int32)*(-1);
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	425a      	negs	r2, r3
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	601a      	str	r2, [r3, #0]
            }

            getDNumMISC(dnum, (uint32_t)(*p_int32));
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fe48 	bl	8001738 <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001aa8:	f107 0112 	add.w	r1, r7, #18
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fe7c 	bl	80017b0 <putDNumMISC>
			break;
 8001ab8:	e192      	b.n	8001de0 <getStr4NumMISC+0x580>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
			//getDNumMISC(dnum, exp);
            //putDNumMISC(dnum, &m, rstr);
			
			
			float f_step;
			float f_num = *((float *)num); // convert pointer
<<<<<<< HEAD
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t sige = ' ';
 8001a10:	2320      	movs	r3, #32
 8001a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
=======
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t sige = ' ';
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
			uint16_t e_part;
			uint32_t d_part, i_part;
			
            if (f_num < 0)
<<<<<<< HEAD
 8001a16:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d50f      	bpl.n	8001a44 <getStr4NumMISC+0x294>
            { // negative float number
                rstr[m] = '-';
 8001a24:	8a7b      	ldrh	r3, [r7, #18]
 8001a26:	461a      	mov	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	222d      	movs	r2, #45	; 0x2d
 8001a2e:	701a      	strb	r2, [r3, #0]
                m++;
 8001a30:	8a7b      	ldrh	r3, [r7, #18]
 8001a32:	3301      	adds	r3, #1
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	827b      	strh	r3, [r7, #18]
                f_num = (-1) * f_num;
 8001a38:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a3c:	eef1 7a67 	vneg.f32	s15, s15
 8001a40:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            }

            if (f_num < 1)
 8001a44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a54:	d524      	bpl.n	8001aa0 <getStr4NumMISC+0x2f0>
            {
                sige = '-';
 8001a56:	232d      	movs	r3, #45	; 0x2d
 8001a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                f_step = 0.1;
 8001a5c:	4bb8      	ldr	r3, [pc, #736]	; (8001d40 <getStr4NumMISC+0x590>)
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
                e_part = 1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num < f_step)
 8001a64:	e012      	b.n	8001a8c <getStr4NumMISC+0x2dc>
                {
                    f_step = f_step * 0.1;
 8001a66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001a68:	f7fe fd12 	bl	8000490 <__aeabi_f2d>
 8001a6c:	a3b2      	add	r3, pc, #712	; (adr r3, 8001d38 <getStr4NumMISC+0x588>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fd65 	bl	8000540 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f7ff f80f 	bl	8000aa0 <__aeabi_d2f>
 8001a82:	4603      	mov	r3, r0
 8001a84:	63bb      	str	r3, [r7, #56]	; 0x38
                    e_part++;
 8001a86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a88:	3301      	adds	r3, #1
 8001a8a:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num < f_step)
 8001a8c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001a90:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	d4e3      	bmi.n	8001a66 <getStr4NumMISC+0x2b6>
 8001a9e:	e024      	b.n	8001aea <getStr4NumMISC+0x33a>
=======
 8001ac6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001aca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad2:	d50f      	bpl.n	8001af4 <getStr4NumMISC+0x294>
            { // negative float number
                rstr[m] = '-';
 8001ad4:	8a7b      	ldrh	r3, [r7, #18]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	222d      	movs	r2, #45	; 0x2d
 8001ade:	701a      	strb	r2, [r3, #0]
                m++;
 8001ae0:	8a7b      	ldrh	r3, [r7, #18]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	827b      	strh	r3, [r7, #18]
                f_num = (-1) * f_num;
 8001ae8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001aec:	eef1 7a67 	vneg.f32	s15, s15
 8001af0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            }

            if (f_num < 1)
 8001af4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	d524      	bpl.n	8001b50 <getStr4NumMISC+0x2f0>
            {
                sige = '-';
 8001b06:	232d      	movs	r3, #45	; 0x2d
 8001b08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                f_step = 0.1;
 8001b0c:	4bb8      	ldr	r3, [pc, #736]	; (8001df0 <getStr4NumMISC+0x590>)
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
                e_part = 1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num < f_step)
 8001b14:	e012      	b.n	8001b3c <getStr4NumMISC+0x2dc>
                {
                    f_step = f_step * 0.1;
 8001b16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b18:	f7fe fcba 	bl	8000490 <__aeabi_f2d>
 8001b1c:	a3b2      	add	r3, pc, #712	; (adr r3, 8001de8 <getStr4NumMISC+0x588>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd0d 	bl	8000540 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f7fe ffb7 	bl	8000aa0 <__aeabi_d2f>
 8001b32:	4603      	mov	r3, r0
 8001b34:	63bb      	str	r3, [r7, #56]	; 0x38
                    e_part++;
 8001b36:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b38:	3301      	adds	r3, #1
 8001b3a:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num < f_step)
 8001b3c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	d4e3      	bmi.n	8001b16 <getStr4NumMISC+0x2b6>
 8001b4e:	e024      	b.n	8001b9a <getStr4NumMISC+0x33a>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
                }
            }
            else
            {
                f_step = 1.0;
<<<<<<< HEAD
 8001aa0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
                e_part = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num > f_step)
 8001aaa:	e00a      	b.n	8001ac2 <getStr4NumMISC+0x312>
                {
                    f_step = f_step * 10;
 8001aac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ab0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    e_part++;
 8001abc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001abe:	3301      	adds	r3, #1
 8001ac0:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num > f_step)
 8001ac2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001ac6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad2:	dceb      	bgt.n	8001aac <getStr4NumMISC+0x2fc>
                }
                f_step = f_step / 10;
 8001ad4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ad8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                e_part--;
 8001ae4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	863b      	strh	r3, [r7, #48]	; 0x30
            }

            f_num = f_num / f_step;
 8001aea:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001aee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            i_part = (uint32_t)f_num;
 8001afa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b02:	ee17 3a90 	vmov	r3, s15
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28

            f_num = f_num - (float)i_part;
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b12:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            d_part = (uint32_t)(1000 * f_num);
 8001b1e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b22:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001d44 <getStr4NumMISC+0x594>
 8001b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b2e:	ee17 3a90 	vmov	r3, s15
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24

            getDNumMISC(dnum, i_part);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fda4 	bl	8001688 <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001b40:	f107 0112 	add.w	r1, r7, #18
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fdd8 	bl	8001700 <putDNumMISC>

            getDNumMISC(dnum, d_part);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fd96 	bl	8001688 <getDNumMISC>
            dnum[3] = '.';
 8001b5c:	232e      	movs	r3, #46	; 0x2e
 8001b5e:	75fb      	strb	r3, [r7, #23]
            putDNumMISC(dnum, &m, rstr);
 8001b60:	f107 0112 	add.w	r1, r7, #18
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fdc8 	bl	8001700 <putDNumMISC>

            rstr[m] = 'e';
 8001b70:	8a7b      	ldrh	r3, [r7, #18]
 8001b72:	461a      	mov	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	2265      	movs	r2, #101	; 0x65
 8001b7a:	701a      	strb	r2, [r3, #0]
            m++;
 8001b7c:	8a7b      	ldrh	r3, [r7, #18]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	827b      	strh	r3, [r7, #18]

            if (sige == '-')
 8001b84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b88:	2b2d      	cmp	r3, #45	; 0x2d
 8001b8a:	d109      	bne.n	8001ba0 <getStr4NumMISC+0x3f0>
            {
                rstr[m] = '-';
 8001b8c:	8a7b      	ldrh	r3, [r7, #18]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	222d      	movs	r2, #45	; 0x2d
 8001b96:	701a      	strb	r2, [r3, #0]
                m++;
 8001b98:	8a7b      	ldrh	r3, [r7, #18]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	827b      	strh	r3, [r7, #18]
            }

            getDNumMISC(dnum, e_part);
 8001ba0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fd6d 	bl	8001688 <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001bae:	f107 0112 	add.w	r1, r7, #18
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fda1 	bl	8001700 <putDNumMISC>
				
			break;
 8001bbe:	e0b7      	b.n	8001d30 <getStr4NumMISC+0x580>
=======
 8001b50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b54:	63bb      	str	r3, [r7, #56]	; 0x38
                e_part = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num > f_step)
 8001b5a:	e00a      	b.n	8001b72 <getStr4NumMISC+0x312>
                {
                    f_step = f_step * 10;
 8001b5c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    e_part++;
 8001b6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b6e:	3301      	adds	r3, #1
 8001b70:	863b      	strh	r3, [r7, #48]	; 0x30
                while (f_num > f_step)
 8001b72:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b76:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b82:	dceb      	bgt.n	8001b5c <getStr4NumMISC+0x2fc>
                }
                f_step = f_step / 10;
 8001b84:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001b88:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b90:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                e_part--;
 8001b94:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b96:	3b01      	subs	r3, #1
 8001b98:	863b      	strh	r3, [r7, #48]	; 0x30
            }

            f_num = f_num / f_step;
 8001b9a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001b9e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            i_part = (uint32_t)f_num;
 8001baa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb2:	ee17 3a90 	vmov	r3, s15
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28

            f_num = f_num - (float)i_part;
 8001bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bca:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            d_part = (uint32_t)(1000 * f_num);
 8001bce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bd2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001df4 <getStr4NumMISC+0x594>
 8001bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bde:	ee17 3a90 	vmov	r3, s15
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24

            getDNumMISC(dnum, i_part);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fda4 	bl	8001738 <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001bf0:	f107 0112 	add.w	r1, r7, #18
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fdd8 	bl	80017b0 <putDNumMISC>

            getDNumMISC(dnum, d_part);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fd96 	bl	8001738 <getDNumMISC>
            dnum[3] = '.';
 8001c0c:	232e      	movs	r3, #46	; 0x2e
 8001c0e:	75fb      	strb	r3, [r7, #23]
            putDNumMISC(dnum, &m, rstr);
 8001c10:	f107 0112 	add.w	r1, r7, #18
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fdc8 	bl	80017b0 <putDNumMISC>

            rstr[m] = 'e';
 8001c20:	8a7b      	ldrh	r3, [r7, #18]
 8001c22:	461a      	mov	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	2265      	movs	r2, #101	; 0x65
 8001c2a:	701a      	strb	r2, [r3, #0]
            m++;
 8001c2c:	8a7b      	ldrh	r3, [r7, #18]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	827b      	strh	r3, [r7, #18]

            if (sige == '-')
 8001c34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c38:	2b2d      	cmp	r3, #45	; 0x2d
 8001c3a:	d109      	bne.n	8001c50 <getStr4NumMISC+0x3f0>
            {
                rstr[m] = '-';
 8001c3c:	8a7b      	ldrh	r3, [r7, #18]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	222d      	movs	r2, #45	; 0x2d
 8001c46:	701a      	strb	r2, [r3, #0]
                m++;
 8001c48:	8a7b      	ldrh	r3, [r7, #18]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	827b      	strh	r3, [r7, #18]
            }

            getDNumMISC(dnum, e_part);
 8001c50:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fd6d 	bl	8001738 <getDNumMISC>
            putDNumMISC(dnum, &m, rstr);
 8001c5e:	f107 0112 	add.w	r1, r7, #18
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fda1 	bl	80017b0 <putDNumMISC>
				
			break;
 8001c6e:	e0b7      	b.n	8001de0 <getStr4NumMISC+0x580>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
		}
		case(PRINT_ARG_TYPE_HEXADECIMAL_BYTE):
		{// 8 bit hex string representation
			uint8_t t_rez;
            for (k=0;k<2;k++)
<<<<<<< HEAD
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001bc6:	e02c      	b.n	8001c22 <getStr4NumMISC+0x472>
            {
                t_rez = ((*num) & 0x000000F0) >> 4;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                if (t_rez < 0x0A)
 8001bd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bdc:	2b09      	cmp	r3, #9
 8001bde:	d809      	bhi.n	8001bf4 <getStr4NumMISC+0x444>
                {
                    rstr[m] = t_rez + 0x30;
 8001be0:	8a7b      	ldrh	r3, [r7, #18]
 8001be2:	461a      	mov	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001bec:	3230      	adds	r2, #48	; 0x30
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e008      	b.n	8001c06 <getStr4NumMISC+0x456>
=======
 8001c70:	2300      	movs	r3, #0
 8001c72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c76:	e02c      	b.n	8001cd2 <getStr4NumMISC+0x472>
            {
                t_rez = ((*num) & 0x000000F0) >> 4;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                if (t_rez < 0x0A)
 8001c88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	d809      	bhi.n	8001ca4 <getStr4NumMISC+0x444>
                {
                    rstr[m] = t_rez + 0x30;
 8001c90:	8a7b      	ldrh	r3, [r7, #18]
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c9c:	3230      	adds	r2, #48	; 0x30
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	e008      	b.n	8001cb6 <getStr4NumMISC+0x456>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
                }
                else
                {
                    rstr[m] = t_rez + 0x41 - 0x0A;
<<<<<<< HEAD
 8001bf4:	8a7b      	ldrh	r3, [r7, #18]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c00:	3237      	adds	r2, #55	; 0x37
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	011a      	lsls	r2, r3, #4
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	601a      	str	r2, [r3, #0]
                m++;
 8001c10:	8a7b      	ldrh	r3, [r7, #18]
 8001c12:	3301      	adds	r3, #1
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	827b      	strh	r3, [r7, #18]
            for (k=0;k<2;k++)
 8001c18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d9ce      	bls.n	8001bc8 <getStr4NumMISC+0x418>
            }
            rstr[m] = 0x00;
 8001c2a:	8a7b      	ldrh	r3, [r7, #18]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
			break;
 8001c36:	e07b      	b.n	8001d30 <getStr4NumMISC+0x580>
=======
 8001ca4:	8a7b      	ldrh	r3, [r7, #18]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001cb0:	3237      	adds	r2, #55	; 0x37
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	011a      	lsls	r2, r3, #4
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	601a      	str	r2, [r3, #0]
                m++;
 8001cc0:	8a7b      	ldrh	r3, [r7, #18]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	827b      	strh	r3, [r7, #18]
            for (k=0;k<2;k++)
 8001cc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001cd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d9ce      	bls.n	8001c78 <getStr4NumMISC+0x418>
            }
            rstr[m] = 0x00;
 8001cda:	8a7b      	ldrh	r3, [r7, #18]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
			break;
 8001ce6:	e07b      	b.n	8001de0 <getStr4NumMISC+0x580>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
		}
		case(PRINT_ARG_TYPE_HEXADECIMAL_HALFWORD):
		{// 16 bit hex string representation
			uint8_t t_rez;
            for (k=0;k<4;k++)
<<<<<<< HEAD
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c3e:	e02c      	b.n	8001c9a <getStr4NumMISC+0x4ea>
            {
                t_rez = ((*num) & 0x0000F000) >> 12;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0b1b      	lsrs	r3, r3, #12
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                if (t_rez < 0x0A)
 8001c50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c54:	2b09      	cmp	r3, #9
 8001c56:	d809      	bhi.n	8001c6c <getStr4NumMISC+0x4bc>
                {
                    rstr[m] = t_rez + 0x30;
 8001c58:	8a7b      	ldrh	r3, [r7, #18]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001c64:	3230      	adds	r2, #48	; 0x30
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e008      	b.n	8001c7e <getStr4NumMISC+0x4ce>
=======
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001cee:	e02c      	b.n	8001d4a <getStr4NumMISC+0x4ea>
            {
                t_rez = ((*num) & 0x0000F000) >> 12;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0b1b      	lsrs	r3, r3, #12
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                if (t_rez < 0x0A)
 8001d00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	d809      	bhi.n	8001d1c <getStr4NumMISC+0x4bc>
                {
                    rstr[m] = t_rez + 0x30;
 8001d08:	8a7b      	ldrh	r3, [r7, #18]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001d14:	3230      	adds	r2, #48	; 0x30
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	e008      	b.n	8001d2e <getStr4NumMISC+0x4ce>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
                }
                else
                {
                    rstr[m] = t_rez + 0x41 - 0x0A;
<<<<<<< HEAD
 8001c6c:	8a7b      	ldrh	r3, [r7, #18]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001c78:	3237      	adds	r2, #55	; 0x37
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	011a      	lsls	r2, r3, #4
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	601a      	str	r2, [r3, #0]
                m++;
 8001c88:	8a7b      	ldrh	r3, [r7, #18]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	827b      	strh	r3, [r7, #18]
            for (k=0;k<4;k++)
 8001c90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c94:	3301      	adds	r3, #1
 8001c96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d9ce      	bls.n	8001c40 <getStr4NumMISC+0x490>
            }
            rstr[m] = 0x00;
 8001ca2:	8a7b      	ldrh	r3, [r7, #18]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
			break;
 8001cae:	e03f      	b.n	8001d30 <getStr4NumMISC+0x580>
=======
 8001d1c:	8a7b      	ldrh	r3, [r7, #18]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001d28:	3237      	adds	r2, #55	; 0x37
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	011a      	lsls	r2, r3, #4
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	601a      	str	r2, [r3, #0]
                m++;
 8001d38:	8a7b      	ldrh	r3, [r7, #18]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	827b      	strh	r3, [r7, #18]
            for (k=0;k<4;k++)
 8001d40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d44:	3301      	adds	r3, #1
 8001d46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d9ce      	bls.n	8001cf0 <getStr4NumMISC+0x490>
            }
            rstr[m] = 0x00;
 8001d52:	8a7b      	ldrh	r3, [r7, #18]
 8001d54:	461a      	mov	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
			break;
 8001d5e:	e03f      	b.n	8001de0 <getStr4NumMISC+0x580>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
		}
		case(PRINT_ARG_TYPE_HEXADECIMAL_WORD):
		{// 32 bit hex string representation
            uint8_t t_rez;
            for (k=0;k<8;k++)
<<<<<<< HEAD
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001cb6:	e029      	b.n	8001d0c <getStr4NumMISC+0x55c>
            {
                t_rez = ((*num) & 0xF0000000) >> 28;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0f1b      	lsrs	r3, r3, #28
 8001cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if (t_rez < 0x0A)
 8001cc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cc6:	2b09      	cmp	r3, #9
 8001cc8:	d809      	bhi.n	8001cde <getStr4NumMISC+0x52e>
                {
                    rstr[m] = t_rez + 0x30;
 8001cca:	8a7b      	ldrh	r3, [r7, #18]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001cd6:	3230      	adds	r2, #48	; 0x30
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e008      	b.n	8001cf0 <getStr4NumMISC+0x540>
=======
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d66:	e029      	b.n	8001dbc <getStr4NumMISC+0x55c>
            {
                t_rez = ((*num) & 0xF0000000) >> 28;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0f1b      	lsrs	r3, r3, #28
 8001d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if (t_rez < 0x0A)
 8001d72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	d809      	bhi.n	8001d8e <getStr4NumMISC+0x52e>
                {
                    rstr[m] = t_rez + 0x30;
 8001d7a:	8a7b      	ldrh	r3, [r7, #18]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001d86:	3230      	adds	r2, #48	; 0x30
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	e008      	b.n	8001da0 <getStr4NumMISC+0x540>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
                }
                else
                {
                    rstr[m] = t_rez + 0x41 - 0x0A;
<<<<<<< HEAD
 8001cde:	8a7b      	ldrh	r3, [r7, #18]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001cea:	3237      	adds	r2, #55	; 0x37
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	011a      	lsls	r2, r3, #4
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	601a      	str	r2, [r3, #0]
                m++;
 8001cfa:	8a7b      	ldrh	r3, [r7, #18]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	827b      	strh	r3, [r7, #18]
            for (k=0;k<8;k++)
 8001d02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d06:	3301      	adds	r3, #1
 8001d08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d10:	2b07      	cmp	r3, #7
 8001d12:	d9d1      	bls.n	8001cb8 <getStr4NumMISC+0x508>
            }
            rstr[m] = 0x00;
 8001d14:	8a7b      	ldrh	r3, [r7, #18]
 8001d16:	461a      	mov	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
			break;
 8001d20:	e006      	b.n	8001d30 <getStr4NumMISC+0x580>
=======
 8001d8e:	8a7b      	ldrh	r3, [r7, #18]
 8001d90:	461a      	mov	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001d9a:	3237      	adds	r2, #55	; 0x37
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	701a      	strb	r2, [r3, #0]
                }
                (*num) = (*num) << 4;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	011a      	lsls	r2, r3, #4
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	601a      	str	r2, [r3, #0]
                m++;
 8001daa:	8a7b      	ldrh	r3, [r7, #18]
 8001dac:	3301      	adds	r3, #1
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	827b      	strh	r3, [r7, #18]
            for (k=0;k<8;k++)
 8001db2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001db6:	3301      	adds	r3, #1
 8001db8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001dbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dc0:	2b07      	cmp	r3, #7
 8001dc2:	d9d1      	bls.n	8001d68 <getStr4NumMISC+0x508>
            }
            rstr[m] = 0x00;
 8001dc4:	8a7b      	ldrh	r3, [r7, #18]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
			break;
 8001dd0:	e006      	b.n	8001de0 <getStr4NumMISC+0x580>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
		}
		default:
		{
			rstr[0] = 0x00;
<<<<<<< HEAD
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
			break;
 8001d28:	e002      	b.n	8001d30 <getStr4NumMISC+0x580>
			break;
 8001d2a:	bf00      	nop
 8001d2c:	e000      	b.n	8001d30 <getStr4NumMISC+0x580>
			break;
 8001d2e:	bf00      	nop
		}
	}
}
 8001d30:	bf00      	nop
 8001d32:	3740      	adds	r7, #64	; 0x40
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	9999999a 	.word	0x9999999a
 8001d3c:	3fb99999 	.word	0x3fb99999
 8001d40:	3dcccccd 	.word	0x3dcccccd
 8001d44:	447a0000 	.word	0x447a0000

08001d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
=======
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
			break;
 8001dd8:	e002      	b.n	8001de0 <getStr4NumMISC+0x580>
			break;
 8001dda:	bf00      	nop
 8001ddc:	e000      	b.n	8001de0 <getStr4NumMISC+0x580>
			break;
 8001dde:	bf00      	nop
		}
	}
}
 8001de0:	bf00      	nop
 8001de2:	3740      	adds	r7, #64	; 0x40
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	9999999a 	.word	0x9999999a
 8001dec:	3fb99999 	.word	0x3fb99999
 8001df0:	3dcccccd 	.word	0x3dcccccd
 8001df4:	447a0000 	.word	0x447a0000

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
=======
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
=======
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800

08001d98 <HAL_ADC_MspInit>:
=======
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800

08001e48 <HAL_ADC_MspInit>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_ADC_MspInit+0x7c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d127      	bne.n	8001e0a <HAL_ADC_MspInit+0x72>
=======
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_ADC_MspInit+0x7c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d127      	bne.n	8001eba <HAL_ADC_MspInit+0x72>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <HAL_ADC_MspInit+0x80>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <HAL_ADC_MspInit+0x80>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <HAL_ADC_MspInit+0x80>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_ADC_MspInit+0x80>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <HAL_ADC_MspInit+0x80>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_ADC_MspInit+0x80>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
=======
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <HAL_ADC_MspInit+0x80>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a15      	ldr	r2, [pc, #84]	; (8001ec8 <HAL_ADC_MspInit+0x80>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_ADC_MspInit+0x80>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_ADC_MspInit+0x80>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <HAL_ADC_MspInit+0x80>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_ADC_MspInit+0x80>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = thermistor_Pin;
<<<<<<< HEAD
 8001df2:	2302      	movs	r3, #2
 8001df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df6:	2303      	movs	r3, #3
 8001df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(thermistor_GPIO_Port, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	4805      	ldr	r0, [pc, #20]	; (8001e1c <HAL_ADC_MspInit+0x84>)
 8001e06:	f001 f96f 	bl	80030e8 <HAL_GPIO_Init>
=======
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(thermistor_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <HAL_ADC_MspInit+0x84>)
 8001eb6:	f001 f8cd 	bl	8003054 <HAL_GPIO_Init>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	; 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40012000 	.word	0x40012000
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020000 	.word	0x40020000

08001e20 <HAL_TIM_Base_MspInit>:
=======
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	; 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40012000 	.word	0x40012000
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020000 	.word	0x40020000

08001ed0 <HAL_TIM_Base_MspInit>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <HAL_TIM_Base_MspInit+0x3c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d10d      	bne.n	8001e4e <HAL_TIM_Base_MspInit+0x2e>
=======
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <HAL_TIM_Base_MspInit+0x3c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10d      	bne.n	8001efe <HAL_TIM_Base_MspInit+0x2e>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
<<<<<<< HEAD
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_TIM_Base_MspInit+0x40>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <HAL_TIM_Base_MspInit+0x40>)
 8001e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_TIM_Base_MspInit+0x40>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
=======
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_TIM_Base_MspInit+0x40>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <HAL_TIM_Base_MspInit+0x40>)
 8001eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <HAL_TIM_Base_MspInit+0x40>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40001800 	.word	0x40001800
 8001e60:	40023800 	.word	0x40023800

08001e64 <HAL_UART_MspInit>:
=======
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40001800 	.word	0x40001800
 8001f10:	40023800 	.word	0x40023800

08001f14 <HAL_UART_MspInit>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_UART_MspInit+0x84>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12b      	bne.n	8001ede <HAL_UART_MspInit+0x7a>
=======
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_UART_MspInit+0x84>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12b      	bne.n	8001f8e <HAL_UART_MspInit+0x7a>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< HEAD
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
=======
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
<<<<<<< HEAD
 8001ebe:	230c      	movs	r3, #12
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ece:	2307      	movs	r3, #7
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <HAL_UART_MspInit+0x8c>)
 8001eda:	f001 f905 	bl	80030e8 <HAL_GPIO_Init>
=======
 8001f6e:	230c      	movs	r3, #12
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7e:	2307      	movs	r3, #7
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <HAL_UART_MspInit+0x8c>)
 8001f8a:	f001 f863 	bl	8003054 <HAL_GPIO_Init>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	; 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40004400 	.word	0x40004400
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <NMI_Handler>:
=======
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40004400 	.word	0x40004400
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <NMI_Handler>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HardFault_Handler>:
=======
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <NMI_Handler+0x4>

08001faa <HardFault_Handler>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
=======
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001f06:	e7fe      	b.n	8001f06 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:
=======
 8001fae:	e7fe      	b.n	8001fae <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
=======
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001f0c:	e7fe      	b.n	8001f0c <MemManage_Handler+0x4>

08001f0e <BusFault_Handler>:
=======
 8001fb4:	e7fe      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb6 <BusFault_Handler>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
=======
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001f12:	e7fe      	b.n	8001f12 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:
=======
 8001fba:	e7fe      	b.n	8001fba <BusFault_Handler+0x4>

08001fbc <UsageFault_Handler>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
=======
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001f18:	e7fe      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1a <SVC_Handler>:
=======
 8001fc0:	e7fe      	b.n	8001fc0 <UsageFault_Handler+0x4>

08001fc2 <SVC_Handler>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
=======
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <DebugMon_Handler>:
=======
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <DebugMon_Handler>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
=======
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <PendSV_Handler>:
=======
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <PendSV_Handler>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
=======
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Handler>:
=======
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <SysTick_Handler>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
=======
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8001f48:	f000 fbac 	bl	80026a4 <HAL_IncTick>
=======
 8001ff0:	f000 fb0e 	bl	8002610 <HAL_IncTick>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <EXTI15_10_IRQHandler>:
=======
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <EXTI15_10_IRQHandler>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< HEAD
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
=======
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
<<<<<<< HEAD
 8001f54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f58:	f001 faae 	bl	80034b8 <HAL_GPIO_EXTI_IRQHandler>
=======
 8001ffc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002000:	f001 fa10 	bl	8003424 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< HEAD
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <SystemInit>:
  *         SystemFrequency variable.
=======
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <SystemInit>:
  *         configuration.
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f64:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <SystemInit+0x60>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <SystemInit+0x60>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <SystemInit+0x60>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <SystemInit+0x60>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a11      	ldr	r2, [pc, #68]	; (8001fc0 <SystemInit+0x60>)
 8001f7c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <SystemInit+0x60>)
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <SystemInit+0x64>)
 8001f8a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <SystemInit+0x60>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <SystemInit+0x60>)
 8001f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <SystemInit+0x60>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001f9e:	f000 f815 	bl	8001fcc <SetSysClock>
  // ENABLE FPU!!!!!!!!!!!!!
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <SystemInit+0x68>)
 8001fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <SystemInit+0x68>)
 8001faa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <SystemInit+0x68>)
 8001fb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fb8:	609a      	str	r2, [r3, #8]
#endif
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	24003010 	.word	0x24003010
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001fda:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <SetSysClock+0xe4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a34      	ldr	r2, [pc, #208]	; (80020b0 <SetSysClock+0xe4>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001fe6:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <SetSysClock+0xe4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <SetSysClock+0x36>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d1f1      	bne.n	8001fe6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002002:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <SetSysClock+0xe4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <SetSysClock+0x48>
  {
    HSEStatus = (uint32_t)0x01;
 800200e:	2301      	movs	r3, #1
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	e001      	b.n	8002018 <SetSysClock+0x4c>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002014:	2300      	movs	r3, #0
 8002016:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d142      	bne.n	80020a4 <SetSysClock+0xd8>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800201e:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <SetSysClock+0xe4>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <SetSysClock+0xe4>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800202a:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <SetSysClock+0xe8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <SetSysClock+0xe8>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <SetSysClock+0xe4>)
 8002038:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <SetSysClock+0xe4>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <SetSysClock+0xe4>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <SetSysClock+0xe4>)
 8002044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002048:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800204a:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <SetSysClock+0xe4>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <SetSysClock+0xe4>)
 8002050:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002054:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <SetSysClock+0xe4>)
 8002058:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <SetSysClock+0xec>)
 800205a:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <SetSysClock+0xe4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <SetSysClock+0xe4>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002066:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002068:	bf00      	nop
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <SetSysClock+0xe4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f9      	beq.n	800206a <SetSysClock+0x9e>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <SetSysClock+0xf0>)
 8002078:	f240 6205 	movw	r2, #1541	; 0x605
 800207c:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <SetSysClock+0xe4>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <SetSysClock+0xe4>)
 8002084:	f023 0303 	bic.w	r3, r3, #3
 8002088:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <SetSysClock+0xe4>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <SetSysClock+0xe4>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002096:	bf00      	nop
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <SetSysClock+0xe4>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d1f9      	bne.n	8002098 <SetSysClock+0xcc>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40007000 	.word	0x40007000
 80020b8:	07405408 	.word	0x07405408
 80020bc:	40023c00 	.word	0x40023c00

080020c0 <initUSART2>:
=======
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <SystemInit+0x20>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <SystemInit+0x20>)
 8002014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <initUSART2>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
#include "usart.h"

UART_HandleTypeDef UART_HandleStruct;

void initUSART2(uint32_t baudrate)
{
<<<<<<< HEAD
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b090      	sub	sp, #64	; 0x40
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
=======
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b090      	sub	sp, #64	; 0x40
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
	
	//wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
	//Configure pins
	//
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	4b26      	ldr	r3, [pc, #152]	; (8002168 <initUSART2+0xa8>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	4a25      	ldr	r2, [pc, #148]	; (8002168 <initUSART2+0xa8>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6313      	str	r3, [r2, #48]	; 0x30
 80020d8:	4b23      	ldr	r3, [pc, #140]	; (8002168 <initUSART2+0xa8>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020e4:	2304      	movs	r3, #4
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f0:	2302      	movs	r3, #2
 80020f2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020f4:	2307      	movs	r3, #7
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020fc:	4619      	mov	r1, r3
 80020fe:	481b      	ldr	r0, [pc, #108]	; (800216c <initUSART2+0xac>)
 8002100:	f000 fff2 	bl	80030e8 <HAL_GPIO_Init>
=======
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <initUSART2+0xa8>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <initUSART2+0xa8>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <initUSART2+0xa8>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002050:	2304      	movs	r3, #4
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800205c:	2302      	movs	r3, #2
 800205e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002060:	2307      	movs	r3, #7
 8002062:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002068:	4619      	mov	r1, r3
 800206a:	481b      	ldr	r0, [pc, #108]	; (80020d8 <initUSART2+0xac>)
 800206c:	f000 fff2 	bl	8003054 <HAL_GPIO_Init>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
	

	UART_InitTypeDef UART_InitStruct;
	__HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< HEAD
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <initUSART2+0xa8>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	4a16      	ldr	r2, [pc, #88]	; (8002168 <initUSART2+0xa8>)
 800210e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002112:	6413      	str	r3, [r2, #64]	; 0x40
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <initUSART2+0xa8>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
	UART_InitStruct.BaudRate = baudrate;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	613b      	str	r3, [r7, #16]
	UART_InitStruct.WordLength = UART_WORDLENGTH_8B;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
	UART_InitStruct.StopBits = UART_STOPBITS_1;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
	UART_InitStruct.Parity = UART_PARITY_NONE;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
	UART_InitStruct.Mode = UART_MODE_TX;
 8002130:	2308      	movs	r3, #8
 8002132:	623b      	str	r3, [r7, #32]
	UART_InitStruct.HwFlowCtl = UART_HWCONTROL_NONE;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
	UART_InitStruct.OverSampling = UART_OVERSAMPLING_8;
 8002138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28

	UART_HandleStruct.Instance = USART2;
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <initUSART2+0xb0>)
 8002140:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <initUSART2+0xb4>)
 8002142:	601a      	str	r2, [r3, #0]
	UART_HandleStruct.Init = UART_InitStruct;
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <initUSART2+0xb0>)
 8002146:	1d1c      	adds	r4, r3, #4
 8002148:	f107 0510 	add.w	r5, r7, #16
 800214c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800214e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002150:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Init(&UART_HandleStruct);
 8002158:	4805      	ldr	r0, [pc, #20]	; (8002170 <initUSART2+0xb0>)
 800215a:	f001 fcbb 	bl	8003ad4 <HAL_UART_Init>
	
}
 800215e:	bf00      	nop
 8002160:	3740      	adds	r7, #64	; 0x40
 8002162:	46bd      	mov	sp, r7
 8002164:	bdb0      	pop	{r4, r5, r7, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40020000 	.word	0x40020000
 8002170:	200001c8 	.word	0x200001c8
 8002174:	40004400 	.word	0x40004400

08002178 <putcharUSART2>:

void putcharUSART2(uint8_t data)
{/// print one character to USART2
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&UART_HandleStruct, & data,1,10000);
 8002182:	1df9      	adds	r1, r7, #7
 8002184:	f242 7310 	movw	r3, #10000	; 0x2710
 8002188:	2201      	movs	r2, #1
 800218a:	4803      	ldr	r0, [pc, #12]	; (8002198 <putcharUSART2+0x20>)
 800218c:	f001 fcef 	bl	8003b6e <HAL_UART_Transmit>
=======
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <initUSART2+0xa8>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <initUSART2+0xa8>)
 800207a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207e:	6413      	str	r3, [r2, #64]	; 0x40
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <initUSART2+0xa8>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
	UART_InitStruct.BaudRate = baudrate;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	613b      	str	r3, [r7, #16]
	UART_InitStruct.WordLength = UART_WORDLENGTH_8B;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
	UART_InitStruct.StopBits = UART_STOPBITS_1;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
	UART_InitStruct.Parity = UART_PARITY_NONE;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
	UART_InitStruct.Mode = UART_MODE_TX;
 800209c:	2308      	movs	r3, #8
 800209e:	623b      	str	r3, [r7, #32]
	UART_InitStruct.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
	UART_InitStruct.OverSampling = UART_OVERSAMPLING_8;
 80020a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28

	UART_HandleStruct.Instance = USART2;
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <initUSART2+0xb0>)
 80020ac:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <initUSART2+0xb4>)
 80020ae:	601a      	str	r2, [r3, #0]
	UART_HandleStruct.Init = UART_InitStruct;
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <initUSART2+0xb0>)
 80020b2:	1d1c      	adds	r4, r3, #4
 80020b4:	f107 0510 	add.w	r5, r7, #16
 80020b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Init(&UART_HandleStruct);
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <initUSART2+0xb0>)
 80020c6:	f002 f8cf 	bl	8004268 <HAL_UART_Init>
	
}
 80020ca:	bf00      	nop
 80020cc:	3740      	adds	r7, #64	; 0x40
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bdb0      	pop	{r4, r5, r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020000 	.word	0x40020000
 80020dc:	20000180 	.word	0x20000180
 80020e0:	40004400 	.word	0x40004400

080020e4 <putcharUSART2>:

void putcharUSART2(uint8_t data)
{/// print one character to USART2
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&UART_HandleStruct, & data,1,10000);
 80020ee:	1df9      	adds	r1, r7, #7
 80020f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80020f4:	2201      	movs	r2, #1
 80020f6:	4803      	ldr	r0, [pc, #12]	; (8002104 <putcharUSART2+0x20>)
 80020f8:	f002 f903 	bl	8004302 <HAL_UART_Transmit>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
	// while(!(USART2->SR & USART_SR_TC));									

	// USART2->DR = data;	
}
<<<<<<< HEAD
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200001c8 	.word	0x200001c8

0800219c <printUSART2>:

void printUSART2(char *str, ... )
{ /// print text and up to 10 arguments!
 800219c:	b40f      	push	{r0, r1, r2, r3}
 800219e:	b5b0      	push	{r4, r5, r7, lr}
 80021a0:	b094      	sub	sp, #80	; 0x50
 80021a2:	af00      	add	r7, sp, #0
    uint8_t rstr[40];													// 33 max -> 32 ASCII for 32 bits and NULL 
    uint16_t k = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
=======
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000180 	.word	0x20000180

08002108 <printUSART2>:

void printUSART2(char *str, ... )
{ /// print text and up to 10 arguments!
 8002108:	b40f      	push	{r0, r1, r2, r3}
 800210a:	b5b0      	push	{r4, r5, r7, lr}
 800210c:	b094      	sub	sp, #80	; 0x50
 800210e:	af00      	add	r7, sp, #0
    uint8_t rstr[40];													// 33 max -> 32 ASCII for 32 bits and NULL 
    uint16_t k = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
	uint32_t * p_uint32; 
	char * p_char;
	va_list vl;
	
	//va_start(vl, 10);													// always pass the last named parameter to va_start, for compatibility with older compilers
	va_start(vl, str);													// always pass the last named parameter to va_start, for compatibility with older compilers
<<<<<<< HEAD
 80021aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021ae:	603b      	str	r3, [r7, #0]
	while(str[k] != 0x00)
 80021b0:	e1c2      	b.n	8002538 <printUSART2+0x39c>
	{
		if(str[k] == '%')
 80021b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021b8:	4413      	add	r3, r2
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b25      	cmp	r3, #37	; 0x25
 80021be:	f040 81a4 	bne.w	800250a <printUSART2+0x36e>
		{
			if(str[k+1] != 0x00)
 80021c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021c6:	3301      	adds	r3, #1
 80021c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 81ad 	beq.w	800252e <printUSART2+0x392>
			{
				switch(str[k+1])
 80021d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021d8:	3301      	adds	r3, #1
 80021da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021dc:	4413      	add	r3, r2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	3b62      	subs	r3, #98	; 0x62
 80021e2:	2b16      	cmp	r3, #22
 80021e4:	f200 8170 	bhi.w	80024c8 <printUSART2+0x32c>
 80021e8:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <printUSART2+0x54>)
 80021ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ee:	bf00      	nop
 80021f0:	0800224d 	.word	0x0800224d
 80021f4:	0800236d 	.word	0x0800236d
 80021f8:	080022dd 	.word	0x080022dd
 80021fc:	080024c9 	.word	0x080024c9
 8002200:	080023a3 	.word	0x080023a3
 8002204:	080024c9 	.word	0x080024c9
 8002208:	080024c9 	.word	0x080024c9
 800220c:	080024c9 	.word	0x080024c9
 8002210:	080024c9 	.word	0x080024c9
 8002214:	080024c9 	.word	0x080024c9
 8002218:	080024c9 	.word	0x080024c9
 800221c:	080024c9 	.word	0x080024c9
 8002220:	080024c9 	.word	0x080024c9
 8002224:	080024c9 	.word	0x080024c9
 8002228:	080024c9 	.word	0x080024c9
 800222c:	080024c9 	.word	0x080024c9
 8002230:	080024c9 	.word	0x080024c9
 8002234:	0800238b 	.word	0x0800238b
 8002238:	080024c9 	.word	0x080024c9
 800223c:	080024c9 	.word	0x080024c9
 8002240:	080024c9 	.word	0x080024c9
 8002244:	080024c9 	.word	0x080024c9
 8002248:	08002431 	.word	0x08002431
=======
 8002116:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800211a:	603b      	str	r3, [r7, #0]
	while(str[k] != 0x00)
 800211c:	e1c2      	b.n	80024a4 <printUSART2+0x39c>
	{
		if(str[k] == '%')
 800211e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002122:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002124:	4413      	add	r3, r2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b25      	cmp	r3, #37	; 0x25
 800212a:	f040 81a4 	bne.w	8002476 <printUSART2+0x36e>
		{
			if(str[k+1] != 0x00)
 800212e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002132:	3301      	adds	r3, #1
 8002134:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002136:	4413      	add	r3, r2
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 81ad 	beq.w	800249a <printUSART2+0x392>
			{
				switch(str[k+1])
 8002140:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002144:	3301      	adds	r3, #1
 8002146:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	3b62      	subs	r3, #98	; 0x62
 800214e:	2b16      	cmp	r3, #22
 8002150:	f200 8170 	bhi.w	8002434 <printUSART2+0x32c>
 8002154:	a201      	add	r2, pc, #4	; (adr r2, 800215c <printUSART2+0x54>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	080021b9 	.word	0x080021b9
 8002160:	080022d9 	.word	0x080022d9
 8002164:	08002249 	.word	0x08002249
 8002168:	08002435 	.word	0x08002435
 800216c:	0800230f 	.word	0x0800230f
 8002170:	08002435 	.word	0x08002435
 8002174:	08002435 	.word	0x08002435
 8002178:	08002435 	.word	0x08002435
 800217c:	08002435 	.word	0x08002435
 8002180:	08002435 	.word	0x08002435
 8002184:	08002435 	.word	0x08002435
 8002188:	08002435 	.word	0x08002435
 800218c:	08002435 	.word	0x08002435
 8002190:	08002435 	.word	0x08002435
 8002194:	08002435 	.word	0x08002435
 8002198:	08002435 	.word	0x08002435
 800219c:	08002435 	.word	0x08002435
 80021a0:	080022f7 	.word	0x080022f7
 80021a4:	08002435 	.word	0x08002435
 80021a8:	08002435 	.word	0x08002435
 80021ac:	08002435 	.word	0x08002435
 80021b0:	08002435 	.word	0x08002435
 80021b4:	0800239d 	.word	0x0800239d
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
				{
					case('b'):
					{// binary
						if(str[k+2] == 'b')
<<<<<<< HEAD
 800224c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002250:	3302      	adds	r3, #2
 8002252:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002254:	4413      	add	r3, r2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b62      	cmp	r3, #98	; 0x62
 800225a:	d108      	bne.n	800226e <printUSART2+0xd2>
						{// byte
							utmp32 = va_arg(vl, int);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	1d1a      	adds	r2, r3, #4
 8002260:	603a      	str	r2, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_BYTE);
 8002266:	2301      	movs	r3, #1
 8002268:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800226c:	e02e      	b.n	80022cc <printUSART2+0x130>
						}
						else if(str[k+2] == 'h')
 800226e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002272:	3302      	adds	r3, #2
 8002274:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b68      	cmp	r3, #104	; 0x68
 800227c:	d108      	bne.n	8002290 <printUSART2+0xf4>
						{// half word
							utmp32 = va_arg(vl, int);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	1d1a      	adds	r2, r3, #4
 8002282:	603a      	str	r2, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_HALFWORD);
 8002288:	2302      	movs	r3, #2
 800228a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800228e:	e01d      	b.n	80022cc <printUSART2+0x130>
						}
						else if(str[k+2] == 'w')
 8002290:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002294:	3302      	adds	r3, #2
 8002296:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002298:	4413      	add	r3, r2
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b77      	cmp	r3, #119	; 0x77
 800229e:	d108      	bne.n	80022b2 <printUSART2+0x116>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	1d1a      	adds	r2, r3, #4
 80022a4:	603a      	str	r2, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
 80022aa:	2304      	movs	r3, #4
 80022ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80022b0:	e00c      	b.n	80022cc <printUSART2+0x130>
=======
 80021b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021bc:	3302      	adds	r3, #2
 80021be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021c0:	4413      	add	r3, r2
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b62      	cmp	r3, #98	; 0x62
 80021c6:	d108      	bne.n	80021da <printUSART2+0xd2>
						{// byte
							utmp32 = va_arg(vl, int);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	1d1a      	adds	r2, r3, #4
 80021cc:	603a      	str	r2, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_BYTE);
 80021d2:	2301      	movs	r3, #1
 80021d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80021d8:	e02e      	b.n	8002238 <printUSART2+0x130>
						}
						else if(str[k+2] == 'h')
 80021da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021de:	3302      	adds	r3, #2
 80021e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021e2:	4413      	add	r3, r2
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b68      	cmp	r3, #104	; 0x68
 80021e8:	d108      	bne.n	80021fc <printUSART2+0xf4>
						{// half word
							utmp32 = va_arg(vl, int);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	1d1a      	adds	r2, r3, #4
 80021ee:	603a      	str	r2, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_HALFWORD);
 80021f4:	2302      	movs	r3, #2
 80021f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80021fa:	e01d      	b.n	8002238 <printUSART2+0x130>
						}
						else if(str[k+2] == 'w')
 80021fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002200:	3302      	adds	r3, #2
 8002202:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b77      	cmp	r3, #119	; 0x77
 800220a:	d108      	bne.n	800221e <printUSART2+0x116>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	1d1a      	adds	r2, r3, #4
 8002210:	603a      	str	r2, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
 8002216:	2304      	movs	r3, #4
 8002218:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800221c:	e00c      	b.n	8002238 <printUSART2+0x130>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
						}
						else
						{// default word
							utmp32 = va_arg(vl, uint32_t);
<<<<<<< HEAD
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	1d1a      	adds	r2, r3, #4
 80022b6:	603a      	str	r2, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
 80022bc:	2304      	movs	r3, #4
 80022be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 80022c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;	
 80022cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022d0:	3301      	adds	r3, #1
 80022d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 80022da:	e0fd      	b.n	80024d8 <printUSART2+0x33c>
=======
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	1d1a      	adds	r2, r3, #4
 8002222:	603a      	str	r2, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
 8002228:	2304      	movs	r3, #4
 800222a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 800222e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002232:	3b01      	subs	r3, #1
 8002234:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;	
 8002238:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800223c:	3301      	adds	r3, #1
 800223e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 8002246:	e0fd      	b.n	8002444 <printUSART2+0x33c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
					}
					case('d'):
					{// decimal
						if(str[k+2] == 'b')
<<<<<<< HEAD
 80022dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022e0:	3302      	adds	r3, #2
 80022e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b62      	cmp	r3, #98	; 0x62
 80022ea:	d108      	bne.n	80022fe <printUSART2+0x162>
						{// byte
							utmp32 = va_arg(vl, int);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	1d1a      	adds	r2, r3, #4
 80022f0:	603a      	str	r2, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_BYTE);
 80022f6:	2308      	movs	r3, #8
 80022f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80022fc:	e02e      	b.n	800235c <printUSART2+0x1c0>
						}
						else if(str[k+2] == 'h')
 80022fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002302:	3302      	adds	r3, #2
 8002304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002306:	4413      	add	r3, r2
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b68      	cmp	r3, #104	; 0x68
 800230c:	d108      	bne.n	8002320 <printUSART2+0x184>
						{// half word
							utmp32 = va_arg(vl, int);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	1d1a      	adds	r2, r3, #4
 8002312:	603a      	str	r2, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_HALFWORD);
 8002318:	2310      	movs	r3, #16
 800231a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800231e:	e01d      	b.n	800235c <printUSART2+0x1c0>
						}
						else if(str[k+2] == 'w')
 8002320:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002324:	3302      	adds	r3, #2
 8002326:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002328:	4413      	add	r3, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b77      	cmp	r3, #119	; 0x77
 800232e:	d108      	bne.n	8002342 <printUSART2+0x1a6>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	1d1a      	adds	r2, r3, #4
 8002334:	603a      	str	r2, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_WORD);
 800233a:	2320      	movs	r3, #32
 800233c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002340:	e00c      	b.n	800235c <printUSART2+0x1c0>
=======
 8002248:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800224c:	3302      	adds	r3, #2
 800224e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002250:	4413      	add	r3, r2
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b62      	cmp	r3, #98	; 0x62
 8002256:	d108      	bne.n	800226a <printUSART2+0x162>
						{// byte
							utmp32 = va_arg(vl, int);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	1d1a      	adds	r2, r3, #4
 800225c:	603a      	str	r2, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_BYTE);
 8002262:	2308      	movs	r3, #8
 8002264:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002268:	e02e      	b.n	80022c8 <printUSART2+0x1c0>
						}
						else if(str[k+2] == 'h')
 800226a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800226e:	3302      	adds	r3, #2
 8002270:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b68      	cmp	r3, #104	; 0x68
 8002278:	d108      	bne.n	800228c <printUSART2+0x184>
						{// half word
							utmp32 = va_arg(vl, int);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	1d1a      	adds	r2, r3, #4
 800227e:	603a      	str	r2, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_HALFWORD);
 8002284:	2310      	movs	r3, #16
 8002286:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800228a:	e01d      	b.n	80022c8 <printUSART2+0x1c0>
						}
						else if(str[k+2] == 'w')
 800228c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002290:	3302      	adds	r3, #2
 8002292:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002294:	4413      	add	r3, r2
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b77      	cmp	r3, #119	; 0x77
 800229a:	d108      	bne.n	80022ae <printUSART2+0x1a6>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	1d1a      	adds	r2, r3, #4
 80022a0:	603a      	str	r2, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_WORD);
 80022a6:	2320      	movs	r3, #32
 80022a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80022ac:	e00c      	b.n	80022c8 <printUSART2+0x1c0>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
						}
						else
						{// default word
							utmp32 = va_arg(vl, uint32_t);
<<<<<<< HEAD
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	1d1a      	adds	r2, r3, #4
 8002346:	603a      	str	r2, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_WORD);
 800234c:	2320      	movs	r3, #32
 800234e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 8002352:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002356:	3b01      	subs	r3, #1
 8002358:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;	
 800235c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002360:	3301      	adds	r3, #1
 8002362:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 800236a:	e0b5      	b.n	80024d8 <printUSART2+0x33c>
=======
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	1d1a      	adds	r2, r3, #4
 80022b2:	603a      	str	r2, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_DECIMAL_WORD);
 80022b8:	2320      	movs	r3, #32
 80022ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 80022be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022c2:	3b01      	subs	r3, #1
 80022c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;	
 80022c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022cc:	3301      	adds	r3, #1
 80022ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 80022d6:	e0b5      	b.n	8002444 <printUSART2+0x33c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
					}
					case('c'):
					{// character
						char tchar = va_arg(vl, int);	
<<<<<<< HEAD
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	1d1a      	adds	r2, r3, #4
 8002370:	603a      	str	r2, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
						putcharUSART2(tchar);
 8002378:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fefb 	bl	8002178 <putcharUSART2>
						arg_type = (PRINT_ARG_TYPE_CHARACTER);
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 8002388:	e0a6      	b.n	80024d8 <printUSART2+0x33c>
=======
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	1d1a      	adds	r2, r3, #4
 80022dc:	603a      	str	r2, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
						putcharUSART2(tchar);
 80022e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fefb 	bl	80020e4 <putcharUSART2>
						arg_type = (PRINT_ARG_TYPE_CHARACTER);
 80022ee:	2340      	movs	r3, #64	; 0x40
 80022f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 80022f4:	e0a6      	b.n	8002444 <printUSART2+0x33c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
					}
					case('s'):
					{// string 
						p_char = va_arg(vl, char *);	
<<<<<<< HEAD
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	1d1a      	adds	r2, r3, #4
 800238e:	603a      	str	r2, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	647b      	str	r3, [r7, #68]	; 0x44
						sprintUSART2((uint8_t *)p_char);
 8002394:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002396:	f000 f8df 	bl	8002558 <sprintUSART2>
						arg_type = (PRINT_ARG_TYPE_STRING);
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 80023a0:	e09a      	b.n	80024d8 <printUSART2+0x33c>
=======
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	1d1a      	adds	r2, r3, #4
 80022fa:	603a      	str	r2, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	647b      	str	r3, [r7, #68]	; 0x44
						sprintUSART2((uint8_t *)p_char);
 8002300:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002302:	f000 f8df 	bl	80024c4 <sprintUSART2>
						arg_type = (PRINT_ARG_TYPE_STRING);
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 800230c:	e09a      	b.n	8002444 <printUSART2+0x33c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
					}
					case('f'):
					{// float
						uint64_t utmp64 = va_arg(vl, uint64_t);			// convert double to float representation IEEE 754
<<<<<<< HEAD
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	3307      	adds	r3, #7
 80023a6:	f023 0307 	bic.w	r3, r3, #7
 80023aa:	f103 0208 	add.w	r2, r3, #8
 80023ae:	603a      	str	r2, [r7, #0]
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
						uint32_t tmp1 = utmp64&0x00000000FFFFFFFF;
 80023b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
						tmp1 = tmp1>>29;
 80023bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023be:	0f5b      	lsrs	r3, r3, #29
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
						utmp32 = utmp64>>32;
 80023c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	000a      	movs	r2, r1
 80023d0:	2300      	movs	r3, #0
 80023d2:	4613      	mov	r3, r2
 80023d4:	607b      	str	r3, [r7, #4]
						utmp32 &= 0x07FFFFFF;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80023dc:	607b      	str	r3, [r7, #4]
						utmp32 = utmp32<<3;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	607b      	str	r3, [r7, #4]
						utmp32 |= tmp1;
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e8:	4313      	orrs	r3, r2
 80023ea:	607b      	str	r3, [r7, #4]
						if(utmp64 & 0x8000000000000000)
 80023ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023f0:	2a00      	cmp	r2, #0
 80023f2:	f173 0300 	sbcs.w	r3, r3, #0
 80023f6:	da03      	bge.n	8002400 <printUSART2+0x264>
							utmp32 |= 0x80000000;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023fe:	607b      	str	r3, [r7, #4]
							
						if(utmp64 & 0x4000000000000000)
 8002400:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002404:	f04f 0000 	mov.w	r0, #0
 8002408:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800240c:	ea02 0400 	and.w	r4, r2, r0
 8002410:	ea03 0501 	and.w	r5, r3, r1
 8002414:	ea54 0305 	orrs.w	r3, r4, r5
 8002418:	d003      	beq.n	8002422 <printUSART2+0x286>
							utmp32 |= 0x40000000;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002420:	607b      	str	r3, [r7, #4]
							
						p_uint32 = &utmp32;
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	64bb      	str	r3, [r7, #72]	; 0x48
						
						arg_type = (PRINT_ARG_TYPE_FLOAT);
 8002426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800242a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						//arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
						//arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
						break;
 800242e:	e053      	b.n	80024d8 <printUSART2+0x33c>
=======
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	3307      	adds	r3, #7
 8002312:	f023 0307 	bic.w	r3, r3, #7
 8002316:	f103 0208 	add.w	r2, r3, #8
 800231a:	603a      	str	r2, [r7, #0]
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
						uint32_t tmp1 = utmp64&0x00000000FFFFFFFF;
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
						tmp1 = tmp1>>29;
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	0f5b      	lsrs	r3, r3, #29
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
						utmp32 = utmp64>>32;
 800232e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	000a      	movs	r2, r1
 800233c:	2300      	movs	r3, #0
 800233e:	4613      	mov	r3, r2
 8002340:	607b      	str	r3, [r7, #4]
						utmp32 &= 0x07FFFFFF;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002348:	607b      	str	r3, [r7, #4]
						utmp32 = utmp32<<3;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	607b      	str	r3, [r7, #4]
						utmp32 |= tmp1;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002354:	4313      	orrs	r3, r2
 8002356:	607b      	str	r3, [r7, #4]
						if(utmp64 & 0x8000000000000000)
 8002358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800235c:	2a00      	cmp	r2, #0
 800235e:	f173 0300 	sbcs.w	r3, r3, #0
 8002362:	da03      	bge.n	800236c <printUSART2+0x264>
							utmp32 |= 0x80000000;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800236a:	607b      	str	r3, [r7, #4]
							
						if(utmp64 & 0x4000000000000000)
 800236c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002370:	f04f 0000 	mov.w	r0, #0
 8002374:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002378:	ea02 0400 	and.w	r4, r2, r0
 800237c:	ea03 0501 	and.w	r5, r3, r1
 8002380:	ea54 0305 	orrs.w	r3, r4, r5
 8002384:	d003      	beq.n	800238e <printUSART2+0x286>
							utmp32 |= 0x40000000;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800238c:	607b      	str	r3, [r7, #4]
							
						p_uint32 = &utmp32;
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	64bb      	str	r3, [r7, #72]	; 0x48
						
						arg_type = (PRINT_ARG_TYPE_FLOAT);
 8002392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002396:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						//arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
						//arg_type = (PRINT_ARG_TYPE_BINARY_WORD);
						break;
 800239a:	e053      	b.n	8002444 <printUSART2+0x33c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
					}
					case('x'):
					{// hexadecimal 
						if(str[k+2] == 'b')
<<<<<<< HEAD
 8002430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002434:	3302      	adds	r3, #2
 8002436:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002438:	4413      	add	r3, r2
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b62      	cmp	r3, #98	; 0x62
 800243e:	d109      	bne.n	8002454 <printUSART2+0x2b8>
						{// byte
							utmp32 = (uint32_t)va_arg(vl, int);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	1d1a      	adds	r2, r3, #4
 8002444:	603a      	str	r2, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_BYTE);
 800244a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800244e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002452:	e031      	b.n	80024b8 <printUSART2+0x31c>
						}
						else if(str[k+2] == 'h')
 8002454:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002458:	3302      	adds	r3, #2
 800245a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800245c:	4413      	add	r3, r2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b68      	cmp	r3, #104	; 0x68
 8002462:	d109      	bne.n	8002478 <printUSART2+0x2dc>
						{// half word
							utmp32 = (uint32_t)va_arg(vl, int);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	1d1a      	adds	r2, r3, #4
 8002468:	603a      	str	r2, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_HALFWORD);
 800246e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002472:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002476:	e01f      	b.n	80024b8 <printUSART2+0x31c>
						}
						else if(str[k+2] == 'w')
 8002478:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800247c:	3302      	adds	r3, #2
 800247e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b77      	cmp	r3, #119	; 0x77
 8002486:	d109      	bne.n	800249c <printUSART2+0x300>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	1d1a      	adds	r2, r3, #4
 800248c:	603a      	str	r2, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
 8002492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002496:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800249a:	e00d      	b.n	80024b8 <printUSART2+0x31c>
=======
 800239c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023a0:	3302      	adds	r3, #2
 80023a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023a4:	4413      	add	r3, r2
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b62      	cmp	r3, #98	; 0x62
 80023aa:	d109      	bne.n	80023c0 <printUSART2+0x2b8>
						{// byte
							utmp32 = (uint32_t)va_arg(vl, int);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	1d1a      	adds	r2, r3, #4
 80023b0:	603a      	str	r2, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_BYTE);
 80023b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80023be:	e031      	b.n	8002424 <printUSART2+0x31c>
						}
						else if(str[k+2] == 'h')
 80023c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023c4:	3302      	adds	r3, #2
 80023c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023c8:	4413      	add	r3, r2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b68      	cmp	r3, #104	; 0x68
 80023ce:	d109      	bne.n	80023e4 <printUSART2+0x2dc>
						{// half word
							utmp32 = (uint32_t)va_arg(vl, int);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	1d1a      	adds	r2, r3, #4
 80023d4:	603a      	str	r2, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_HALFWORD);
 80023da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80023e2:	e01f      	b.n	8002424 <printUSART2+0x31c>
						}
						else if(str[k+2] == 'w')
 80023e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e8:	3302      	adds	r3, #2
 80023ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023ec:	4413      	add	r3, r2
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b77      	cmp	r3, #119	; 0x77
 80023f2:	d109      	bne.n	8002408 <printUSART2+0x300>
						{// word	
							utmp32 = va_arg(vl, uint32_t);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	1d1a      	adds	r2, r3, #4
 80023f8:	603a      	str	r2, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
 80023fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002402:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002406:	e00d      	b.n	8002424 <printUSART2+0x31c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
						}
						else
						{
							utmp32 = va_arg(vl, uint32_t);
<<<<<<< HEAD
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	1d1a      	adds	r2, r3, #4
 80024a0:	603a      	str	r2, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
 80024a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 80024ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;
 80024b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024bc:	3301      	adds	r3, #1
 80024be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 80024c6:	e007      	b.n	80024d8 <printUSART2+0x33c>
=======
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	1d1a      	adds	r2, r3, #4
 800240c:	603a      	str	r2, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	607b      	str	r3, [r7, #4]
							arg_type = (PRINT_ARG_TYPE_HEXADECIMAL_WORD);
 8002412:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002416:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							k--;
 800241a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800241e:	3b01      	subs	r3, #1
 8002420:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						}
						
						k++;
 8002424:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002428:	3301      	adds	r3, #1
 800242a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						p_uint32 = &utmp32;
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	64bb      	str	r3, [r7, #72]	; 0x48
						break;
 8002432:	e007      	b.n	8002444 <printUSART2+0x33c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
					}
					default:
					{
						utmp32 = 0;
<<<<<<< HEAD
 80024c8:	2300      	movs	r3, #0
 80024ca:	607b      	str	r3, [r7, #4]
						p_uint32 = &utmp32;
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	64bb      	str	r3, [r7, #72]	; 0x48
						arg_type = (PRINT_ARG_TYPE_UNKNOWN);
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 80024d6:	bf00      	nop
=======
 8002434:	2300      	movs	r3, #0
 8002436:	607b      	str	r3, [r7, #4]
						p_uint32 = &utmp32;
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
						arg_type = (PRINT_ARG_TYPE_UNKNOWN);
 800243c:	2300      	movs	r3, #0
 800243e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						break;
 8002442:	bf00      	nop
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
					}
				}
					
				if(arg_type&(PRINT_ARG_TYPE_MASK_CHAR_STRING))	
<<<<<<< HEAD
 80024d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00c      	beq.n	80024fe <printUSART2+0x362>
				{
					getStr4NumMISC(arg_type, p_uint32, rstr);
 80024e4:	f107 0208 	add.w	r2, r7, #8
 80024e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff f95e 	bl	80017b0 <getStr4NumMISC>
					sprintUSART2(rstr);	
 80024f4:	f107 0308 	add.w	r3, r7, #8
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 f82d 	bl	8002558 <sprintUSART2>
				}
				k++;
 80024fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002502:	3301      	adds	r3, #1
 8002504:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002508:	e011      	b.n	800252e <printUSART2+0x392>
=======
 8002444:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002448:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00c      	beq.n	800246a <printUSART2+0x362>
				{
					getStr4NumMISC(arg_type, p_uint32, rstr);
 8002450:	f107 0208 	add.w	r2, r7, #8
 8002454:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002458:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fa00 	bl	8001860 <getStr4NumMISC>
					sprintUSART2(rstr);	
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	4618      	mov	r0, r3
 8002466:	f000 f82d 	bl	80024c4 <sprintUSART2>
				}
				k++;
 800246a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800246e:	3301      	adds	r3, #1
 8002470:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002474:	e011      	b.n	800249a <printUSART2+0x392>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
			}
		}
		else
		{// not a '%' char -> print the char
			putcharUSART2(str[k]);
<<<<<<< HEAD
 800250a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800250e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002510:	4413      	add	r3, r2
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fe2f 	bl	8002178 <putcharUSART2>
			if (str[k] == '\n')
 800251a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800251e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002520:	4413      	add	r3, r2
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b0a      	cmp	r3, #10
 8002526:	d102      	bne.n	800252e <printUSART2+0x392>
				putcharUSART2('\r');
 8002528:	200d      	movs	r0, #13
 800252a:	f7ff fe25 	bl	8002178 <putcharUSART2>
		}
		k++;
 800252e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002532:	3301      	adds	r3, #1
 8002534:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while(str[k] != 0x00)
 8002538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800253c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	f47f ae35 	bne.w	80021b2 <printUSART2+0x16>
=======
 8002476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800247a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800247c:	4413      	add	r3, r2
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fe2f 	bl	80020e4 <putcharUSART2>
			if (str[k] == '\n')
 8002486:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800248a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800248c:	4413      	add	r3, r2
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b0a      	cmp	r3, #10
 8002492:	d102      	bne.n	800249a <printUSART2+0x392>
				putcharUSART2('\r');
 8002494:	200d      	movs	r0, #13
 8002496:	f7ff fe25 	bl	80020e4 <putcharUSART2>
		}
		k++;
 800249a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800249e:	3301      	adds	r3, #1
 80024a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while(str[k] != 0x00)
 80024a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024aa:	4413      	add	r3, r2
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f47f ae35 	bne.w	800211e <printUSART2+0x16>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
	}
	
	va_end(vl);
	return;
<<<<<<< HEAD
 8002548:	bf00      	nop
}
 800254a:	3750      	adds	r7, #80	; 0x50
 800254c:	46bd      	mov	sp, r7
 800254e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002552:	b004      	add	sp, #16
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop

08002558 <sprintUSART2>:

void sprintUSART2(uint8_t * str)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	uint16_t k = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	81fb      	strh	r3, [r7, #14]
	
	while (str[k] != '\0')
 8002564:	e016      	b.n	8002594 <sprintUSART2+0x3c>
    {
        putcharUSART2(str[k]);
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fe02 	bl	8002178 <putcharUSART2>
        if (str[k] == '\n')
 8002574:	89fb      	ldrh	r3, [r7, #14]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b0a      	cmp	r3, #10
 800257e:	d102      	bne.n	8002586 <sprintUSART2+0x2e>
            putcharUSART2('\r');
 8002580:	200d      	movs	r0, #13
 8002582:	f7ff fdf9 	bl	8002178 <putcharUSART2>
        k++;
 8002586:	89fb      	ldrh	r3, [r7, #14]
 8002588:	3301      	adds	r3, #1
 800258a:	81fb      	strh	r3, [r7, #14]

        if (k == MAX_PRINT_STRING_SIZE)
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002592:	d006      	beq.n	80025a2 <sprintUSART2+0x4a>
	while (str[k] != '\0')
 8002594:	89fb      	ldrh	r3, [r7, #14]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e2      	bne.n	8002566 <sprintUSART2+0xe>
            break;
    }
}
 80025a0:	e000      	b.n	80025a4 <sprintUSART2+0x4c>
            break;
 80025a2:	bf00      	nop
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <Reset_Handler>:
 80025ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e4 <LoopFillZerobss+0x12>
 80025b0:	480d      	ldr	r0, [pc, #52]	; (80025e8 <LoopFillZerobss+0x16>)
 80025b2:	490e      	ldr	r1, [pc, #56]	; (80025ec <LoopFillZerobss+0x1a>)
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <LoopFillZerobss+0x1e>)
 80025b6:	2300      	movs	r3, #0
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:
 80025ba:	58d4      	ldr	r4, [r2, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:
 80025c0:	18c4      	adds	r4, r0, r3
 80025c2:	428c      	cmp	r4, r1
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>
 80025c6:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <LoopFillZerobss+0x22>)
 80025c8:	4c0b      	ldr	r4, [pc, #44]	; (80025f8 <LoopFillZerobss+0x26>)
 80025ca:	2300      	movs	r3, #0
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:
 80025d2:	42a2      	cmp	r2, r4
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>
 80025d6:	f7ff fcc3 	bl	8001f60 <SystemInit>
 80025da:	f001 fd6d 	bl	80040b8 <__libc_init_array>
 80025de:	f7fe fc2b 	bl	8000e38 <main>
 80025e2:	4770      	bx	lr
 80025e4:	20020000 	.word	0x20020000
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000088 	.word	0x20000088
 80025f0:	080056d0 	.word	0x080056d0
 80025f4:	20000088 	.word	0x20000088
 80025f8:	20000210 	.word	0x20000210

080025fc <ADC_IRQHandler>:
 80025fc:	e7fe      	b.n	80025fc <ADC_IRQHandler>
	...

08002600 <HAL_Init>:
=======
 80024b4:	bf00      	nop
}
 80024b6:	3750      	adds	r7, #80	; 0x50
 80024b8:	46bd      	mov	sp, r7
 80024ba:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80024be:	b004      	add	sp, #16
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop

080024c4 <sprintUSART2>:

void sprintUSART2(uint8_t * str)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	uint16_t k = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	81fb      	strh	r3, [r7, #14]
	
	while (str[k] != '\0')
 80024d0:	e016      	b.n	8002500 <sprintUSART2+0x3c>
    {
        putcharUSART2(str[k]);
 80024d2:	89fb      	ldrh	r3, [r7, #14]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fe02 	bl	80020e4 <putcharUSART2>
        if (str[k] == '\n')
 80024e0:	89fb      	ldrh	r3, [r7, #14]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b0a      	cmp	r3, #10
 80024ea:	d102      	bne.n	80024f2 <sprintUSART2+0x2e>
            putcharUSART2('\r');
 80024ec:	200d      	movs	r0, #13
 80024ee:	f7ff fdf9 	bl	80020e4 <putcharUSART2>
        k++;
 80024f2:	89fb      	ldrh	r3, [r7, #14]
 80024f4:	3301      	adds	r3, #1
 80024f6:	81fb      	strh	r3, [r7, #14]

        if (k == MAX_PRINT_STRING_SIZE)
 80024f8:	89fb      	ldrh	r3, [r7, #14]
 80024fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fe:	d006      	beq.n	800250e <sprintUSART2+0x4a>
	while (str[k] != '\0')
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e2      	bne.n	80024d2 <sprintUSART2+0xe>
            break;
    }
}
 800250c:	e000      	b.n	8002510 <sprintUSART2+0x4c>
            break;
 800250e:	bf00      	nop
}
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <Reset_Handler>:
 8002518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002550 <LoopFillZerobss+0x12>
 800251c:	480d      	ldr	r0, [pc, #52]	; (8002554 <LoopFillZerobss+0x16>)
 800251e:	490e      	ldr	r1, [pc, #56]	; (8002558 <LoopFillZerobss+0x1a>)
 8002520:	4a0e      	ldr	r2, [pc, #56]	; (800255c <LoopFillZerobss+0x1e>)
 8002522:	2300      	movs	r3, #0
 8002524:	e002      	b.n	800252c <LoopCopyDataInit>

08002526 <CopyDataInit>:
 8002526:	58d4      	ldr	r4, [r2, r3]
 8002528:	50c4      	str	r4, [r0, r3]
 800252a:	3304      	adds	r3, #4

0800252c <LoopCopyDataInit>:
 800252c:	18c4      	adds	r4, r0, r3
 800252e:	428c      	cmp	r4, r1
 8002530:	d3f9      	bcc.n	8002526 <CopyDataInit>
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <LoopFillZerobss+0x22>)
 8002534:	4c0b      	ldr	r4, [pc, #44]	; (8002564 <LoopFillZerobss+0x26>)
 8002536:	2300      	movs	r3, #0
 8002538:	e001      	b.n	800253e <LoopFillZerobss>

0800253a <FillZerobss>:
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	3204      	adds	r2, #4

0800253e <LoopFillZerobss>:
 800253e:	42a2      	cmp	r2, r4
 8002540:	d3fb      	bcc.n	800253a <FillZerobss>
 8002542:	f7ff fd61 	bl	8002008 <SystemInit>
 8002546:	f002 f981 	bl	800484c <__libc_init_array>
 800254a:	f7fe fc75 	bl	8000e38 <main>
 800254e:	4770      	bx	lr
 8002550:	20020000 	.word	0x20020000
 8002554:	20000000 	.word	0x20000000
 8002558:	20000088 	.word	0x20000088
 800255c:	08005e88 	.word	0x08005e88
 8002560:	20000088 	.word	0x20000088
 8002564:	200001c8 	.word	0x200001c8

08002568 <ADC_IRQHandler>:
 8002568:	e7fe      	b.n	8002568 <ADC_IRQHandler>
	...

0800256c <HAL_Init>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <HAL_Init+0x40>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6013      	str	r3, [r2, #0]
=======
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_Init+0x40>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <HAL_Init+0x40>)
 8002576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257a:	6013      	str	r3, [r2, #0]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <HAL_Init+0x40>)
 8002616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261a:	6013      	str	r3, [r2, #0]
=======
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_Init+0x40>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_Init+0x40>)
 8002582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002586:	6013      	str	r3, [r2, #0]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <HAL_Init+0x40>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002626:	6013      	str	r3, [r2, #0]
=======
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_Init+0x40>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002592:	6013      	str	r3, [r2, #0]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8002628:	2003      	movs	r0, #3
 800262a:	f000 fd1b 	bl	8003064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	2000      	movs	r0, #0
 8002630:	f000 f808 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7ff fb88 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023c00 	.word	0x40023c00

08002644 <HAL_InitTick>:
=======
 8002594:	2003      	movs	r0, #3
 8002596:	f000 fd1b 	bl	8002fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259a:	2000      	movs	r0, #0
 800259c:	f000 f808 	bl	80025b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a0:	f7ff fc2a 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023c00 	.word	0x40023c00

080025b0 <HAL_InitTick>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_InitTick+0x54>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_InitTick+0x58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fd33 	bl	80030ce <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x4c>
=======
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_InitTick+0x54>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_InitTick+0x58>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fd33 	bl	800303a <HAL_SYSTICK_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e00e      	b.n	80025fc <HAL_InitTick+0x4c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002680:	f000 fcfb 	bl	800307a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <HAL_InitTick+0x5c>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
=======
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b0f      	cmp	r3, #15
 80025e2:	d80a      	bhi.n	80025fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e4:	2200      	movs	r2, #0
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ec:	f000 fcfb 	bl	8002fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f0:	4a06      	ldr	r2, [pc, #24]	; (800260c <HAL_InitTick+0x5c>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6013      	str	r3, [r2, #0]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000014 	.word	0x20000014
 800269c:	2000001c 	.word	0x2000001c
 80026a0:	20000018 	.word	0x20000018

080026a4 <HAL_IncTick>:
=======
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000014 	.word	0x20000014
 8002608:	2000001c 	.word	0x2000001c
 800260c:	20000018 	.word	0x20000018

08002610 <HAL_IncTick>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x20>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x24>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_IncTick+0x24>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000001c 	.word	0x2000001c
 80026c8:	2000020c 	.word	0x2000020c

080026cc <HAL_GetTick>:
=======
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_IncTick+0x20>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_IncTick+0x24>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4413      	add	r3, r2
 8002620:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_IncTick+0x24>)
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	2000001c 	.word	0x2000001c
 8002634:	200001c4 	.word	0x200001c4

08002638 <HAL_GetTick>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_GetTick+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	2000020c 	.word	0x2000020c

080026e4 <HAL_Delay>:
=======
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return uwTick;
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <HAL_GetTick+0x14>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	200001c4 	.word	0x200001c4

08002650 <HAL_Delay>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff ffee 	bl	80026cc <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffde 	bl	80026cc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2000001c 	.word	0x2000001c

0800272c <HAL_ADC_Init>:
=======
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff ffee 	bl	8002638 <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002668:	d005      	beq.n	8002676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_Delay+0x44>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002676:	bf00      	nop
 8002678:	f7ff ffde 	bl	8002638 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d8f7      	bhi.n	8002678 <HAL_Delay+0x28>
  {
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2000001c 	.word	0x2000001c

08002698 <HAL_ADC_Init>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e033      	b.n	80027aa <HAL_ADC_Init+0x7e>
=======
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e033      	b.n	8002716 <HAL_ADC_Init+0x7e>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_ADC_Init+0x32>
=======
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_ADC_Init+0x32>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fb24 	bl	8001d98 <HAL_ADC_MspInit>
=======
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff fbc6 	bl	8001e48 <HAL_ADC_MspInit>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d118      	bne.n	800279c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002772:	f023 0302 	bic.w	r3, r3, #2
 8002776:	f043 0202 	orr.w	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026de:	f023 0302 	bic.w	r3, r3, #2
 80026e2:	f043 0202 	orr.w	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 faa4 	bl	8002ccc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f023 0303 	bic.w	r3, r3, #3
 8002792:	f043 0201 	orr.w	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
 800279a:	e001      	b.n	80027a0 <HAL_ADC_Init+0x74>
=======
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 faa4 	bl	8002c38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
 8002706:	e001      	b.n	800270c <HAL_ADC_Init+0x74>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
=======
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_ADC_Start>:
=======
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_ADC_Start>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
=======
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_Start+0x1a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0b2      	b.n	8002934 <HAL_ADC_Start+0x180>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_ADC_Start+0x1a>
 8002736:	2302      	movs	r3, #2
 8002738:	e0b2      	b.n	80028a0 <HAL_ADC_Start+0x180>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d018      	beq.n	8002816 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	609a      	str	r2, [r3, #8]
=======
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d018      	beq.n	8002782 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	609a      	str	r2, [r3, #8]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 80027f4:	4b52      	ldr	r3, [pc, #328]	; (8002940 <HAL_ADC_Start+0x18c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a52      	ldr	r2, [pc, #328]	; (8002944 <HAL_ADC_Start+0x190>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0c9a      	lsrs	r2, r3, #18
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002808:	e002      	b.n	8002810 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3b01      	subs	r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f9      	bne.n	800280a <HAL_ADC_Start+0x56>
=======
 8002760:	4b52      	ldr	r3, [pc, #328]	; (80028ac <HAL_ADC_Start+0x18c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a52      	ldr	r2, [pc, #328]	; (80028b0 <HAL_ADC_Start+0x190>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9a      	lsrs	r2, r3, #18
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002774:	e002      	b.n	800277c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3b01      	subs	r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f9      	bne.n	8002776 <HAL_ADC_Start+0x56>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d17a      	bne.n	800291a <HAL_ADC_Start+0x166>
=======
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d17a      	bne.n	8002886 <HAL_ADC_Start+0x166>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800284e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002862:	d106      	bne.n	8002872 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	f023 0206 	bic.w	r2, r3, #6
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	645a      	str	r2, [r3, #68]	; 0x44
 8002870:	e002      	b.n	8002878 <HAL_ADC_Start+0xc4>
=======
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ce:	d106      	bne.n	80027de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	f023 0206 	bic.w	r2, r3, #6
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	645a      	str	r2, [r3, #68]	; 0x44
 80027dc:	e002      	b.n	80027e4 <HAL_ADC_Start+0xc4>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_ADC_Start+0x194>)
 8002882:	60fb      	str	r3, [r7, #12]
=======
 80027ec:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_ADC_Start+0x194>)
 80027ee:	60fb      	str	r3, [r7, #12]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800288c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2b00      	cmp	r3, #0
 8002898:	d12a      	bne.n	80028f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a2b      	ldr	r2, [pc, #172]	; (800294c <HAL_ADC_Start+0x198>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d015      	beq.n	80028d0 <HAL_ADC_Start+0x11c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a29      	ldr	r2, [pc, #164]	; (8002950 <HAL_ADC_Start+0x19c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d105      	bne.n	80028ba <HAL_ADC_Start+0x106>
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <HAL_ADC_Start+0x194>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a25      	ldr	r2, [pc, #148]	; (8002954 <HAL_ADC_Start+0x1a0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d136      	bne.n	8002932 <HAL_ADC_Start+0x17e>
 80028c4:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_ADC_Start+0x194>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d130      	bne.n	8002932 <HAL_ADC_Start+0x17e>
=======
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	2b00      	cmp	r3, #0
 8002804:	d12a      	bne.n	800285c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2b      	ldr	r2, [pc, #172]	; (80028b8 <HAL_ADC_Start+0x198>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d015      	beq.n	800283c <HAL_ADC_Start+0x11c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a29      	ldr	r2, [pc, #164]	; (80028bc <HAL_ADC_Start+0x19c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d105      	bne.n	8002826 <HAL_ADC_Start+0x106>
 800281a:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <HAL_ADC_Start+0x194>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a25      	ldr	r2, [pc, #148]	; (80028c0 <HAL_ADC_Start+0x1a0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d136      	bne.n	800289e <HAL_ADC_Start+0x17e>
 8002830:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_ADC_Start+0x194>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d130      	bne.n	800289e <HAL_ADC_Start+0x17e>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
<<<<<<< HEAD
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d129      	bne.n	8002932 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	e020      	b.n	8002932 <HAL_ADC_Start+0x17e>
=======
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d129      	bne.n	800289e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	e020      	b.n	800289e <HAL_ADC_Start+0x17e>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a15      	ldr	r2, [pc, #84]	; (800294c <HAL_ADC_Start+0x198>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d11b      	bne.n	8002932 <HAL_ADC_Start+0x17e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d114      	bne.n	8002932 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	e00b      	b.n	8002932 <HAL_ADC_Start+0x17e>
=======
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <HAL_ADC_Start+0x198>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d11b      	bne.n	800289e <HAL_ADC_Start+0x17e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d114      	bne.n	800289e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	e00b      	b.n	800289e <HAL_ADC_Start+0x17e>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f043 0210 	orr.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f043 0210 	orr.w	r2, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  
  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	20000014 	.word	0x20000014
 8002944:	431bde83 	.word	0x431bde83
 8002948:	40012300 	.word	0x40012300
 800294c:	40012000 	.word	0x40012000
 8002950:	40012100 	.word	0x40012100
 8002954:	40012200 	.word	0x40012200

08002958 <HAL_ADC_PollForConversion>:
=======
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	20000014 	.word	0x20000014
 80028b0:	431bde83 	.word	0x431bde83
 80028b4:	40012300 	.word	0x40012300
 80028b8:	40012000 	.word	0x40012000
 80028bc:	40012100 	.word	0x40012100
 80028c0:	40012200 	.word	0x40012200

080028c4 <HAL_ADC_PollForConversion>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
<<<<<<< HEAD
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
=======
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
<<<<<<< HEAD
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002974:	d113      	bne.n	800299e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002984:	d10b      	bne.n	800299e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e063      	b.n	8002a66 <HAL_ADC_PollForConversion+0x10e>
=======
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e0:	d113      	bne.n	800290a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f0:	d10b      	bne.n	800290a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f043 0220 	orr.w	r2, r3, #32
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e063      	b.n	80029d2 <HAL_ADC_PollForConversion+0x10e>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 800299e:	f7ff fe95 	bl	80026cc <HAL_GetTick>
 80029a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029a4:	e021      	b.n	80029ea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ac:	d01d      	beq.n	80029ea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <HAL_ADC_PollForConversion+0x6c>
 80029b4:	f7ff fe8a 	bl	80026cc <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d212      	bcs.n	80029ea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d00b      	beq.n	80029ea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f043 0204 	orr.w	r2, r3, #4
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e03d      	b.n	8002a66 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d1d6      	bne.n	80029a6 <HAL_ADC_PollForConversion+0x4e>
=======
 800290a:	f7ff fe95 	bl	8002638 <HAL_GetTick>
 800290e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002910:	e021      	b.n	8002956 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002918:	d01d      	beq.n	8002956 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_ADC_PollForConversion+0x6c>
 8002920:	f7ff fe8a 	bl	8002638 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d212      	bcs.n	8002956 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d00b      	beq.n	8002956 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e03d      	b.n	80029d2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d1d6      	bne.n	8002912 <HAL_ADC_PollForConversion+0x4e>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
<<<<<<< HEAD
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0212 	mvn.w	r2, #18
 8002a00:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0212 	mvn.w	r2, #18
 800296c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d123      	bne.n	8002a64 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d11f      	bne.n	8002a64 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d006      	beq.n	8002a40 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d111      	bne.n	8002a64 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d105      	bne.n	8002a64 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f043 0201 	orr.w	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d123      	bne.n	80029d0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800298c:	2b00      	cmp	r3, #0
 800298e:	d11f      	bne.n	80029d0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d111      	bne.n	80029d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
<<<<<<< HEAD
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_ADC_GetValue>:
=======
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_ADC_GetValue>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
<<<<<<< HEAD
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_ADC_ConfigChannel>:
=======
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_ADC_ConfigChannel>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< HEAD
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
=======
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x1c>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e105      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x228>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d925      	bls.n	8002b00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68d9      	ldr	r1, [r3, #12]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b1e      	subs	r3, #30
 8002aca:	2207      	movs	r2, #7
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68d9      	ldr	r1, [r3, #12]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	4603      	mov	r3, r0
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4403      	add	r3, r0
 8002af2:	3b1e      	subs	r3, #30
 8002af4:	409a      	lsls	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	e022      	b.n	8002b46 <HAL_ADC_ConfigChannel+0xbe>
=======
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x1c>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e105      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x228>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b09      	cmp	r3, #9
 8002a1e:	d925      	bls.n	8002a6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68d9      	ldr	r1, [r3, #12]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	3b1e      	subs	r3, #30
 8002a36:	2207      	movs	r2, #7
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43da      	mvns	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	400a      	ands	r2, r1
 8002a44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68d9      	ldr	r1, [r3, #12]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	4603      	mov	r3, r0
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4403      	add	r3, r0
 8002a5e:	3b1e      	subs	r3, #30
 8002a60:	409a      	lsls	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	e022      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6919      	ldr	r1, [r3, #16]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	2207      	movs	r2, #7
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	400a      	ands	r2, r1
 8002b22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6919      	ldr	r1, [r3, #16]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4403      	add	r3, r0
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	611a      	str	r2, [r3, #16]
=======
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6919      	ldr	r1, [r3, #16]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	2207      	movs	r2, #7
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6919      	ldr	r1, [r3, #16]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4403      	add	r3, r0
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	611a      	str	r2, [r3, #16]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d824      	bhi.n	8002b98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3b05      	subs	r3, #5
 8002b60:	221f      	movs	r2, #31
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	3b05      	subs	r3, #5
 8002b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	635a      	str	r2, [r3, #52]	; 0x34
 8002b96:	e04c      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	d824      	bhi.n	8002bea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	3b23      	subs	r3, #35	; 0x23
 8002bb2:	221f      	movs	r2, #31
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	3b23      	subs	r3, #35	; 0x23
 8002bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
 8002be8:	e023      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x1aa>
=======
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d824      	bhi.n	8002b04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	3b05      	subs	r3, #5
 8002acc:	221f      	movs	r2, #31
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	400a      	ands	r2, r1
 8002ada:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	3b05      	subs	r3, #5
 8002af6:	fa00 f203 	lsl.w	r2, r0, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	635a      	str	r2, [r3, #52]	; 0x34
 8002b02:	e04c      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b0c      	cmp	r3, #12
 8002b0a:	d824      	bhi.n	8002b56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b23      	subs	r3, #35	; 0x23
 8002b1e:	221f      	movs	r2, #31
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43da      	mvns	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	3b23      	subs	r3, #35	; 0x23
 8002b48:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
 8002b54:	e023      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b41      	subs	r3, #65	; 0x41
 8002bfc:	221f      	movs	r2, #31
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	400a      	ands	r2, r1
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	3b41      	subs	r3, #65	; 0x41
 8002c26:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	3b41      	subs	r3, #65	; 0x41
 8002b68:	221f      	movs	r2, #31
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	400a      	ands	r2, r1
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4618      	mov	r0, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	3b41      	subs	r3, #65	; 0x41
 8002b92:	fa00 f203 	lsl.w	r2, r0, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8002c32:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_ADC_ConfigChannel+0x234>)
 8002c34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <HAL_ADC_ConfigChannel+0x238>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d109      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1cc>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b12      	cmp	r3, #18
 8002c46:	d105      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1cc>
=======
 8002b9e:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <HAL_ADC_ConfigChannel+0x234>)
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <HAL_ADC_ConfigChannel+0x238>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d109      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x1cc>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b12      	cmp	r3, #18
 8002bb2:	d105      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x1cc>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
<<<<<<< HEAD
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	605a      	str	r2, [r3, #4]
=======
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	605a      	str	r2, [r3, #4]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a19      	ldr	r2, [pc, #100]	; (8002cc0 <HAL_ADC_ConfigChannel+0x238>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d123      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x21e>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	d003      	beq.n	8002c6e <HAL_ADC_ConfigChannel+0x1e6>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b11      	cmp	r3, #17
 8002c6c:	d11b      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x21e>
=======
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <HAL_ADC_ConfigChannel+0x238>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d123      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x21e>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b10      	cmp	r3, #16
 8002bd0:	d003      	beq.n	8002bda <HAL_ADC_ConfigChannel+0x1e6>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b11      	cmp	r3, #17
 8002bd8:	d11b      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
<<<<<<< HEAD
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d111      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x21e>
=======
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d111      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_ADC_ConfigChannel+0x23c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a10      	ldr	r2, [pc, #64]	; (8002cc8 <HAL_ADC_ConfigChannel+0x240>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	0c9a      	lsrs	r2, r3, #18
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c98:	e002      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f9      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x212>
=======
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_ADC_ConfigChannel+0x23c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a10      	ldr	r2, [pc, #64]	; (8002c34 <HAL_ADC_ConfigChannel+0x240>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	0c9a      	lsrs	r2, r3, #18
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c04:	e002      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f9      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x212>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	40012300 	.word	0x40012300
 8002cc0:	40012000 	.word	0x40012000
 8002cc4:	20000014 	.word	0x20000014
 8002cc8:	431bde83 	.word	0x431bde83

08002ccc <ADC_Init>:
=======
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	40012300 	.word	0x40012300
 8002c2c:	40012000 	.word	0x40012000
 8002c30:	20000014 	.word	0x20000014
 8002c34:	431bde83 	.word	0x431bde83

08002c38 <ADC_Init>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
=======
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8002cd4:	4b79      	ldr	r3, [pc, #484]	; (8002ebc <ADC_Init+0x1f0>)
 8002cd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	021a      	lsls	r2, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6859      	ldr	r1, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6899      	ldr	r1, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]
=======
 8002c40:	4b79      	ldr	r3, [pc, #484]	; (8002e28 <ADC_Init+0x1f0>)
 8002c42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	021a      	lsls	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6899      	ldr	r1, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	4a58      	ldr	r2, [pc, #352]	; (8002ec0 <ADC_Init+0x1f4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d022      	beq.n	8002daa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6899      	ldr	r1, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6899      	ldr	r1, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	e00f      	b.n	8002dca <ADC_Init+0xfe>
=======
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <ADC_Init+0x1f4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d022      	beq.n	8002d16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6899      	ldr	r1, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6899      	ldr	r1, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	e00f      	b.n	8002d36 <ADC_Init+0xfe>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002db8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dc8:	609a      	str	r2, [r3, #8]
=======
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d34:	609a      	str	r2, [r3, #8]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0202 	bic.w	r2, r2, #2
 8002dd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6899      	ldr	r1, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7e1b      	ldrb	r3, [r3, #24]
 8002de4:	005a      	lsls	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01b      	beq.n	8002e30 <ADC_Init+0x164>
=======
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0202 	bic.w	r2, r2, #2
 8002d44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7e1b      	ldrb	r3, [r3, #24]
 8002d50:	005a      	lsls	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01b      	beq.n	8002d9c <ADC_Init+0x164>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	3b01      	subs	r3, #1
 8002e24:	035a      	lsls	r2, r3, #13
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	e007      	b.n	8002e40 <ADC_Init+0x174>
=======
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	035a      	lsls	r2, r3, #13
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	e007      	b.n	8002dac <ADC_Init+0x174>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3e:	605a      	str	r2, [r3, #4]
=======
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002daa:	605a      	str	r2, [r3, #4]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	051a      	lsls	r2, r3, #20
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6899      	ldr	r1, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e82:	025a      	lsls	r2, r3, #9
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6899      	ldr	r1, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	029a      	lsls	r2, r3, #10
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	609a      	str	r2, [r3, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40012300 	.word	0x40012300
 8002ec0:	0f000001 	.word	0x0f000001

08002ec4 <__NVIC_SetPriorityGrouping>:
=======
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	051a      	lsls	r2, r3, #20
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6899      	ldr	r1, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dee:	025a      	lsls	r2, r3, #9
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6899      	ldr	r1, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	029a      	lsls	r2, r3, #10
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40012300 	.word	0x40012300
 8002e2c:	0f000001 	.word	0x0f000001

08002e30 <__NVIC_SetPriorityGrouping>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_GetPriorityGrouping>:
=======
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <__NVIC_GetPriorityGrouping+0x18>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 0307 	and.w	r3, r3, #7
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_EnableIRQ>:
=======
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_EnableIRQ>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db0b      	blt.n	8002f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	4907      	ldr	r1, [pc, #28]	; (8002f60 <__NVIC_EnableIRQ+0x38>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2001      	movs	r0, #1
 8002f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e100 	.word	0xe000e100

08002f64 <__NVIC_SetPriority>:
=======
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db0b      	blt.n	8002ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4907      	ldr	r1, [pc, #28]	; (8002ecc <__NVIC_EnableIRQ+0x38>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000e100 	.word	0xe000e100

08002ed0 <__NVIC_SetPriority>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	6039      	str	r1, [r7, #0]
 8002f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	db0a      	blt.n	8002f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	490c      	ldr	r1, [pc, #48]	; (8002fb0 <__NVIC_SetPriority+0x4c>)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	440b      	add	r3, r1
 8002f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db0a      	blt.n	8002efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	490c      	ldr	r1, [pc, #48]	; (8002f1c <__NVIC_SetPriority+0x4c>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002f8c:	e00a      	b.n	8002fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4908      	ldr	r1, [pc, #32]	; (8002fb4 <__NVIC_SetPriority+0x50>)
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	3b04      	subs	r3, #4
 8002f9c:	0112      	lsls	r2, r2, #4
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	761a      	strb	r2, [r3, #24]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000e100 	.word	0xe000e100
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <NVIC_EncodePriority>:
=======
 8002ef8:	e00a      	b.n	8002f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4908      	ldr	r1, [pc, #32]	; (8002f20 <__NVIC_SetPriority+0x50>)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	3b04      	subs	r3, #4
 8002f08:	0112      	lsls	r2, r2, #4
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	761a      	strb	r2, [r3, #24]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000e100 	.word	0xe000e100
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <NVIC_EncodePriority>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	; 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	61fb      	str	r3, [r7, #28]
=======
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	; 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	61fb      	str	r3, [r7, #28]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f1c3 0307 	rsb	r3, r3, #7
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	bf28      	it	cs
 8002fd6:	2304      	movcs	r3, #4
 8002fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d902      	bls.n	8002fe8 <NVIC_EncodePriority+0x30>
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3b03      	subs	r3, #3
 8002fe6:	e000      	b.n	8002fea <NVIC_EncodePriority+0x32>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003000:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	43d9      	mvns	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	4313      	orrs	r3, r2
         );
}
 8003012:	4618      	mov	r0, r3
 8003014:	3724      	adds	r7, #36	; 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <SysTick_Config>:
=======
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f1c3 0307 	rsb	r3, r3, #7
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	bf28      	it	cs
 8002f42:	2304      	movcs	r3, #4
 8002f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d902      	bls.n	8002f54 <NVIC_EncodePriority+0x30>
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3b03      	subs	r3, #3
 8002f52:	e000      	b.n	8002f56 <NVIC_EncodePriority+0x32>
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	401a      	ands	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	43d9      	mvns	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	4313      	orrs	r3, r2
         );
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	; 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <SysTick_Config>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003030:	d301      	bcc.n	8003036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003032:	2301      	movs	r3, #1
 8003034:	e00f      	b.n	8003056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003036:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <SysTick_Config+0x40>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303e:	210f      	movs	r1, #15
 8003040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003044:	f7ff ff8e 	bl	8002f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <SysTick_Config+0x40>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <SysTick_Config+0x40>)
 8003050:	2207      	movs	r2, #7
 8003052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	e000e010 	.word	0xe000e010

08003064 <HAL_NVIC_SetPriorityGrouping>:
=======
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f9c:	d301      	bcc.n	8002fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00f      	b.n	8002fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <SysTick_Config+0x40>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002faa:	210f      	movs	r1, #15
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fb0:	f7ff ff8e 	bl	8002ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <SysTick_Config+0x40>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fba:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <SysTick_Config+0x40>)
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	e000e010 	.word	0xe000e010

08002fd0 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
=======
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff29 	bl	8002ec4 <__NVIC_SetPriorityGrouping>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_SetPriority>:
=======
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ff29 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_NVIC_SetPriority>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
=======
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	4603      	mov	r3, r0
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 800308c:	f7ff ff3e 	bl	8002f0c <__NVIC_GetPriorityGrouping>
 8003090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	6978      	ldr	r0, [r7, #20]
 8003098:	f7ff ff8e 	bl	8002fb8 <NVIC_EncodePriority>
 800309c:	4602      	mov	r2, r0
 800309e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff5d 	bl	8002f64 <__NVIC_SetPriority>
}
 80030aa:	bf00      	nop
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_EnableIRQ>:
=======
 8002ff8:	f7ff ff3e 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	6978      	ldr	r0, [r7, #20]
 8003004:	f7ff ff8e 	bl	8002f24 <NVIC_EncodePriority>
 8003008:	4602      	mov	r2, r0
 800300a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff5d 	bl	8002ed0 <__NVIC_SetPriority>
}
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_NVIC_EnableIRQ>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	71fb      	strb	r3, [r7, #7]
=======
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	71fb      	strb	r3, [r7, #7]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 80030bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff31 	bl	8002f28 <__NVIC_EnableIRQ>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_SYSTICK_Config>:
=======
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff31 	bl	8002e94 <__NVIC_EnableIRQ>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_SYSTICK_Config>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ffa2 	bl	8003020 <SysTick_Config>
 80030dc:	4603      	mov	r3, r0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_GPIO_Init>:
=======
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ffa2 	bl	8002f8c <SysTick_Config>
 8003048:	4603      	mov	r3, r0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <HAL_GPIO_Init>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
=======
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e16b      	b.n	80033dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	429a      	cmp	r2, r3
 800311e:	f040 815a 	bne.w	80033d6 <HAL_GPIO_Init+0x2ee>
=======
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	e16b      	b.n	8003348 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003070:	2201      	movs	r2, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	429a      	cmp	r2, r3
 800308a:	f040 815a 	bne.w	8003342 <HAL_GPIO_Init+0x2ee>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d005      	beq.n	800313a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003136:	2b02      	cmp	r3, #2
 8003138:	d130      	bne.n	800319c <HAL_GPIO_Init+0xb4>
=======
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d005      	beq.n	80030a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d130      	bne.n	8003108 <HAL_GPIO_Init+0xb4>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	2203      	movs	r2, #3
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 0201 	and.w	r2, r3, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d017      	beq.n	80031d8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	60da      	str	r2, [r3, #12]
=======
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2203      	movs	r2, #3
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030dc:	2201      	movs	r2, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 0201 	and.w	r2, r3, #1
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b03      	cmp	r3, #3
 8003112:	d017      	beq.n	8003144 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	60da      	str	r2, [r3, #12]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d123      	bne.n	800322c <HAL_GPIO_Init+0x144>
=======
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d123      	bne.n	8003198 <HAL_GPIO_Init+0x144>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	08da      	lsrs	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3208      	adds	r2, #8
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	08da      	lsrs	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3208      	adds	r2, #8
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	08da      	lsrs	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3208      	adds	r2, #8
 8003158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	220f      	movs	r2, #15
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	08da      	lsrs	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3208      	adds	r2, #8
 8003192:	69b9      	ldr	r1, [r7, #24]
 8003194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	601a      	str	r2, [r3, #0]
=======
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2203      	movs	r2, #3
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0203 	and.w	r2, r3, #3
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	601a      	str	r2, [r3, #0]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80b4 	beq.w	80033d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b60      	ldr	r3, [pc, #384]	; (80033f4 <HAL_GPIO_Init+0x30c>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	4a5f      	ldr	r2, [pc, #380]	; (80033f4 <HAL_GPIO_Init+0x30c>)
 8003278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800327c:	6453      	str	r3, [r2, #68]	; 0x44
 800327e:	4b5d      	ldr	r3, [pc, #372]	; (80033f4 <HAL_GPIO_Init+0x30c>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800328a:	4a5b      	ldr	r2, [pc, #364]	; (80033f8 <HAL_GPIO_Init+0x310>)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	3302      	adds	r3, #2
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a52      	ldr	r2, [pc, #328]	; (80033fc <HAL_GPIO_Init+0x314>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d02b      	beq.n	800330e <HAL_GPIO_Init+0x226>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a51      	ldr	r2, [pc, #324]	; (8003400 <HAL_GPIO_Init+0x318>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d025      	beq.n	800330a <HAL_GPIO_Init+0x222>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a50      	ldr	r2, [pc, #320]	; (8003404 <HAL_GPIO_Init+0x31c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01f      	beq.n	8003306 <HAL_GPIO_Init+0x21e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4f      	ldr	r2, [pc, #316]	; (8003408 <HAL_GPIO_Init+0x320>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d019      	beq.n	8003302 <HAL_GPIO_Init+0x21a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4e      	ldr	r2, [pc, #312]	; (800340c <HAL_GPIO_Init+0x324>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_GPIO_Init+0x216>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a4d      	ldr	r2, [pc, #308]	; (8003410 <HAL_GPIO_Init+0x328>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00d      	beq.n	80032fa <HAL_GPIO_Init+0x212>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4c      	ldr	r2, [pc, #304]	; (8003414 <HAL_GPIO_Init+0x32c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d007      	beq.n	80032f6 <HAL_GPIO_Init+0x20e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4b      	ldr	r2, [pc, #300]	; (8003418 <HAL_GPIO_Init+0x330>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d101      	bne.n	80032f2 <HAL_GPIO_Init+0x20a>
 80032ee:	2307      	movs	r3, #7
 80032f0:	e00e      	b.n	8003310 <HAL_GPIO_Init+0x228>
 80032f2:	2308      	movs	r3, #8
 80032f4:	e00c      	b.n	8003310 <HAL_GPIO_Init+0x228>
 80032f6:	2306      	movs	r3, #6
 80032f8:	e00a      	b.n	8003310 <HAL_GPIO_Init+0x228>
 80032fa:	2305      	movs	r3, #5
 80032fc:	e008      	b.n	8003310 <HAL_GPIO_Init+0x228>
 80032fe:	2304      	movs	r3, #4
 8003300:	e006      	b.n	8003310 <HAL_GPIO_Init+0x228>
 8003302:	2303      	movs	r3, #3
 8003304:	e004      	b.n	8003310 <HAL_GPIO_Init+0x228>
 8003306:	2302      	movs	r3, #2
 8003308:	e002      	b.n	8003310 <HAL_GPIO_Init+0x228>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_GPIO_Init+0x228>
 800330e:	2300      	movs	r3, #0
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	f002 0203 	and.w	r2, r2, #3
 8003316:	0092      	lsls	r2, r2, #2
 8003318:	4093      	lsls	r3, r2
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003320:	4935      	ldr	r1, [pc, #212]	; (80033f8 <HAL_GPIO_Init+0x310>)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	3302      	adds	r3, #2
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800332e:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_GPIO_Init+0x334>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003352:	4a32      	ldr	r2, [pc, #200]	; (800341c <HAL_GPIO_Init+0x334>)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003358:	4b30      	ldr	r3, [pc, #192]	; (800341c <HAL_GPIO_Init+0x334>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800337c:	4a27      	ldr	r2, [pc, #156]	; (800341c <HAL_GPIO_Init+0x334>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_GPIO_Init+0x334>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033a6:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_GPIO_Init+0x334>)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_GPIO_Init+0x334>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033d0:	4a12      	ldr	r2, [pc, #72]	; (800341c <HAL_GPIO_Init+0x334>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3301      	adds	r3, #1
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b0f      	cmp	r3, #15
 80033e0:	f67f ae90 	bls.w	8003104 <HAL_GPIO_Init+0x1c>
=======
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80b4 	beq.w	8003342 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b60      	ldr	r3, [pc, #384]	; (8003360 <HAL_GPIO_Init+0x30c>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a5f      	ldr	r2, [pc, #380]	; (8003360 <HAL_GPIO_Init+0x30c>)
 80031e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	4b5d      	ldr	r3, [pc, #372]	; (8003360 <HAL_GPIO_Init+0x30c>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031f6:	4a5b      	ldr	r2, [pc, #364]	; (8003364 <HAL_GPIO_Init+0x310>)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	3302      	adds	r3, #2
 80031fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	220f      	movs	r2, #15
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a52      	ldr	r2, [pc, #328]	; (8003368 <HAL_GPIO_Init+0x314>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d02b      	beq.n	800327a <HAL_GPIO_Init+0x226>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a51      	ldr	r2, [pc, #324]	; (800336c <HAL_GPIO_Init+0x318>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d025      	beq.n	8003276 <HAL_GPIO_Init+0x222>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a50      	ldr	r2, [pc, #320]	; (8003370 <HAL_GPIO_Init+0x31c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01f      	beq.n	8003272 <HAL_GPIO_Init+0x21e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a4f      	ldr	r2, [pc, #316]	; (8003374 <HAL_GPIO_Init+0x320>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d019      	beq.n	800326e <HAL_GPIO_Init+0x21a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a4e      	ldr	r2, [pc, #312]	; (8003378 <HAL_GPIO_Init+0x324>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <HAL_GPIO_Init+0x216>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a4d      	ldr	r2, [pc, #308]	; (800337c <HAL_GPIO_Init+0x328>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00d      	beq.n	8003266 <HAL_GPIO_Init+0x212>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a4c      	ldr	r2, [pc, #304]	; (8003380 <HAL_GPIO_Init+0x32c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d007      	beq.n	8003262 <HAL_GPIO_Init+0x20e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4b      	ldr	r2, [pc, #300]	; (8003384 <HAL_GPIO_Init+0x330>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d101      	bne.n	800325e <HAL_GPIO_Init+0x20a>
 800325a:	2307      	movs	r3, #7
 800325c:	e00e      	b.n	800327c <HAL_GPIO_Init+0x228>
 800325e:	2308      	movs	r3, #8
 8003260:	e00c      	b.n	800327c <HAL_GPIO_Init+0x228>
 8003262:	2306      	movs	r3, #6
 8003264:	e00a      	b.n	800327c <HAL_GPIO_Init+0x228>
 8003266:	2305      	movs	r3, #5
 8003268:	e008      	b.n	800327c <HAL_GPIO_Init+0x228>
 800326a:	2304      	movs	r3, #4
 800326c:	e006      	b.n	800327c <HAL_GPIO_Init+0x228>
 800326e:	2303      	movs	r3, #3
 8003270:	e004      	b.n	800327c <HAL_GPIO_Init+0x228>
 8003272:	2302      	movs	r3, #2
 8003274:	e002      	b.n	800327c <HAL_GPIO_Init+0x228>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_GPIO_Init+0x228>
 800327a:	2300      	movs	r3, #0
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	f002 0203 	and.w	r2, r2, #3
 8003282:	0092      	lsls	r2, r2, #2
 8003284:	4093      	lsls	r3, r2
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800328c:	4935      	ldr	r1, [pc, #212]	; (8003364 <HAL_GPIO_Init+0x310>)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	3302      	adds	r3, #2
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800329a:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <HAL_GPIO_Init+0x334>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032be:	4a32      	ldr	r2, [pc, #200]	; (8003388 <HAL_GPIO_Init+0x334>)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032c4:	4b30      	ldr	r3, [pc, #192]	; (8003388 <HAL_GPIO_Init+0x334>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032e8:	4a27      	ldr	r2, [pc, #156]	; (8003388 <HAL_GPIO_Init+0x334>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <HAL_GPIO_Init+0x334>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003312:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <HAL_GPIO_Init+0x334>)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_GPIO_Init+0x334>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800333c:	4a12      	ldr	r2, [pc, #72]	; (8003388 <HAL_GPIO_Init+0x334>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3301      	adds	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b0f      	cmp	r3, #15
 800334c:	f67f ae90 	bls.w	8003070 <HAL_GPIO_Init+0x1c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
      }
    }
  }
}
<<<<<<< HEAD
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3724      	adds	r7, #36	; 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40020000 	.word	0x40020000
 8003400:	40020400 	.word	0x40020400
 8003404:	40020800 	.word	0x40020800
 8003408:	40020c00 	.word	0x40020c00
 800340c:	40021000 	.word	0x40021000
 8003410:	40021400 	.word	0x40021400
 8003414:	40021800 	.word	0x40021800
 8003418:	40021c00 	.word	0x40021c00
 800341c:	40013c00 	.word	0x40013c00

08003420 <HAL_GPIO_ReadPin>:
=======
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800
 8003364:	40013800 	.word	0x40013800
 8003368:	40020000 	.word	0x40020000
 800336c:	40020400 	.word	0x40020400
 8003370:	40020800 	.word	0x40020800
 8003374:	40020c00 	.word	0x40020c00
 8003378:	40021000 	.word	0x40021000
 800337c:	40021400 	.word	0x40021400
 8003380:	40021800 	.word	0x40021800
 8003384:	40021c00 	.word	0x40021c00
 8003388:	40013c00 	.word	0x40013c00

0800338c <HAL_GPIO_ReadPin>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]
=======
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	887b      	ldrh	r3, [r7, #2]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	e001      	b.n	8003442 <HAL_GPIO_ReadPin+0x22>
=======
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	887b      	ldrh	r3, [r7, #2]
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	e001      	b.n	80033ae <HAL_GPIO_ReadPin+0x22>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_GPIO_WritePin>:
=======
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_GPIO_WritePin>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
 800345c:	4613      	mov	r3, r2
 800345e:	707b      	strb	r3, [r7, #1]
=======
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
 80033c8:	4613      	mov	r3, r2
 80033ca:	707b      	strb	r3, [r7, #1]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8003460:	787b      	ldrb	r3, [r7, #1]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	619a      	str	r2, [r3, #24]
=======
 80033cc:	787b      	ldrb	r3, [r7, #1]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033d2:	887a      	ldrh	r2, [r7, #2]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	619a      	str	r2, [r3, #24]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 800346c:	e003      	b.n	8003476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800346e:	887b      	ldrh	r3, [r7, #2]
 8003470:	041a      	lsls	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	619a      	str	r2, [r3, #24]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_GPIO_TogglePin>:
=======
 80033d8:	e003      	b.n	80033e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033da:	887b      	ldrh	r3, [r7, #2]
 80033dc:	041a      	lsls	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	619a      	str	r2, [r3, #24]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_GPIO_TogglePin>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	807b      	strh	r3, [r7, #2]
=======
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	460b      	mov	r3, r1
 80033f8:	807b      	strh	r3, [r7, #2]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003494:	887a      	ldrh	r2, [r7, #2]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4013      	ands	r3, r2
 800349a:	041a      	lsls	r2, r3, #16
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	43d9      	mvns	r1, r3
 80034a0:	887b      	ldrh	r3, [r7, #2]
 80034a2:	400b      	ands	r3, r1
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	619a      	str	r2, [r3, #24]
}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_GPIO_EXTI_IRQHandler>:
=======
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003400:	887a      	ldrh	r2, [r7, #2]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4013      	ands	r3, r2
 8003406:	041a      	lsls	r2, r3, #16
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	43d9      	mvns	r1, r3
 800340c:	887b      	ldrh	r3, [r7, #2]
 800340e:	400b      	ands	r3, r1
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	619a      	str	r2, [r3, #24]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ce:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f806 	bl	80034e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40013c00 	.word	0x40013c00

080034e8 <HAL_GPIO_EXTI_Callback>:
=======
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	4013      	ands	r3, r2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d006      	beq.n	8003448 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800343a:	4a05      	ldr	r2, [pc, #20]	; (8003450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f806 	bl	8003454 <HAL_GPIO_EXTI_Callback>
  }
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40013c00 	.word	0x40013c00

08003454 <HAL_GPIO_EXTI_Callback>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	80fb      	strh	r3, [r7, #6]
=======
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	80fb      	strh	r3, [r7, #6]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_RCC_GetHCLKFreq>:
=======
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e264      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d075      	beq.n	8003576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800348a:	4ba3      	ldr	r3, [pc, #652]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b04      	cmp	r3, #4
 8003494:	d00c      	beq.n	80034b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003496:	4ba0      	ldr	r3, [pc, #640]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d112      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a2:	4b9d      	ldr	r3, [pc, #628]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ae:	d10b      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	4b99      	ldr	r3, [pc, #612]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d05b      	beq.n	8003574 <HAL_RCC_OscConfig+0x108>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d157      	bne.n	8003574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e23f      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d0:	d106      	bne.n	80034e0 <HAL_RCC_OscConfig+0x74>
 80034d2:	4b91      	ldr	r3, [pc, #580]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a90      	ldr	r2, [pc, #576]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e01d      	b.n	800351c <HAL_RCC_OscConfig+0xb0>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x98>
 80034ea:	4b8b      	ldr	r3, [pc, #556]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a8a      	ldr	r2, [pc, #552]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b88      	ldr	r3, [pc, #544]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a87      	ldr	r2, [pc, #540]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e00b      	b.n	800351c <HAL_RCC_OscConfig+0xb0>
 8003504:	4b84      	ldr	r3, [pc, #528]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a83      	ldr	r2, [pc, #524]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 800350a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	4b81      	ldr	r3, [pc, #516]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a80      	ldr	r2, [pc, #512]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d013      	beq.n	800354c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7ff f888 	bl	8002638 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800352c:	f7ff f884 	bl	8002638 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e204      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	4b76      	ldr	r3, [pc, #472]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0xc0>
 800354a:	e014      	b.n	8003576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7ff f874 	bl	8002638 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003554:	f7ff f870 	bl	8002638 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e1f0      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003566:	4b6c      	ldr	r3, [pc, #432]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0xe8>
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d063      	beq.n	800364a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003582:	4b65      	ldr	r3, [pc, #404]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358e:	4b62      	ldr	r3, [pc, #392]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003596:	2b08      	cmp	r3, #8
 8003598:	d11c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359a:	4b5f      	ldr	r3, [pc, #380]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d116      	bne.n	80035d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a6:	4b5c      	ldr	r3, [pc, #368]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_RCC_OscConfig+0x152>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d001      	beq.n	80035be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e1c4      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035be:	4b56      	ldr	r3, [pc, #344]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4952      	ldr	r1, [pc, #328]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	e03a      	b.n	800364a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035dc:	4b4f      	ldr	r3, [pc, #316]	; (800371c <HAL_RCC_OscConfig+0x2b0>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7ff f829 	bl	8002638 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ea:	f7ff f825 	bl	8002638 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e1a5      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fc:	4b46      	ldr	r3, [pc, #280]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003608:	4b43      	ldr	r3, [pc, #268]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4940      	ldr	r1, [pc, #256]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]
 800361c:	e015      	b.n	800364a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361e:	4b3f      	ldr	r3, [pc, #252]	; (800371c <HAL_RCC_OscConfig+0x2b0>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7ff f808 	bl	8002638 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362c:	f7ff f804 	bl	8002638 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e184      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	4b36      	ldr	r3, [pc, #216]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d030      	beq.n	80036b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d016      	beq.n	800368c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <HAL_RCC_OscConfig+0x2b4>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fe ffe8 	bl	8002638 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800366c:	f7fe ffe4 	bl	8002638 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e164      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367e:	4b26      	ldr	r3, [pc, #152]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x200>
 800368a:	e015      	b.n	80036b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_OscConfig+0x2b4>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003692:	f7fe ffd1 	bl	8002638 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800369a:	f7fe ffcd 	bl	8002638 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e14d      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ac:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80036ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f0      	bne.n	800369a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80a0 	beq.w	8003806 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	4a0e      	ldr	r2, [pc, #56]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
 80036e6:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCC_OscConfig+0x2b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d121      	bne.n	8003746 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003702:	4b08      	ldr	r3, [pc, #32]	; (8003724 <HAL_RCC_OscConfig+0x2b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a07      	ldr	r2, [pc, #28]	; (8003724 <HAL_RCC_OscConfig+0x2b8>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370e:	f7fe ff93 	bl	8002638 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	e011      	b.n	800373a <HAL_RCC_OscConfig+0x2ce>
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	42470000 	.word	0x42470000
 8003720:	42470e80 	.word	0x42470e80
 8003724:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003728:	f7fe ff86 	bl	8002638 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e106      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373a:	4b85      	ldr	r3, [pc, #532]	; (8003950 <HAL_RCC_OscConfig+0x4e4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d106      	bne.n	800375c <HAL_RCC_OscConfig+0x2f0>
 800374e:	4b81      	ldr	r3, [pc, #516]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a80      	ldr	r2, [pc, #512]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
 800375a:	e01c      	b.n	8003796 <HAL_RCC_OscConfig+0x32a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b05      	cmp	r3, #5
 8003762:	d10c      	bne.n	800377e <HAL_RCC_OscConfig+0x312>
 8003764:	4b7b      	ldr	r3, [pc, #492]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4a7a      	ldr	r2, [pc, #488]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
 8003770:	4b78      	ldr	r3, [pc, #480]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a77      	ldr	r2, [pc, #476]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
 800377c:	e00b      	b.n	8003796 <HAL_RCC_OscConfig+0x32a>
 800377e:	4b75      	ldr	r3, [pc, #468]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a74      	ldr	r2, [pc, #464]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	6713      	str	r3, [r2, #112]	; 0x70
 800378a:	4b72      	ldr	r3, [pc, #456]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a71      	ldr	r2, [pc, #452]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d015      	beq.n	80037ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fe ff4b 	bl	8002638 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fe ff47 	bl	8002638 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0c5      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	4b65      	ldr	r3, [pc, #404]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0ee      	beq.n	80037a6 <HAL_RCC_OscConfig+0x33a>
 80037c8:	e014      	b.n	80037f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ca:	f7fe ff35 	bl	8002638 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fe ff31 	bl	8002638 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0af      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e8:	4b5a      	ldr	r3, [pc, #360]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ee      	bne.n	80037d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fa:	4b56      	ldr	r3, [pc, #344]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a55      	ldr	r2, [pc, #340]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 809b 	beq.w	8003946 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003810:	4b50      	ldr	r3, [pc, #320]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d05c      	beq.n	80038d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d141      	bne.n	80038a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003824:	4b4c      	ldr	r3, [pc, #304]	; (8003958 <HAL_RCC_OscConfig+0x4ec>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fe ff05 	bl	8002638 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003832:	f7fe ff01 	bl	8002638 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e081      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f0      	bne.n	8003832 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	019b      	lsls	r3, r3, #6
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	3b01      	subs	r3, #1
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	4937      	ldr	r1, [pc, #220]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800387a:	4b37      	ldr	r3, [pc, #220]	; (8003958 <HAL_RCC_OscConfig+0x4ec>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe feda 	bl	8002638 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe fed6 	bl	8002638 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e056      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389a:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x41c>
 80038a6:	e04e      	b.n	8003946 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <HAL_RCC_OscConfig+0x4ec>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fe fec3 	bl	8002638 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fe febf 	bl	8002638 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e03f      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c8:	4b22      	ldr	r3, [pc, #136]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f0      	bne.n	80038b6 <HAL_RCC_OscConfig+0x44a>
 80038d4:	e037      	b.n	8003946 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e032      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038e2:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <HAL_RCC_OscConfig+0x4e8>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d028      	beq.n	8003942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d121      	bne.n	8003942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d11a      	bne.n	8003942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003912:	4013      	ands	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003918:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800391a:	4293      	cmp	r3, r2
 800391c:	d111      	bne.n	8003942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	3b01      	subs	r3, #1
 800392c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d107      	bne.n	8003942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d001      	beq.n	8003946 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40007000 	.word	0x40007000
 8003954:	40023800 	.word	0x40023800
 8003958:	42470060 	.word	0x42470060

0800395c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0cc      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003970:	4b68      	ldr	r3, [pc, #416]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d90c      	bls.n	8003998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b65      	ldr	r3, [pc, #404]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b63      	ldr	r3, [pc, #396]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0b8      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b0:	4b59      	ldr	r3, [pc, #356]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4a58      	ldr	r2, [pc, #352]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c8:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a52      	ldr	r2, [pc, #328]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d4:	4b50      	ldr	r3, [pc, #320]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	494d      	ldr	r1, [pc, #308]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d044      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	4b47      	ldr	r3, [pc, #284]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d119      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e07f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	4b3f      	ldr	r3, [pc, #252]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e06f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2a:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e067      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 0203 	bic.w	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4934      	ldr	r1, [pc, #208]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a4c:	f7fe fdf4 	bl	8002638 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fe fdf0 	bl	8002638 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e04f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 020c 	and.w	r2, r3, #12
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1eb      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d20c      	bcs.n	8003aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e032      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4916      	ldr	r1, [pc, #88]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ace:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	490e      	ldr	r1, [pc, #56]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ae2:	f000 f821 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	490a      	ldr	r1, [pc, #40]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	5ccb      	ldrb	r3, [r1, r3]
 8003af6:	fa22 f303 	lsr.w	r3, r2, r3
 8003afa:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCC_ClockConfig+0x1c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fd54 	bl	80025b0 <HAL_InitTick>

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023c00 	.word	0x40023c00
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	08005e18 	.word	0x08005e18
 8003b20:	20000014 	.word	0x20000014
 8003b24:	20000018 	.word	0x20000018

08003b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	b5b0      	push	{r4, r5, r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b2e:	2100      	movs	r1, #0
 8003b30:	6079      	str	r1, [r7, #4]
 8003b32:	2100      	movs	r1, #0
 8003b34:	60f9      	str	r1, [r7, #12]
 8003b36:	2100      	movs	r1, #0
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b3e:	4952      	ldr	r1, [pc, #328]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b40:	6889      	ldr	r1, [r1, #8]
 8003b42:	f001 010c 	and.w	r1, r1, #12
 8003b46:	2908      	cmp	r1, #8
 8003b48:	d00d      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x3e>
 8003b4a:	2908      	cmp	r1, #8
 8003b4c:	f200 8094 	bhi.w	8003c78 <HAL_RCC_GetSysClockFreq+0x150>
 8003b50:	2900      	cmp	r1, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_RCC_GetSysClockFreq+0x32>
 8003b54:	2904      	cmp	r1, #4
 8003b56:	d003      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x38>
 8003b58:	e08e      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b5a:	4b4c      	ldr	r3, [pc, #304]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x164>)
 8003b5c:	60bb      	str	r3, [r7, #8]
       break;
 8003b5e:	e08e      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b60:	4b4b      	ldr	r3, [pc, #300]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b62:	60bb      	str	r3, [r7, #8]
      break;
 8003b64:	e08b      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b66:	4948      	ldr	r1, [pc, #288]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b68:	6849      	ldr	r1, [r1, #4]
 8003b6a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b6e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b70:	4945      	ldr	r1, [pc, #276]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b72:	6849      	ldr	r1, [r1, #4]
 8003b74:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b78:	2900      	cmp	r1, #0
 8003b7a:	d024      	beq.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7c:	4942      	ldr	r1, [pc, #264]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b7e:	6849      	ldr	r1, [r1, #4]
 8003b80:	0989      	lsrs	r1, r1, #6
 8003b82:	4608      	mov	r0, r1
 8003b84:	f04f 0100 	mov.w	r1, #0
 8003b88:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003b8c:	f04f 0500 	mov.w	r5, #0
 8003b90:	ea00 0204 	and.w	r2, r0, r4
 8003b94:	ea01 0305 	and.w	r3, r1, r5
 8003b98:	493d      	ldr	r1, [pc, #244]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b9a:	fb01 f003 	mul.w	r0, r1, r3
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	fb01 f102 	mul.w	r1, r1, r2
 8003ba4:	1844      	adds	r4, r0, r1
 8003ba6:	493a      	ldr	r1, [pc, #232]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ba8:	fba2 0101 	umull	r0, r1, r2, r1
 8003bac:	1863      	adds	r3, r4, r1
 8003bae:	4619      	mov	r1, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	f7fc ffc2 	bl	8000b40 <__aeabi_uldivmod>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e04a      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc6:	4b30      	ldr	r3, [pc, #192]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	099b      	lsrs	r3, r3, #6
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bd6:	f04f 0100 	mov.w	r1, #0
 8003bda:	ea02 0400 	and.w	r4, r2, r0
 8003bde:	ea03 0501 	and.w	r5, r3, r1
 8003be2:	4620      	mov	r0, r4
 8003be4:	4629      	mov	r1, r5
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	014b      	lsls	r3, r1, #5
 8003bf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bf4:	0142      	lsls	r2, r0, #5
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	1b00      	subs	r0, r0, r4
 8003bfc:	eb61 0105 	sbc.w	r1, r1, r5
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	018b      	lsls	r3, r1, #6
 8003c0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c0e:	0182      	lsls	r2, r0, #6
 8003c10:	1a12      	subs	r2, r2, r0
 8003c12:	eb63 0301 	sbc.w	r3, r3, r1
 8003c16:	f04f 0000 	mov.w	r0, #0
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	00d9      	lsls	r1, r3, #3
 8003c20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c24:	00d0      	lsls	r0, r2, #3
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	1912      	adds	r2, r2, r4
 8003c2c:	eb45 0303 	adc.w	r3, r5, r3
 8003c30:	f04f 0000 	mov.w	r0, #0
 8003c34:	f04f 0100 	mov.w	r1, #0
 8003c38:	0299      	lsls	r1, r3, #10
 8003c3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c3e:	0290      	lsls	r0, r2, #10
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	f7fc ff76 	bl	8000b40 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	3301      	adds	r3, #1
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	60bb      	str	r3, [r7, #8]
      break;
 8003c76:	e002      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x164>)
 8003c7a:	60bb      	str	r3, [r7, #8]
      break;
 8003c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bdb0      	pop	{r4, r5, r7, pc}
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	00f42400 	.word	0x00f42400
 8003c90:	017d7840 	.word	0x017d7840

08003c94 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <HAL_RCC_GetHCLKFreq+0x14>)
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20000014 	.word	0x20000014

08003518 <HAL_RCC_GetPCLK1Freq>:
=======
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c98:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000014 	.word	0x20000014

08003cac <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800351c:	f7ff fff0 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8003520:	4602      	mov	r2, r0
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	0a9b      	lsrs	r3, r3, #10
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	4903      	ldr	r1, [pc, #12]	; (800353c <HAL_RCC_GetPCLK1Freq+0x24>)
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40023800 	.word	0x40023800
 800353c:	08005670 	.word	0x08005670

08003540 <HAL_RCC_GetPCLK2Freq>:
=======
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cb0:	f7ff fff0 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0a9b      	lsrs	r3, r3, #10
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4903      	ldr	r1, [pc, #12]	; (8003cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	08005e28 	.word	0x08005e28

08003cd4 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003544:	f7ff ffdc 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	0b5b      	lsrs	r3, r3, #13
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4903      	ldr	r1, [pc, #12]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40023800 	.word	0x40023800
 8003564:	08005670 	.word	0x08005670

08003568 <HAL_TIM_Base_Init>:
=======
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cd8:	f7ff ffdc 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	0b5b      	lsrs	r3, r3, #13
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4903      	ldr	r1, [pc, #12]	; (8003cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cea:	5ccb      	ldrb	r3, [r1, r3]
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	08005e28 	.word	0x08005e28

08003cfc <HAL_TIM_Base_Init>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e041      	b.n	80035fe <HAL_TIM_Base_Init+0x96>
=======
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e041      	b.n	8003d92 <HAL_TIM_Base_Init+0x96>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe fc46 	bl	8001e20 <HAL_TIM_Base_MspInit>
=======
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fe f8d4 	bl	8001ed0 <HAL_TIM_Base_MspInit>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4619      	mov	r1, r3
 80035a6:	4610      	mov	r0, r2
 80035a8:	f000 f95a 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_TIM_Base_Start>:
=======
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f000 f95a 	bl	8003ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_TIM_Base_Start>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
=======
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d001      	beq.n	8003620 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e046      	b.n	80036ae <HAL_TIM_Base_Start+0xa6>
=======
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d001      	beq.n	8003db4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e046      	b.n	8003e42 <HAL_TIM_Base_Start+0xa6>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a23      	ldr	r2, [pc, #140]	; (80036bc <HAL_TIM_Base_Start+0xb4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d022      	beq.n	8003678 <HAL_TIM_Base_Start+0x70>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d01d      	beq.n	8003678 <HAL_TIM_Base_Start+0x70>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <HAL_TIM_Base_Start+0xb8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d018      	beq.n	8003678 <HAL_TIM_Base_Start+0x70>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <HAL_TIM_Base_Start+0xbc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_TIM_Base_Start+0x70>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <HAL_TIM_Base_Start+0xc0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_TIM_Base_Start+0x70>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <HAL_TIM_Base_Start+0xc4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_TIM_Base_Start+0x70>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_TIM_Base_Start+0xc8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_TIM_Base_Start+0x70>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_TIM_Base_Start+0xcc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d111      	bne.n	800369c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b06      	cmp	r3, #6
 8003688:	d010      	beq.n	80036ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369a:	e007      	b.n	80036ac <HAL_TIM_Base_Start+0xa4>
=======
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <HAL_TIM_Base_Start+0xb4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d022      	beq.n	8003e0c <HAL_TIM_Base_Start+0x70>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dce:	d01d      	beq.n	8003e0c <HAL_TIM_Base_Start+0x70>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <HAL_TIM_Base_Start+0xb8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d018      	beq.n	8003e0c <HAL_TIM_Base_Start+0x70>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <HAL_TIM_Base_Start+0xbc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d013      	beq.n	8003e0c <HAL_TIM_Base_Start+0x70>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <HAL_TIM_Base_Start+0xc0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00e      	beq.n	8003e0c <HAL_TIM_Base_Start+0x70>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1b      	ldr	r2, [pc, #108]	; (8003e60 <HAL_TIM_Base_Start+0xc4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d009      	beq.n	8003e0c <HAL_TIM_Base_Start+0x70>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <HAL_TIM_Base_Start+0xc8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_TIM_Base_Start+0x70>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <HAL_TIM_Base_Start+0xcc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d111      	bne.n	8003e30 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b06      	cmp	r3, #6
 8003e1c:	d010      	beq.n	8003e40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2e:	e007      	b.n	8003e40 <HAL_TIM_Base_Start+0xa4>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
=======
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40010000 	.word	0x40010000
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800
 80036c8:	40000c00 	.word	0x40000c00
 80036cc:	40010400 	.word	0x40010400
 80036d0:	40014000 	.word	0x40014000
 80036d4:	40001800 	.word	0x40001800

080036d8 <HAL_TIM_ConfigClockSource>:
=======
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40000400 	.word	0x40000400
 8003e58:	40000800 	.word	0x40000800
 8003e5c:	40000c00 	.word	0x40000c00
 8003e60:	40010400 	.word	0x40010400
 8003e64:	40014000 	.word	0x40014000
 8003e68:	40001800 	.word	0x40001800

08003e6c <HAL_TIM_ConfigClockSource>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
=======
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_TIM_ConfigClockSource+0x18>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e0b3      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x180>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_TIM_ConfigClockSource+0x18>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e0b3      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x180>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800370e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003716:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003728:	d03e      	beq.n	80037a8 <HAL_TIM_ConfigClockSource+0xd0>
 800372a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372e:	f200 8087 	bhi.w	8003840 <HAL_TIM_ConfigClockSource+0x168>
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003736:	f000 8085 	beq.w	8003844 <HAL_TIM_ConfigClockSource+0x16c>
 800373a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373e:	d87f      	bhi.n	8003840 <HAL_TIM_ConfigClockSource+0x168>
 8003740:	2b70      	cmp	r3, #112	; 0x70
 8003742:	d01a      	beq.n	800377a <HAL_TIM_ConfigClockSource+0xa2>
 8003744:	2b70      	cmp	r3, #112	; 0x70
 8003746:	d87b      	bhi.n	8003840 <HAL_TIM_ConfigClockSource+0x168>
 8003748:	2b60      	cmp	r3, #96	; 0x60
 800374a:	d050      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x116>
 800374c:	2b60      	cmp	r3, #96	; 0x60
 800374e:	d877      	bhi.n	8003840 <HAL_TIM_ConfigClockSource+0x168>
 8003750:	2b50      	cmp	r3, #80	; 0x50
 8003752:	d03c      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0xf6>
 8003754:	2b50      	cmp	r3, #80	; 0x50
 8003756:	d873      	bhi.n	8003840 <HAL_TIM_ConfigClockSource+0x168>
 8003758:	2b40      	cmp	r3, #64	; 0x40
 800375a:	d058      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x136>
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d86f      	bhi.n	8003840 <HAL_TIM_ConfigClockSource+0x168>
 8003760:	2b30      	cmp	r3, #48	; 0x30
 8003762:	d064      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x156>
 8003764:	2b30      	cmp	r3, #48	; 0x30
 8003766:	d86b      	bhi.n	8003840 <HAL_TIM_ConfigClockSource+0x168>
 8003768:	2b20      	cmp	r3, #32
 800376a:	d060      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x156>
 800376c:	2b20      	cmp	r3, #32
 800376e:	d867      	bhi.n	8003840 <HAL_TIM_ConfigClockSource+0x168>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d05c      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x156>
 8003774:	2b10      	cmp	r3, #16
 8003776:	d05a      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x156>
=======
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ea2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebc:	d03e      	beq.n	8003f3c <HAL_TIM_ConfigClockSource+0xd0>
 8003ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec2:	f200 8087 	bhi.w	8003fd4 <HAL_TIM_ConfigClockSource+0x168>
 8003ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eca:	f000 8085 	beq.w	8003fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed2:	d87f      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x168>
 8003ed4:	2b70      	cmp	r3, #112	; 0x70
 8003ed6:	d01a      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0xa2>
 8003ed8:	2b70      	cmp	r3, #112	; 0x70
 8003eda:	d87b      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x168>
 8003edc:	2b60      	cmp	r3, #96	; 0x60
 8003ede:	d050      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x116>
 8003ee0:	2b60      	cmp	r3, #96	; 0x60
 8003ee2:	d877      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x168>
 8003ee4:	2b50      	cmp	r3, #80	; 0x50
 8003ee6:	d03c      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0xf6>
 8003ee8:	2b50      	cmp	r3, #80	; 0x50
 8003eea:	d873      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x168>
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d058      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x136>
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d86f      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x168>
 8003ef4:	2b30      	cmp	r3, #48	; 0x30
 8003ef6:	d064      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x156>
 8003ef8:	2b30      	cmp	r3, #48	; 0x30
 8003efa:	d86b      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x168>
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d060      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x156>
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d867      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x168>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d05c      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x156>
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d05a      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
<<<<<<< HEAD
 8003778:	e062      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6899      	ldr	r1, [r3, #8]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f000 f983 	bl	8003a94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800379c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	609a      	str	r2, [r3, #8]
      break;
 80037a6:	e04e      	b.n	8003846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	6899      	ldr	r1, [r3, #8]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f000 f96c 	bl	8003a94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ca:	609a      	str	r2, [r3, #8]
      break;
 80037cc:	e03b      	b.n	8003846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	461a      	mov	r2, r3
 80037dc:	f000 f8e0 	bl	80039a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2150      	movs	r1, #80	; 0x50
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f939 	bl	8003a5e <TIM_ITRx_SetConfig>
      break;
 80037ec:	e02b      	b.n	8003846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6859      	ldr	r1, [r3, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	461a      	mov	r2, r3
 80037fc:	f000 f8ff 	bl	80039fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2160      	movs	r1, #96	; 0x60
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f929 	bl	8003a5e <TIM_ITRx_SetConfig>
      break;
 800380c:	e01b      	b.n	8003846 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	461a      	mov	r2, r3
 800381c:	f000 f8c0 	bl	80039a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2140      	movs	r1, #64	; 0x40
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f919 	bl	8003a5e <TIM_ITRx_SetConfig>
      break;
 800382c:	e00b      	b.n	8003846 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f000 f910 	bl	8003a5e <TIM_ITRx_SetConfig>
        break;
 800383e:	e002      	b.n	8003846 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003840:	bf00      	nop
 8003842:	e000      	b.n	8003846 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003844:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <TIM_Base_SetConfig>:
=======
 8003f0c:	e062      	b.n	8003fd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6899      	ldr	r1, [r3, #8]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f000 f983 	bl	8004228 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	609a      	str	r2, [r3, #8]
      break;
 8003f3a:	e04e      	b.n	8003fda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	6899      	ldr	r1, [r3, #8]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f000 f96c 	bl	8004228 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f5e:	609a      	str	r2, [r3, #8]
      break;
 8003f60:	e03b      	b.n	8003fda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f000 f8e0 	bl	8004134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2150      	movs	r1, #80	; 0x50
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f939 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003f80:	e02b      	b.n	8003fda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6859      	ldr	r1, [r3, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f000 f8ff 	bl	8004192 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2160      	movs	r1, #96	; 0x60
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f929 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003fa0:	e01b      	b.n	8003fda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 f8c0 	bl	8004134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2140      	movs	r1, #64	; 0x40
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f919 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e00b      	b.n	8003fda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f000 f910 	bl	80041f2 <TIM_ITRx_SetConfig>
        break;
 8003fd2:	e002      	b.n	8003fda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fd4:	bf00      	nop
 8003fd6:	e000      	b.n	8003fda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <TIM_Base_SetConfig>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a40      	ldr	r2, [pc, #256]	; (8003974 <TIM_Base_SetConfig+0x114>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d00f      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3d      	ldr	r2, [pc, #244]	; (8003978 <TIM_Base_SetConfig+0x118>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3c      	ldr	r2, [pc, #240]	; (800397c <TIM_Base_SetConfig+0x11c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3b      	ldr	r2, [pc, #236]	; (8003980 <TIM_Base_SetConfig+0x120>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3a      	ldr	r2, [pc, #232]	; (8003984 <TIM_Base_SetConfig+0x124>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <TIM_Base_SetConfig+0x114>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d02b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d027      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <TIM_Base_SetConfig+0x118>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d023      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2b      	ldr	r2, [pc, #172]	; (800397c <TIM_Base_SetConfig+0x11c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01f      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2a      	ldr	r2, [pc, #168]	; (8003980 <TIM_Base_SetConfig+0x120>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <TIM_Base_SetConfig+0x124>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d017      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a28      	ldr	r2, [pc, #160]	; (8003988 <TIM_Base_SetConfig+0x128>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a27      	ldr	r2, [pc, #156]	; (800398c <TIM_Base_SetConfig+0x12c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00f      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a26      	ldr	r2, [pc, #152]	; (8003990 <TIM_Base_SetConfig+0x130>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a25      	ldr	r2, [pc, #148]	; (8003994 <TIM_Base_SetConfig+0x134>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a24      	ldr	r2, [pc, #144]	; (8003998 <TIM_Base_SetConfig+0x138>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d003      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a23      	ldr	r2, [pc, #140]	; (800399c <TIM_Base_SetConfig+0x13c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d108      	bne.n	8003924 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
=======
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a40      	ldr	r2, [pc, #256]	; (8004108 <TIM_Base_SetConfig+0x114>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004012:	d00f      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a3d      	ldr	r2, [pc, #244]	; (800410c <TIM_Base_SetConfig+0x118>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00b      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <TIM_Base_SetConfig+0x11c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d007      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a3b      	ldr	r2, [pc, #236]	; (8004114 <TIM_Base_SetConfig+0x120>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a3a      	ldr	r2, [pc, #232]	; (8004118 <TIM_Base_SetConfig+0x124>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d108      	bne.n	8004046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2f      	ldr	r2, [pc, #188]	; (8004108 <TIM_Base_SetConfig+0x114>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02b      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d027      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a2c      	ldr	r2, [pc, #176]	; (800410c <TIM_Base_SetConfig+0x118>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d023      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <TIM_Base_SetConfig+0x11c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01f      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <TIM_Base_SetConfig+0x120>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01b      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a29      	ldr	r2, [pc, #164]	; (8004118 <TIM_Base_SetConfig+0x124>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d017      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a28      	ldr	r2, [pc, #160]	; (800411c <TIM_Base_SetConfig+0x128>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a27      	ldr	r2, [pc, #156]	; (8004120 <TIM_Base_SetConfig+0x12c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00f      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <TIM_Base_SetConfig+0x130>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00b      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a25      	ldr	r2, [pc, #148]	; (8004128 <TIM_Base_SetConfig+0x134>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a24      	ldr	r2, [pc, #144]	; (800412c <TIM_Base_SetConfig+0x138>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a23      	ldr	r2, [pc, #140]	; (8004130 <TIM_Base_SetConfig+0x13c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d108      	bne.n	80040b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <TIM_Base_SetConfig+0x114>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <TIM_Base_SetConfig+0x124>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <TIM_Base_SetConfig+0x114>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0xf8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <TIM_Base_SetConfig+0x124>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d103      	bne.n	80040f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	40000c00 	.word	0x40000c00
 8003984:	40010400 	.word	0x40010400
 8003988:	40014000 	.word	0x40014000
 800398c:	40014400 	.word	0x40014400
 8003990:	40014800 	.word	0x40014800
 8003994:	40001800 	.word	0x40001800
 8003998:	40001c00 	.word	0x40001c00
 800399c:	40002000 	.word	0x40002000

080039a0 <TIM_TI1_ConfigInputStage>:
=======
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	615a      	str	r2, [r3, #20]
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40010000 	.word	0x40010000
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40010400 	.word	0x40010400
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800
 8004128:	40001800 	.word	0x40001800
 800412c:	40001c00 	.word	0x40001c00
 8004130:	40002000 	.word	0x40002000

08004134 <TIM_TI1_ConfigInputStage>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
=======
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f023 0201 	bic.w	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f023 030a 	bic.w	r3, r3, #10
 80039dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <TIM_TI2_ConfigInputStage>:
=======
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f023 0201 	bic.w	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800415e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 030a 	bic.w	r3, r3, #10
 8004170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	621a      	str	r2, [r3, #32]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <TIM_TI2_ConfigInputStage>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80039fe:	b480      	push	{r7}
 8003a00:	b087      	sub	sp, #28
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
=======
 8004192:	b480      	push	{r7}
 8004194:	b087      	sub	sp, #28
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f023 0210 	bic.w	r2, r3, #16
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	031b      	lsls	r3, r3, #12
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <TIM_ITRx_SetConfig>:
=======
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f023 0210 	bic.w	r2, r3, #16
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	031b      	lsls	r3, r3, #12
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <TIM_ITRx_SetConfig>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
=======
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f043 0307 	orr.w	r3, r3, #7
 8003a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	609a      	str	r2, [r3, #8]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <TIM_ETR_SetConfig>:
=======
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	f043 0307 	orr.w	r3, r3, #7
 8004214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <TIM_ETR_SetConfig>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	021a      	lsls	r2, r3, #8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	609a      	str	r2, [r3, #8]
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_UART_Init>:
=======
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	021a      	lsls	r2, r3, #8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	431a      	orrs	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4313      	orrs	r3, r2
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	609a      	str	r2, [r3, #8]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_UART_Init>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e03f      	b.n	8003b66 <HAL_UART_Init+0x92>
=======
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e03f      	b.n	80042fa <HAL_UART_Init+0x92>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fe f9b2 	bl	8001e64 <HAL_UART_MspInit>
=======
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd fe40 	bl	8001f14 <HAL_UART_MspInit>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f905 	bl	8003d28 <UART_SetConfig>
=======
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	; 0x24
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f905 	bl	80044bc <UART_SetConfig>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_UART_Transmit>:
=======
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_UART_Transmit>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b08a      	sub	sp, #40	; 0x28
 8003b72:	af02      	add	r7, sp, #8
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d17c      	bne.n	8003c88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_UART_Transmit+0x2c>
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e075      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
=======
 8004302:	b580      	push	{r7, lr}
 8004304:	b08a      	sub	sp, #40	; 0x28
 8004306:	af02      	add	r7, sp, #8
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b20      	cmp	r3, #32
 8004320:	d17c      	bne.n	800441c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_UART_Transmit+0x2c>
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e075      	b.n	800441e <HAL_UART_Transmit+0x11c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_UART_Transmit+0x3e>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e06e      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2221      	movs	r2, #33	; 0x21
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bc2:	f7fe fd83 	bl	80026cc <HAL_GetTick>
 8003bc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	88fa      	ldrh	r2, [r7, #6]
 8003bd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bdc:	d108      	bne.n	8003bf0 <HAL_UART_Transmit+0x82>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e003      	b.n	8003bf8 <HAL_UART_Transmit+0x8a>
=======
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_UART_Transmit+0x3e>
 800433c:	2302      	movs	r3, #2
 800433e:	e06e      	b.n	800441e <HAL_UART_Transmit+0x11c>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2221      	movs	r2, #33	; 0x21
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004356:	f7fe f96f 	bl	8002638 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004370:	d108      	bne.n	8004384 <HAL_UART_Transmit+0x82>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	e003      	b.n	800438c <HAL_UART_Transmit+0x8a>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
=======
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61bb      	str	r3, [r7, #24]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c00:	e02a      	b.n	8003c58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2180      	movs	r1, #128	; 0x80
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f840 	bl	8003c92 <UART_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e036      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	3302      	adds	r3, #2
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	e007      	b.n	8003c4a <HAL_UART_Transmit+0xdc>
=======
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004394:	e02a      	b.n	80043ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2200      	movs	r2, #0
 800439e:	2180      	movs	r1, #128	; 0x80
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f840 	bl	8004426 <UART_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e036      	b.n	800441e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	3302      	adds	r3, #2
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	e007      	b.n	80043de <HAL_UART_Transmit+0xdc>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	3301      	adds	r3, #1
 8003c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1cf      	bne.n	8003c02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2140      	movs	r1, #64	; 0x40
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f810 	bl	8003c92 <UART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e006      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
=======
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	3301      	adds	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1cf      	bne.n	8004396 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2140      	movs	r1, #64	; 0x40
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f810 	bl	8004426 <UART_WaitOnFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e006      	b.n	800441e <HAL_UART_Transmit+0x11c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
=======
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_UART_Transmit+0x11c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <UART_WaitOnFlagUntilTimeout>:
=======
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca2:	e02c      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003caa:	d028      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cb2:	f7fe fd0b 	bl	80026cc <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d21d      	bcs.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cd0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e00f      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d0c3      	beq.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004436:	e02c      	b.n	8004492 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800443e:	d028      	beq.n	8004492 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0x30>
 8004446:	f7fe f8f7 	bl	8002638 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	429a      	cmp	r2, r3
 8004454:	d21d      	bcs.n	8004492 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004464:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0201 	bic.w	r2, r2, #1
 8004474:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e00f      	b.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4013      	ands	r3, r2
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	429a      	cmp	r2, r3
 80044a0:	bf0c      	ite	eq
 80044a2:	2301      	moveq	r3, #1
 80044a4:	2300      	movne	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d0c3      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <UART_SetConfig>:
=======
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <UART_SetConfig>:
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2c:	b09f      	sub	sp, #124	; 0x7c
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	66f8      	str	r0, [r7, #108]	; 0x6c
=======
 80044bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c0:	b09f      	sub	sp, #124	; 0x7c
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	66f8      	str	r0, [r7, #108]	; 0x6c
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3e:	68d9      	ldr	r1, [r3, #12]
 8003d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	ea40 0301 	orr.w	r3, r0, r1
 8003d48:	6113      	str	r3, [r2, #16]
=======
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d2:	68d9      	ldr	r1, [r3, #12]
 80044d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	ea40 0301 	orr.w	r3, r0, r1
 80044dc:	6113      	str	r3, [r2, #16]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 8003d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d6c:	f021 010c 	bic.w	r1, r1, #12
 8003d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d76:	430b      	orrs	r3, r1
 8003d78:	60d3      	str	r3, [r2, #12]
=======
 80044de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	431a      	orrs	r2, r3
 80044ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004500:	f021 010c 	bic.w	r1, r1, #12
 8004504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800450a:	430b      	orrs	r3, r1
 800450c:	60d3      	str	r3, [r2, #12]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	6999      	ldr	r1, [r3, #24]
 8003d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	ea40 0301 	orr.w	r3, r0, r1
 8003d90:	6153      	str	r3, [r2, #20]
=======
 800450e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451a:	6999      	ldr	r1, [r3, #24]
 800451c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	ea40 0301 	orr.w	r3, r0, r1
 8004524:	6153      	str	r3, [r2, #20]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 8003d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4bc5      	ldr	r3, [pc, #788]	; (80040ac <UART_SetConfig+0x384>)
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d004      	beq.n	8003da6 <UART_SetConfig+0x7e>
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4bc3      	ldr	r3, [pc, #780]	; (80040b0 <UART_SetConfig+0x388>)
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d103      	bne.n	8003dae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003da6:	f7ff fbcb 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 8003daa:	6778      	str	r0, [r7, #116]	; 0x74
 8003dac:	e002      	b.n	8003db4 <UART_SetConfig+0x8c>
=======
 8004526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4bc5      	ldr	r3, [pc, #788]	; (8004840 <UART_SetConfig+0x384>)
 800452c:	429a      	cmp	r2, r3
 800452e:	d004      	beq.n	800453a <UART_SetConfig+0x7e>
 8004530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4bc3      	ldr	r3, [pc, #780]	; (8004844 <UART_SetConfig+0x388>)
 8004536:	429a      	cmp	r2, r3
 8004538:	d103      	bne.n	8004542 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800453a:	f7ff fbcb 	bl	8003cd4 <HAL_RCC_GetPCLK2Freq>
 800453e:	6778      	str	r0, [r7, #116]	; 0x74
 8004540:	e002      	b.n	8004548 <UART_SetConfig+0x8c>
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8003dae:	f7ff fbb3 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8003db2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbc:	f040 80b6 	bne.w	8003f2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc2:	461c      	mov	r4, r3
 8003dc4:	f04f 0500 	mov.w	r5, #0
 8003dc8:	4622      	mov	r2, r4
 8003dca:	462b      	mov	r3, r5
 8003dcc:	1891      	adds	r1, r2, r2
 8003dce:	6439      	str	r1, [r7, #64]	; 0x40
 8003dd0:	415b      	adcs	r3, r3
 8003dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dd8:	1912      	adds	r2, r2, r4
 8003dda:	eb45 0303 	adc.w	r3, r5, r3
 8003dde:	f04f 0000 	mov.w	r0, #0
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	00d9      	lsls	r1, r3, #3
 8003de8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dec:	00d0      	lsls	r0, r2, #3
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	1911      	adds	r1, r2, r4
 8003df4:	6639      	str	r1, [r7, #96]	; 0x60
 8003df6:	416b      	adcs	r3, r5
 8003df8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	1891      	adds	r1, r2, r2
 8003e06:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e08:	415b      	adcs	r3, r3
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e14:	f7fc fe94 	bl	8000b40 <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4ba5      	ldr	r3, [pc, #660]	; (80040b4 <UART_SetConfig+0x38c>)
 8003e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	011e      	lsls	r6, r3, #4
 8003e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e28:	461c      	mov	r4, r3
 8003e2a:	f04f 0500 	mov.w	r5, #0
 8003e2e:	4622      	mov	r2, r4
 8003e30:	462b      	mov	r3, r5
 8003e32:	1891      	adds	r1, r2, r2
 8003e34:	6339      	str	r1, [r7, #48]	; 0x30
 8003e36:	415b      	adcs	r3, r3
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e3e:	1912      	adds	r2, r2, r4
 8003e40:	eb45 0303 	adc.w	r3, r5, r3
 8003e44:	f04f 0000 	mov.w	r0, #0
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	00d9      	lsls	r1, r3, #3
 8003e4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e52:	00d0      	lsls	r0, r2, #3
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	1911      	adds	r1, r2, r4
 8003e5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e5c:	416b      	adcs	r3, r5
 8003e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	1891      	adds	r1, r2, r2
 8003e6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e6e:	415b      	adcs	r3, r3
 8003e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e7a:	f7fc fe61 	bl	8000b40 <__aeabi_uldivmod>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4b8c      	ldr	r3, [pc, #560]	; (80040b4 <UART_SetConfig+0x38c>)
 8003e84:	fba3 1302 	umull	r1, r3, r3, r2
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	2164      	movs	r1, #100	; 0x64
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	3332      	adds	r3, #50	; 0x32
 8003e96:	4a87      	ldr	r2, [pc, #540]	; (80040b4 <UART_SetConfig+0x38c>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ea4:	441e      	add	r6, r3
 8003ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	1894      	adds	r4, r2, r2
 8003eb4:	623c      	str	r4, [r7, #32]
 8003eb6:	415b      	adcs	r3, r3
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ebe:	1812      	adds	r2, r2, r0
 8003ec0:	eb41 0303 	adc.w	r3, r1, r3
 8003ec4:	f04f 0400 	mov.w	r4, #0
 8003ec8:	f04f 0500 	mov.w	r5, #0
 8003ecc:	00dd      	lsls	r5, r3, #3
 8003ece:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ed2:	00d4      	lsls	r4, r2, #3
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	1814      	adds	r4, r2, r0
 8003eda:	653c      	str	r4, [r7, #80]	; 0x50
 8003edc:	414b      	adcs	r3, r1
 8003ede:	657b      	str	r3, [r7, #84]	; 0x54
 8003ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	1891      	adds	r1, r2, r2
 8003eec:	61b9      	str	r1, [r7, #24]
 8003eee:	415b      	adcs	r3, r3
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ef6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003efa:	f7fc fe21 	bl	8000b40 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4b6c      	ldr	r3, [pc, #432]	; (80040b4 <UART_SetConfig+0x38c>)
 8003f04:	fba3 1302 	umull	r1, r3, r3, r2
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	2164      	movs	r1, #100	; 0x64
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	3332      	adds	r3, #50	; 0x32
 8003f16:	4a67      	ldr	r2, [pc, #412]	; (80040b4 <UART_SetConfig+0x38c>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	f003 0207 	and.w	r2, r3, #7
 8003f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4432      	add	r2, r6
 8003f28:	609a      	str	r2, [r3, #8]
=======
 8004542:	f7ff fbb3 	bl	8003cac <HAL_RCC_GetPCLK1Freq>
 8004546:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004550:	f040 80b6 	bne.w	80046c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004556:	461c      	mov	r4, r3
 8004558:	f04f 0500 	mov.w	r5, #0
 800455c:	4622      	mov	r2, r4
 800455e:	462b      	mov	r3, r5
 8004560:	1891      	adds	r1, r2, r2
 8004562:	6439      	str	r1, [r7, #64]	; 0x40
 8004564:	415b      	adcs	r3, r3
 8004566:	647b      	str	r3, [r7, #68]	; 0x44
 8004568:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800456c:	1912      	adds	r2, r2, r4
 800456e:	eb45 0303 	adc.w	r3, r5, r3
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f04f 0100 	mov.w	r1, #0
 800457a:	00d9      	lsls	r1, r3, #3
 800457c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004580:	00d0      	lsls	r0, r2, #3
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	1911      	adds	r1, r2, r4
 8004588:	6639      	str	r1, [r7, #96]	; 0x60
 800458a:	416b      	adcs	r3, r5
 800458c:	667b      	str	r3, [r7, #100]	; 0x64
 800458e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	461a      	mov	r2, r3
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	1891      	adds	r1, r2, r2
 800459a:	63b9      	str	r1, [r7, #56]	; 0x38
 800459c:	415b      	adcs	r3, r3
 800459e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80045a8:	f7fc faca 	bl	8000b40 <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4ba5      	ldr	r3, [pc, #660]	; (8004848 <UART_SetConfig+0x38c>)
 80045b2:	fba3 2302 	umull	r2, r3, r3, r2
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	011e      	lsls	r6, r3, #4
 80045ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045bc:	461c      	mov	r4, r3
 80045be:	f04f 0500 	mov.w	r5, #0
 80045c2:	4622      	mov	r2, r4
 80045c4:	462b      	mov	r3, r5
 80045c6:	1891      	adds	r1, r2, r2
 80045c8:	6339      	str	r1, [r7, #48]	; 0x30
 80045ca:	415b      	adcs	r3, r3
 80045cc:	637b      	str	r3, [r7, #52]	; 0x34
 80045ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045d2:	1912      	adds	r2, r2, r4
 80045d4:	eb45 0303 	adc.w	r3, r5, r3
 80045d8:	f04f 0000 	mov.w	r0, #0
 80045dc:	f04f 0100 	mov.w	r1, #0
 80045e0:	00d9      	lsls	r1, r3, #3
 80045e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045e6:	00d0      	lsls	r0, r2, #3
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	1911      	adds	r1, r2, r4
 80045ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80045f0:	416b      	adcs	r3, r5
 80045f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	461a      	mov	r2, r3
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	1891      	adds	r1, r2, r2
 8004600:	62b9      	str	r1, [r7, #40]	; 0x28
 8004602:	415b      	adcs	r3, r3
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800460a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800460e:	f7fc fa97 	bl	8000b40 <__aeabi_uldivmod>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4b8c      	ldr	r3, [pc, #560]	; (8004848 <UART_SetConfig+0x38c>)
 8004618:	fba3 1302 	umull	r1, r3, r3, r2
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	2164      	movs	r1, #100	; 0x64
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	3332      	adds	r3, #50	; 0x32
 800462a:	4a87      	ldr	r2, [pc, #540]	; (8004848 <UART_SetConfig+0x38c>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004638:	441e      	add	r6, r3
 800463a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800463c:	4618      	mov	r0, r3
 800463e:	f04f 0100 	mov.w	r1, #0
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	1894      	adds	r4, r2, r2
 8004648:	623c      	str	r4, [r7, #32]
 800464a:	415b      	adcs	r3, r3
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
 800464e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004652:	1812      	adds	r2, r2, r0
 8004654:	eb41 0303 	adc.w	r3, r1, r3
 8004658:	f04f 0400 	mov.w	r4, #0
 800465c:	f04f 0500 	mov.w	r5, #0
 8004660:	00dd      	lsls	r5, r3, #3
 8004662:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004666:	00d4      	lsls	r4, r2, #3
 8004668:	4622      	mov	r2, r4
 800466a:	462b      	mov	r3, r5
 800466c:	1814      	adds	r4, r2, r0
 800466e:	653c      	str	r4, [r7, #80]	; 0x50
 8004670:	414b      	adcs	r3, r1
 8004672:	657b      	str	r3, [r7, #84]	; 0x54
 8004674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	461a      	mov	r2, r3
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	1891      	adds	r1, r2, r2
 8004680:	61b9      	str	r1, [r7, #24]
 8004682:	415b      	adcs	r3, r3
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800468a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800468e:	f7fc fa57 	bl	8000b40 <__aeabi_uldivmod>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4b6c      	ldr	r3, [pc, #432]	; (8004848 <UART_SetConfig+0x38c>)
 8004698:	fba3 1302 	umull	r1, r3, r3, r2
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	2164      	movs	r1, #100	; 0x64
 80046a0:	fb01 f303 	mul.w	r3, r1, r3
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	3332      	adds	r3, #50	; 0x32
 80046aa:	4a67      	ldr	r2, [pc, #412]	; (8004848 <UART_SetConfig+0x38c>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	095b      	lsrs	r3, r3, #5
 80046b2:	f003 0207 	and.w	r2, r3, #7
 80046b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4432      	add	r2, r6
 80046bc:	609a      	str	r2, [r3, #8]
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
 8003f2a:	e0b9      	b.n	80040a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f2e:	461c      	mov	r4, r3
 8003f30:	f04f 0500 	mov.w	r5, #0
 8003f34:	4622      	mov	r2, r4
 8003f36:	462b      	mov	r3, r5
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	6139      	str	r1, [r7, #16]
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f44:	1912      	adds	r2, r2, r4
 8003f46:	eb45 0303 	adc.w	r3, r5, r3
 8003f4a:	f04f 0000 	mov.w	r0, #0
 8003f4e:	f04f 0100 	mov.w	r1, #0
 8003f52:	00d9      	lsls	r1, r3, #3
 8003f54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f58:	00d0      	lsls	r0, r2, #3
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	eb12 0804 	adds.w	r8, r2, r4
 8003f62:	eb43 0905 	adc.w	r9, r3, r5
 8003f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f04f 0100 	mov.w	r1, #0
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	008b      	lsls	r3, r1, #2
 8003f7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f7e:	0082      	lsls	r2, r0, #2
 8003f80:	4640      	mov	r0, r8
 8003f82:	4649      	mov	r1, r9
 8003f84:	f7fc fddc 	bl	8000b40 <__aeabi_uldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4b49      	ldr	r3, [pc, #292]	; (80040b4 <UART_SetConfig+0x38c>)
 8003f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	011e      	lsls	r6, r3, #4
 8003f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	1894      	adds	r4, r2, r2
 8003fa4:	60bc      	str	r4, [r7, #8]
 8003fa6:	415b      	adcs	r3, r3
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fae:	1812      	adds	r2, r2, r0
 8003fb0:	eb41 0303 	adc.w	r3, r1, r3
 8003fb4:	f04f 0400 	mov.w	r4, #0
 8003fb8:	f04f 0500 	mov.w	r5, #0
 8003fbc:	00dd      	lsls	r5, r3, #3
 8003fbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fc2:	00d4      	lsls	r4, r2, #3
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	462b      	mov	r3, r5
 8003fc8:	1814      	adds	r4, r2, r0
 8003fca:	64bc      	str	r4, [r7, #72]	; 0x48
 8003fcc:	414b      	adcs	r3, r1
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	008b      	lsls	r3, r1, #2
 8003fe4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fe8:	0082      	lsls	r2, r0, #2
 8003fea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003fee:	f7fc fda7 	bl	8000b40 <__aeabi_uldivmod>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4b2f      	ldr	r3, [pc, #188]	; (80040b4 <UART_SetConfig+0x38c>)
 8003ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	2164      	movs	r1, #100	; 0x64
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	3332      	adds	r3, #50	; 0x32
 800400a:	4a2a      	ldr	r2, [pc, #168]	; (80040b4 <UART_SetConfig+0x38c>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004016:	441e      	add	r6, r3
 8004018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800401a:	4618      	mov	r0, r3
 800401c:	f04f 0100 	mov.w	r1, #0
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	1894      	adds	r4, r2, r2
 8004026:	603c      	str	r4, [r7, #0]
 8004028:	415b      	adcs	r3, r3
 800402a:	607b      	str	r3, [r7, #4]
 800402c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004030:	1812      	adds	r2, r2, r0
 8004032:	eb41 0303 	adc.w	r3, r1, r3
 8004036:	f04f 0400 	mov.w	r4, #0
 800403a:	f04f 0500 	mov.w	r5, #0
 800403e:	00dd      	lsls	r5, r3, #3
 8004040:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004044:	00d4      	lsls	r4, r2, #3
 8004046:	4622      	mov	r2, r4
 8004048:	462b      	mov	r3, r5
 800404a:	eb12 0a00 	adds.w	sl, r2, r0
 800404e:	eb43 0b01 	adc.w	fp, r3, r1
 8004052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4618      	mov	r0, r3
 8004058:	f04f 0100 	mov.w	r1, #0
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	008b      	lsls	r3, r1, #2
 8004066:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800406a:	0082      	lsls	r2, r0, #2
 800406c:	4650      	mov	r0, sl
 800406e:	4659      	mov	r1, fp
 8004070:	f7fc fd66 	bl	8000b40 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <UART_SetConfig+0x38c>)
 800407a:	fba3 1302 	umull	r1, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2164      	movs	r1, #100	; 0x64
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	3332      	adds	r3, #50	; 0x32
 800408c:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <UART_SetConfig+0x38c>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 020f 	and.w	r2, r3, #15
 8004098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4432      	add	r2, r6
 800409e:	609a      	str	r2, [r3, #8]
}
 80040a0:	bf00      	nop
 80040a2:	377c      	adds	r7, #124	; 0x7c
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	40011000 	.word	0x40011000
 80040b0:	40011400 	.word	0x40011400
 80040b4:	51eb851f 	.word	0x51eb851f

080040b8 <__libc_init_array>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4d0d      	ldr	r5, [pc, #52]	; (80040f0 <__libc_init_array+0x38>)
 80040bc:	4c0d      	ldr	r4, [pc, #52]	; (80040f4 <__libc_init_array+0x3c>)
 80040be:	1b64      	subs	r4, r4, r5
 80040c0:	10a4      	asrs	r4, r4, #2
 80040c2:	2600      	movs	r6, #0
 80040c4:	42a6      	cmp	r6, r4
 80040c6:	d109      	bne.n	80040dc <__libc_init_array+0x24>
 80040c8:	4d0b      	ldr	r5, [pc, #44]	; (80040f8 <__libc_init_array+0x40>)
 80040ca:	4c0c      	ldr	r4, [pc, #48]	; (80040fc <__libc_init_array+0x44>)
 80040cc:	f001 f9d8 	bl	8005480 <_init>
 80040d0:	1b64      	subs	r4, r4, r5
 80040d2:	10a4      	asrs	r4, r4, #2
 80040d4:	2600      	movs	r6, #0
 80040d6:	42a6      	cmp	r6, r4
 80040d8:	d105      	bne.n	80040e6 <__libc_init_array+0x2e>
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e0:	4798      	blx	r3
 80040e2:	3601      	adds	r6, #1
 80040e4:	e7ee      	b.n	80040c4 <__libc_init_array+0xc>
 80040e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ea:	4798      	blx	r3
 80040ec:	3601      	adds	r6, #1
 80040ee:	e7f2      	b.n	80040d6 <__libc_init_array+0x1e>
 80040f0:	080056c8 	.word	0x080056c8
 80040f4:	080056c8 	.word	0x080056c8
 80040f8:	080056c8 	.word	0x080056c8
 80040fc:	080056cc 	.word	0x080056cc

08004100 <log>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	ed2d 8b02 	vpush	{d8}
 8004106:	ec55 4b10 	vmov	r4, r5, d0
 800410a:	f000 f8f1 	bl	80042f0 <__ieee754_log>
 800410e:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <log+0x88>)
 8004110:	eeb0 8a40 	vmov.f32	s16, s0
 8004114:	eef0 8a60 	vmov.f32	s17, s1
 8004118:	f993 3000 	ldrsb.w	r3, [r3]
 800411c:	3301      	adds	r3, #1
 800411e:	d01a      	beq.n	8004156 <log+0x56>
 8004120:	4622      	mov	r2, r4
 8004122:	462b      	mov	r3, r5
 8004124:	4620      	mov	r0, r4
 8004126:	4629      	mov	r1, r5
 8004128:	f7fc fca4 	bl	8000a74 <__aeabi_dcmpun>
 800412c:	b998      	cbnz	r0, 8004156 <log+0x56>
 800412e:	2200      	movs	r2, #0
 8004130:	2300      	movs	r3, #0
 8004132:	4620      	mov	r0, r4
 8004134:	4629      	mov	r1, r5
 8004136:	f7fc fc93 	bl	8000a60 <__aeabi_dcmpgt>
 800413a:	b960      	cbnz	r0, 8004156 <log+0x56>
 800413c:	2200      	movs	r2, #0
 800413e:	2300      	movs	r3, #0
 8004140:	4620      	mov	r0, r4
 8004142:	4629      	mov	r1, r5
 8004144:	f7fc fc64 	bl	8000a10 <__aeabi_dcmpeq>
 8004148:	b160      	cbz	r0, 8004164 <log+0x64>
 800414a:	f001 f993 	bl	8005474 <__errno>
 800414e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8004180 <log+0x80>
 8004152:	2322      	movs	r3, #34	; 0x22
 8004154:	6003      	str	r3, [r0, #0]
 8004156:	eeb0 0a48 	vmov.f32	s0, s16
 800415a:	eef0 0a68 	vmov.f32	s1, s17
 800415e:	ecbd 8b02 	vpop	{d8}
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	f001 f986 	bl	8005474 <__errno>
 8004168:	ecbd 8b02 	vpop	{d8}
 800416c:	2321      	movs	r3, #33	; 0x21
 800416e:	6003      	str	r3, [r0, #0]
 8004170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004174:	4805      	ldr	r0, [pc, #20]	; (800418c <log+0x8c>)
 8004176:	f001 b863 	b.w	8005240 <nan>
 800417a:	bf00      	nop
 800417c:	f3af 8000 	nop.w
 8004180:	00000000 	.word	0x00000000
 8004184:	fff00000 	.word	0xfff00000
 8004188:	20000084 	.word	0x20000084
 800418c:	08005678 	.word	0x08005678

08004190 <pow>:
 8004190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004194:	ec59 8b10 	vmov	r8, r9, d0
 8004198:	ec57 6b11 	vmov	r6, r7, d1
 800419c:	f000 fa64 	bl	8004668 <__ieee754_pow>
 80041a0:	4b4e      	ldr	r3, [pc, #312]	; (80042dc <pow+0x14c>)
 80041a2:	f993 3000 	ldrsb.w	r3, [r3]
 80041a6:	3301      	adds	r3, #1
 80041a8:	ec55 4b10 	vmov	r4, r5, d0
 80041ac:	d015      	beq.n	80041da <pow+0x4a>
 80041ae:	4632      	mov	r2, r6
 80041b0:	463b      	mov	r3, r7
 80041b2:	4630      	mov	r0, r6
 80041b4:	4639      	mov	r1, r7
 80041b6:	f7fc fc5d 	bl	8000a74 <__aeabi_dcmpun>
 80041ba:	b970      	cbnz	r0, 80041da <pow+0x4a>
 80041bc:	4642      	mov	r2, r8
 80041be:	464b      	mov	r3, r9
 80041c0:	4640      	mov	r0, r8
 80041c2:	4649      	mov	r1, r9
 80041c4:	f7fc fc56 	bl	8000a74 <__aeabi_dcmpun>
 80041c8:	2200      	movs	r2, #0
 80041ca:	2300      	movs	r3, #0
 80041cc:	b148      	cbz	r0, 80041e2 <pow+0x52>
 80041ce:	4630      	mov	r0, r6
 80041d0:	4639      	mov	r1, r7
 80041d2:	f7fc fc1d 	bl	8000a10 <__aeabi_dcmpeq>
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d17d      	bne.n	80042d6 <pow+0x146>
 80041da:	ec45 4b10 	vmov	d0, r4, r5
 80041de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041e2:	4640      	mov	r0, r8
 80041e4:	4649      	mov	r1, r9
 80041e6:	f7fc fc13 	bl	8000a10 <__aeabi_dcmpeq>
 80041ea:	b1e0      	cbz	r0, 8004226 <pow+0x96>
 80041ec:	2200      	movs	r2, #0
 80041ee:	2300      	movs	r3, #0
 80041f0:	4630      	mov	r0, r6
 80041f2:	4639      	mov	r1, r7
 80041f4:	f7fc fc0c 	bl	8000a10 <__aeabi_dcmpeq>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d16c      	bne.n	80042d6 <pow+0x146>
 80041fc:	ec47 6b10 	vmov	d0, r6, r7
 8004200:	f001 f811 	bl	8005226 <finite>
 8004204:	2800      	cmp	r0, #0
 8004206:	d0e8      	beq.n	80041da <pow+0x4a>
 8004208:	2200      	movs	r2, #0
 800420a:	2300      	movs	r3, #0
 800420c:	4630      	mov	r0, r6
 800420e:	4639      	mov	r1, r7
 8004210:	f7fc fc08 	bl	8000a24 <__aeabi_dcmplt>
 8004214:	2800      	cmp	r0, #0
 8004216:	d0e0      	beq.n	80041da <pow+0x4a>
 8004218:	f001 f92c 	bl	8005474 <__errno>
 800421c:	2321      	movs	r3, #33	; 0x21
 800421e:	6003      	str	r3, [r0, #0]
 8004220:	2400      	movs	r4, #0
 8004222:	4d2f      	ldr	r5, [pc, #188]	; (80042e0 <pow+0x150>)
 8004224:	e7d9      	b.n	80041da <pow+0x4a>
 8004226:	ec45 4b10 	vmov	d0, r4, r5
 800422a:	f000 fffc 	bl	8005226 <finite>
 800422e:	bbb8      	cbnz	r0, 80042a0 <pow+0x110>
 8004230:	ec49 8b10 	vmov	d0, r8, r9
 8004234:	f000 fff7 	bl	8005226 <finite>
 8004238:	b390      	cbz	r0, 80042a0 <pow+0x110>
 800423a:	ec47 6b10 	vmov	d0, r6, r7
 800423e:	f000 fff2 	bl	8005226 <finite>
 8004242:	b368      	cbz	r0, 80042a0 <pow+0x110>
 8004244:	4622      	mov	r2, r4
 8004246:	462b      	mov	r3, r5
 8004248:	4620      	mov	r0, r4
 800424a:	4629      	mov	r1, r5
 800424c:	f7fc fc12 	bl	8000a74 <__aeabi_dcmpun>
 8004250:	b160      	cbz	r0, 800426c <pow+0xdc>
 8004252:	f001 f90f 	bl	8005474 <__errno>
 8004256:	2321      	movs	r3, #33	; 0x21
 8004258:	6003      	str	r3, [r0, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	2300      	movs	r3, #0
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	f7fc fa97 	bl	8000794 <__aeabi_ddiv>
 8004266:	4604      	mov	r4, r0
 8004268:	460d      	mov	r5, r1
 800426a:	e7b6      	b.n	80041da <pow+0x4a>
 800426c:	f001 f902 	bl	8005474 <__errno>
 8004270:	2322      	movs	r3, #34	; 0x22
 8004272:	6003      	str	r3, [r0, #0]
 8004274:	2200      	movs	r2, #0
 8004276:	2300      	movs	r3, #0
 8004278:	4640      	mov	r0, r8
 800427a:	4649      	mov	r1, r9
 800427c:	f7fc fbd2 	bl	8000a24 <__aeabi_dcmplt>
 8004280:	2400      	movs	r4, #0
 8004282:	b158      	cbz	r0, 800429c <pow+0x10c>
 8004284:	ec47 6b10 	vmov	d0, r6, r7
 8004288:	f000 ffe2 	bl	8005250 <rint>
 800428c:	4632      	mov	r2, r6
 800428e:	ec51 0b10 	vmov	r0, r1, d0
 8004292:	463b      	mov	r3, r7
 8004294:	f7fc fbbc 	bl	8000a10 <__aeabi_dcmpeq>
 8004298:	2800      	cmp	r0, #0
 800429a:	d0c2      	beq.n	8004222 <pow+0x92>
 800429c:	4d11      	ldr	r5, [pc, #68]	; (80042e4 <pow+0x154>)
 800429e:	e79c      	b.n	80041da <pow+0x4a>
 80042a0:	2200      	movs	r2, #0
 80042a2:	2300      	movs	r3, #0
 80042a4:	4620      	mov	r0, r4
 80042a6:	4629      	mov	r1, r5
 80042a8:	f7fc fbb2 	bl	8000a10 <__aeabi_dcmpeq>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d094      	beq.n	80041da <pow+0x4a>
 80042b0:	ec49 8b10 	vmov	d0, r8, r9
 80042b4:	f000 ffb7 	bl	8005226 <finite>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d08e      	beq.n	80041da <pow+0x4a>
 80042bc:	ec47 6b10 	vmov	d0, r6, r7
 80042c0:	f000 ffb1 	bl	8005226 <finite>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	d088      	beq.n	80041da <pow+0x4a>
 80042c8:	f001 f8d4 	bl	8005474 <__errno>
 80042cc:	2322      	movs	r3, #34	; 0x22
 80042ce:	6003      	str	r3, [r0, #0]
 80042d0:	2400      	movs	r4, #0
 80042d2:	2500      	movs	r5, #0
 80042d4:	e781      	b.n	80041da <pow+0x4a>
 80042d6:	4d04      	ldr	r5, [pc, #16]	; (80042e8 <pow+0x158>)
 80042d8:	2400      	movs	r4, #0
 80042da:	e77e      	b.n	80041da <pow+0x4a>
 80042dc:	20000084 	.word	0x20000084
 80042e0:	fff00000 	.word	0xfff00000
 80042e4:	7ff00000 	.word	0x7ff00000
 80042e8:	3ff00000 	.word	0x3ff00000
 80042ec:	00000000 	.word	0x00000000

080042f0 <__ieee754_log>:
 80042f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f4:	ec51 0b10 	vmov	r0, r1, d0
 80042f8:	ed2d 8b04 	vpush	{d8-d9}
 80042fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004300:	b083      	sub	sp, #12
 8004302:	460d      	mov	r5, r1
 8004304:	da29      	bge.n	800435a <__ieee754_log+0x6a>
 8004306:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800430a:	4303      	orrs	r3, r0
 800430c:	ee10 2a10 	vmov	r2, s0
 8004310:	d10c      	bne.n	800432c <__ieee754_log+0x3c>
 8004312:	49cf      	ldr	r1, [pc, #828]	; (8004650 <__ieee754_log+0x360>)
 8004314:	2200      	movs	r2, #0
 8004316:	2300      	movs	r3, #0
 8004318:	2000      	movs	r0, #0
 800431a:	f7fc fa3b 	bl	8000794 <__aeabi_ddiv>
 800431e:	ec41 0b10 	vmov	d0, r0, r1
 8004322:	b003      	add	sp, #12
 8004324:	ecbd 8b04 	vpop	{d8-d9}
 8004328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432c:	2900      	cmp	r1, #0
 800432e:	da05      	bge.n	800433c <__ieee754_log+0x4c>
 8004330:	460b      	mov	r3, r1
 8004332:	f7fb ff4d 	bl	80001d0 <__aeabi_dsub>
 8004336:	2200      	movs	r2, #0
 8004338:	2300      	movs	r3, #0
 800433a:	e7ee      	b.n	800431a <__ieee754_log+0x2a>
 800433c:	4bc5      	ldr	r3, [pc, #788]	; (8004654 <__ieee754_log+0x364>)
 800433e:	2200      	movs	r2, #0
 8004340:	f7fc f8fe 	bl	8000540 <__aeabi_dmul>
 8004344:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8004348:	460d      	mov	r5, r1
 800434a:	4ac3      	ldr	r2, [pc, #780]	; (8004658 <__ieee754_log+0x368>)
 800434c:	4295      	cmp	r5, r2
 800434e:	dd06      	ble.n	800435e <__ieee754_log+0x6e>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	f7fb ff3e 	bl	80001d4 <__adddf3>
 8004358:	e7e1      	b.n	800431e <__ieee754_log+0x2e>
 800435a:	2300      	movs	r3, #0
 800435c:	e7f5      	b.n	800434a <__ieee754_log+0x5a>
 800435e:	152c      	asrs	r4, r5, #20
 8004360:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004364:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004368:	441c      	add	r4, r3
 800436a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800436e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8004372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004376:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800437a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800437e:	ea42 0105 	orr.w	r1, r2, r5
 8004382:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8004386:	2200      	movs	r2, #0
 8004388:	4bb4      	ldr	r3, [pc, #720]	; (800465c <__ieee754_log+0x36c>)
 800438a:	f7fb ff21 	bl	80001d0 <__aeabi_dsub>
 800438e:	1cab      	adds	r3, r5, #2
 8004390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004394:	2b02      	cmp	r3, #2
 8004396:	4682      	mov	sl, r0
 8004398:	468b      	mov	fp, r1
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	dc53      	bgt.n	8004448 <__ieee754_log+0x158>
 80043a0:	2300      	movs	r3, #0
 80043a2:	f7fc fb35 	bl	8000a10 <__aeabi_dcmpeq>
 80043a6:	b1d0      	cbz	r0, 80043de <__ieee754_log+0xee>
 80043a8:	2c00      	cmp	r4, #0
 80043aa:	f000 8122 	beq.w	80045f2 <__ieee754_log+0x302>
 80043ae:	4620      	mov	r0, r4
 80043b0:	f7fc f85c 	bl	800046c <__aeabi_i2d>
 80043b4:	a390      	add	r3, pc, #576	; (adr r3, 80045f8 <__ieee754_log+0x308>)
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	4606      	mov	r6, r0
 80043bc:	460f      	mov	r7, r1
 80043be:	f7fc f8bf 	bl	8000540 <__aeabi_dmul>
 80043c2:	a38f      	add	r3, pc, #572	; (adr r3, 8004600 <__ieee754_log+0x310>)
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	4604      	mov	r4, r0
 80043ca:	460d      	mov	r5, r1
 80043cc:	4630      	mov	r0, r6
 80043ce:	4639      	mov	r1, r7
 80043d0:	f7fc f8b6 	bl	8000540 <__aeabi_dmul>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4620      	mov	r0, r4
 80043da:	4629      	mov	r1, r5
 80043dc:	e7ba      	b.n	8004354 <__ieee754_log+0x64>
 80043de:	a38a      	add	r3, pc, #552	; (adr r3, 8004608 <__ieee754_log+0x318>)
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	4650      	mov	r0, sl
 80043e6:	4659      	mov	r1, fp
 80043e8:	f7fc f8aa 	bl	8000540 <__aeabi_dmul>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	2000      	movs	r0, #0
 80043f2:	499b      	ldr	r1, [pc, #620]	; (8004660 <__ieee754_log+0x370>)
 80043f4:	f7fb feec 	bl	80001d0 <__aeabi_dsub>
 80043f8:	4652      	mov	r2, sl
 80043fa:	4606      	mov	r6, r0
 80043fc:	460f      	mov	r7, r1
 80043fe:	465b      	mov	r3, fp
 8004400:	4650      	mov	r0, sl
 8004402:	4659      	mov	r1, fp
 8004404:	f7fc f89c 	bl	8000540 <__aeabi_dmul>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4630      	mov	r0, r6
 800440e:	4639      	mov	r1, r7
 8004410:	f7fc f896 	bl	8000540 <__aeabi_dmul>
 8004414:	4606      	mov	r6, r0
 8004416:	460f      	mov	r7, r1
 8004418:	b914      	cbnz	r4, 8004420 <__ieee754_log+0x130>
 800441a:	4632      	mov	r2, r6
 800441c:	463b      	mov	r3, r7
 800441e:	e0a2      	b.n	8004566 <__ieee754_log+0x276>
 8004420:	4620      	mov	r0, r4
 8004422:	f7fc f823 	bl	800046c <__aeabi_i2d>
 8004426:	a374      	add	r3, pc, #464	; (adr r3, 80045f8 <__ieee754_log+0x308>)
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	4680      	mov	r8, r0
 800442e:	4689      	mov	r9, r1
 8004430:	f7fc f886 	bl	8000540 <__aeabi_dmul>
 8004434:	a372      	add	r3, pc, #456	; (adr r3, 8004600 <__ieee754_log+0x310>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	4604      	mov	r4, r0
 800443c:	460d      	mov	r5, r1
 800443e:	4640      	mov	r0, r8
 8004440:	4649      	mov	r1, r9
 8004442:	f7fc f87d 	bl	8000540 <__aeabi_dmul>
 8004446:	e0a7      	b.n	8004598 <__ieee754_log+0x2a8>
 8004448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800444c:	f7fb fec2 	bl	80001d4 <__adddf3>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4650      	mov	r0, sl
 8004456:	4659      	mov	r1, fp
 8004458:	f7fc f99c 	bl	8000794 <__aeabi_ddiv>
 800445c:	ec41 0b18 	vmov	d8, r0, r1
 8004460:	4620      	mov	r0, r4
 8004462:	f7fc f803 	bl	800046c <__aeabi_i2d>
 8004466:	ec53 2b18 	vmov	r2, r3, d8
 800446a:	ec41 0b19 	vmov	d9, r0, r1
 800446e:	ec51 0b18 	vmov	r0, r1, d8
 8004472:	f7fc f865 	bl	8000540 <__aeabi_dmul>
 8004476:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800447a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4680      	mov	r8, r0
 8004486:	4689      	mov	r9, r1
 8004488:	f7fc f85a 	bl	8000540 <__aeabi_dmul>
 800448c:	a360      	add	r3, pc, #384	; (adr r3, 8004610 <__ieee754_log+0x320>)
 800448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004492:	4606      	mov	r6, r0
 8004494:	460f      	mov	r7, r1
 8004496:	f7fc f853 	bl	8000540 <__aeabi_dmul>
 800449a:	a35f      	add	r3, pc, #380	; (adr r3, 8004618 <__ieee754_log+0x328>)
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f7fb fe98 	bl	80001d4 <__adddf3>
 80044a4:	4632      	mov	r2, r6
 80044a6:	463b      	mov	r3, r7
 80044a8:	f7fc f84a 	bl	8000540 <__aeabi_dmul>
 80044ac:	a35c      	add	r3, pc, #368	; (adr r3, 8004620 <__ieee754_log+0x330>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f7fb fe8f 	bl	80001d4 <__adddf3>
 80044b6:	4632      	mov	r2, r6
 80044b8:	463b      	mov	r3, r7
 80044ba:	f7fc f841 	bl	8000540 <__aeabi_dmul>
 80044be:	a35a      	add	r3, pc, #360	; (adr r3, 8004628 <__ieee754_log+0x338>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f7fb fe86 	bl	80001d4 <__adddf3>
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	f7fc f838 	bl	8000540 <__aeabi_dmul>
 80044d0:	a357      	add	r3, pc, #348	; (adr r3, 8004630 <__ieee754_log+0x340>)
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	4680      	mov	r8, r0
 80044d8:	4689      	mov	r9, r1
 80044da:	4630      	mov	r0, r6
 80044dc:	4639      	mov	r1, r7
 80044de:	f7fc f82f 	bl	8000540 <__aeabi_dmul>
 80044e2:	a355      	add	r3, pc, #340	; (adr r3, 8004638 <__ieee754_log+0x348>)
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f7fb fe74 	bl	80001d4 <__adddf3>
 80044ec:	4632      	mov	r2, r6
 80044ee:	463b      	mov	r3, r7
 80044f0:	f7fc f826 	bl	8000540 <__aeabi_dmul>
 80044f4:	a352      	add	r3, pc, #328	; (adr r3, 8004640 <__ieee754_log+0x350>)
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f7fb fe6b 	bl	80001d4 <__adddf3>
 80044fe:	4632      	mov	r2, r6
 8004500:	463b      	mov	r3, r7
 8004502:	f7fc f81d 	bl	8000540 <__aeabi_dmul>
 8004506:	460b      	mov	r3, r1
 8004508:	4602      	mov	r2, r0
 800450a:	4649      	mov	r1, r9
 800450c:	4640      	mov	r0, r8
 800450e:	f7fb fe61 	bl	80001d4 <__adddf3>
 8004512:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004516:	9b01      	ldr	r3, [sp, #4]
 8004518:	3551      	adds	r5, #81	; 0x51
 800451a:	431d      	orrs	r5, r3
 800451c:	2d00      	cmp	r5, #0
 800451e:	4680      	mov	r8, r0
 8004520:	4689      	mov	r9, r1
 8004522:	dd48      	ble.n	80045b6 <__ieee754_log+0x2c6>
 8004524:	4b4e      	ldr	r3, [pc, #312]	; (8004660 <__ieee754_log+0x370>)
 8004526:	2200      	movs	r2, #0
 8004528:	4650      	mov	r0, sl
 800452a:	4659      	mov	r1, fp
 800452c:	f7fc f808 	bl	8000540 <__aeabi_dmul>
 8004530:	4652      	mov	r2, sl
 8004532:	465b      	mov	r3, fp
 8004534:	f7fc f804 	bl	8000540 <__aeabi_dmul>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4606      	mov	r6, r0
 800453e:	460f      	mov	r7, r1
 8004540:	4640      	mov	r0, r8
 8004542:	4649      	mov	r1, r9
 8004544:	f7fb fe46 	bl	80001d4 <__adddf3>
 8004548:	ec53 2b18 	vmov	r2, r3, d8
 800454c:	f7fb fff8 	bl	8000540 <__aeabi_dmul>
 8004550:	4680      	mov	r8, r0
 8004552:	4689      	mov	r9, r1
 8004554:	b964      	cbnz	r4, 8004570 <__ieee754_log+0x280>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4630      	mov	r0, r6
 800455c:	4639      	mov	r1, r7
 800455e:	f7fb fe37 	bl	80001d0 <__aeabi_dsub>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4650      	mov	r0, sl
 8004568:	4659      	mov	r1, fp
 800456a:	f7fb fe31 	bl	80001d0 <__aeabi_dsub>
 800456e:	e6d6      	b.n	800431e <__ieee754_log+0x2e>
 8004570:	a321      	add	r3, pc, #132	; (adr r3, 80045f8 <__ieee754_log+0x308>)
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	ec51 0b19 	vmov	r0, r1, d9
 800457a:	f7fb ffe1 	bl	8000540 <__aeabi_dmul>
 800457e:	a320      	add	r3, pc, #128	; (adr r3, 8004600 <__ieee754_log+0x310>)
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	4604      	mov	r4, r0
 8004586:	460d      	mov	r5, r1
 8004588:	ec51 0b19 	vmov	r0, r1, d9
 800458c:	f7fb ffd8 	bl	8000540 <__aeabi_dmul>
 8004590:	4642      	mov	r2, r8
 8004592:	464b      	mov	r3, r9
 8004594:	f7fb fe1e 	bl	80001d4 <__adddf3>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4630      	mov	r0, r6
 800459e:	4639      	mov	r1, r7
 80045a0:	f7fb fe16 	bl	80001d0 <__aeabi_dsub>
 80045a4:	4652      	mov	r2, sl
 80045a6:	465b      	mov	r3, fp
 80045a8:	f7fb fe12 	bl	80001d0 <__aeabi_dsub>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4620      	mov	r0, r4
 80045b2:	4629      	mov	r1, r5
 80045b4:	e7d9      	b.n	800456a <__ieee754_log+0x27a>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4650      	mov	r0, sl
 80045bc:	4659      	mov	r1, fp
 80045be:	f7fb fe07 	bl	80001d0 <__aeabi_dsub>
 80045c2:	ec53 2b18 	vmov	r2, r3, d8
 80045c6:	f7fb ffbb 	bl	8000540 <__aeabi_dmul>
 80045ca:	4606      	mov	r6, r0
 80045cc:	460f      	mov	r7, r1
 80045ce:	2c00      	cmp	r4, #0
 80045d0:	f43f af23 	beq.w	800441a <__ieee754_log+0x12a>
 80045d4:	a308      	add	r3, pc, #32	; (adr r3, 80045f8 <__ieee754_log+0x308>)
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	ec51 0b19 	vmov	r0, r1, d9
 80045de:	f7fb ffaf 	bl	8000540 <__aeabi_dmul>
 80045e2:	a307      	add	r3, pc, #28	; (adr r3, 8004600 <__ieee754_log+0x310>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	4604      	mov	r4, r0
 80045ea:	460d      	mov	r5, r1
 80045ec:	ec51 0b19 	vmov	r0, r1, d9
 80045f0:	e727      	b.n	8004442 <__ieee754_log+0x152>
 80045f2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8004648 <__ieee754_log+0x358>
 80045f6:	e694      	b.n	8004322 <__ieee754_log+0x32>
 80045f8:	fee00000 	.word	0xfee00000
 80045fc:	3fe62e42 	.word	0x3fe62e42
 8004600:	35793c76 	.word	0x35793c76
 8004604:	3dea39ef 	.word	0x3dea39ef
 8004608:	55555555 	.word	0x55555555
 800460c:	3fd55555 	.word	0x3fd55555
 8004610:	df3e5244 	.word	0xdf3e5244
 8004614:	3fc2f112 	.word	0x3fc2f112
 8004618:	96cb03de 	.word	0x96cb03de
 800461c:	3fc74664 	.word	0x3fc74664
 8004620:	94229359 	.word	0x94229359
 8004624:	3fd24924 	.word	0x3fd24924
 8004628:	55555593 	.word	0x55555593
 800462c:	3fe55555 	.word	0x3fe55555
 8004630:	d078c69f 	.word	0xd078c69f
 8004634:	3fc39a09 	.word	0x3fc39a09
 8004638:	1d8e78af 	.word	0x1d8e78af
 800463c:	3fcc71c5 	.word	0x3fcc71c5
 8004640:	9997fa04 	.word	0x9997fa04
 8004644:	3fd99999 	.word	0x3fd99999
	...
 8004650:	c3500000 	.word	0xc3500000
 8004654:	43500000 	.word	0x43500000
 8004658:	7fefffff 	.word	0x7fefffff
 800465c:	3ff00000 	.word	0x3ff00000
 8004660:	3fe00000 	.word	0x3fe00000
 8004664:	00000000 	.word	0x00000000

08004668 <__ieee754_pow>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	ed2d 8b06 	vpush	{d8-d10}
 8004670:	b08d      	sub	sp, #52	; 0x34
 8004672:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004676:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800467a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800467e:	ea56 0100 	orrs.w	r1, r6, r0
 8004682:	ec53 2b10 	vmov	r2, r3, d0
 8004686:	f000 84d1 	beq.w	800502c <__ieee754_pow+0x9c4>
 800468a:	497f      	ldr	r1, [pc, #508]	; (8004888 <__ieee754_pow+0x220>)
 800468c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8004690:	428c      	cmp	r4, r1
 8004692:	ee10 8a10 	vmov	r8, s0
 8004696:	4699      	mov	r9, r3
 8004698:	dc09      	bgt.n	80046ae <__ieee754_pow+0x46>
 800469a:	d103      	bne.n	80046a4 <__ieee754_pow+0x3c>
 800469c:	b97a      	cbnz	r2, 80046be <__ieee754_pow+0x56>
 800469e:	42a6      	cmp	r6, r4
 80046a0:	dd02      	ble.n	80046a8 <__ieee754_pow+0x40>
 80046a2:	e00c      	b.n	80046be <__ieee754_pow+0x56>
 80046a4:	428e      	cmp	r6, r1
 80046a6:	dc02      	bgt.n	80046ae <__ieee754_pow+0x46>
 80046a8:	428e      	cmp	r6, r1
 80046aa:	d110      	bne.n	80046ce <__ieee754_pow+0x66>
 80046ac:	b178      	cbz	r0, 80046ce <__ieee754_pow+0x66>
 80046ae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80046b2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80046b6:	ea54 0308 	orrs.w	r3, r4, r8
 80046ba:	f000 84b7 	beq.w	800502c <__ieee754_pow+0x9c4>
 80046be:	4873      	ldr	r0, [pc, #460]	; (800488c <__ieee754_pow+0x224>)
 80046c0:	b00d      	add	sp, #52	; 0x34
 80046c2:	ecbd 8b06 	vpop	{d8-d10}
 80046c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ca:	f000 bdb9 	b.w	8005240 <nan>
 80046ce:	f1b9 0f00 	cmp.w	r9, #0
 80046d2:	da36      	bge.n	8004742 <__ieee754_pow+0xda>
 80046d4:	496e      	ldr	r1, [pc, #440]	; (8004890 <__ieee754_pow+0x228>)
 80046d6:	428e      	cmp	r6, r1
 80046d8:	dc51      	bgt.n	800477e <__ieee754_pow+0x116>
 80046da:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80046de:	428e      	cmp	r6, r1
 80046e0:	f340 84af 	ble.w	8005042 <__ieee754_pow+0x9da>
 80046e4:	1531      	asrs	r1, r6, #20
 80046e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80046ea:	2914      	cmp	r1, #20
 80046ec:	dd0f      	ble.n	800470e <__ieee754_pow+0xa6>
 80046ee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80046f2:	fa20 fc01 	lsr.w	ip, r0, r1
 80046f6:	fa0c f101 	lsl.w	r1, ip, r1
 80046fa:	4281      	cmp	r1, r0
 80046fc:	f040 84a1 	bne.w	8005042 <__ieee754_pow+0x9da>
 8004700:	f00c 0c01 	and.w	ip, ip, #1
 8004704:	f1cc 0102 	rsb	r1, ip, #2
 8004708:	9100      	str	r1, [sp, #0]
 800470a:	b180      	cbz	r0, 800472e <__ieee754_pow+0xc6>
 800470c:	e059      	b.n	80047c2 <__ieee754_pow+0x15a>
 800470e:	2800      	cmp	r0, #0
 8004710:	d155      	bne.n	80047be <__ieee754_pow+0x156>
 8004712:	f1c1 0114 	rsb	r1, r1, #20
 8004716:	fa46 fc01 	asr.w	ip, r6, r1
 800471a:	fa0c f101 	lsl.w	r1, ip, r1
 800471e:	42b1      	cmp	r1, r6
 8004720:	f040 848c 	bne.w	800503c <__ieee754_pow+0x9d4>
 8004724:	f00c 0c01 	and.w	ip, ip, #1
 8004728:	f1cc 0102 	rsb	r1, ip, #2
 800472c:	9100      	str	r1, [sp, #0]
 800472e:	4959      	ldr	r1, [pc, #356]	; (8004894 <__ieee754_pow+0x22c>)
 8004730:	428e      	cmp	r6, r1
 8004732:	d12d      	bne.n	8004790 <__ieee754_pow+0x128>
 8004734:	2f00      	cmp	r7, #0
 8004736:	da79      	bge.n	800482c <__ieee754_pow+0x1c4>
 8004738:	4956      	ldr	r1, [pc, #344]	; (8004894 <__ieee754_pow+0x22c>)
 800473a:	2000      	movs	r0, #0
 800473c:	f7fc f82a 	bl	8000794 <__aeabi_ddiv>
 8004740:	e016      	b.n	8004770 <__ieee754_pow+0x108>
 8004742:	2100      	movs	r1, #0
 8004744:	9100      	str	r1, [sp, #0]
 8004746:	2800      	cmp	r0, #0
 8004748:	d13b      	bne.n	80047c2 <__ieee754_pow+0x15a>
 800474a:	494f      	ldr	r1, [pc, #316]	; (8004888 <__ieee754_pow+0x220>)
 800474c:	428e      	cmp	r6, r1
 800474e:	d1ee      	bne.n	800472e <__ieee754_pow+0xc6>
 8004750:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004754:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004758:	ea53 0308 	orrs.w	r3, r3, r8
 800475c:	f000 8466 	beq.w	800502c <__ieee754_pow+0x9c4>
 8004760:	4b4d      	ldr	r3, [pc, #308]	; (8004898 <__ieee754_pow+0x230>)
 8004762:	429c      	cmp	r4, r3
 8004764:	dd0d      	ble.n	8004782 <__ieee754_pow+0x11a>
 8004766:	2f00      	cmp	r7, #0
 8004768:	f280 8464 	bge.w	8005034 <__ieee754_pow+0x9cc>
 800476c:	2000      	movs	r0, #0
 800476e:	2100      	movs	r1, #0
 8004770:	ec41 0b10 	vmov	d0, r0, r1
 8004774:	b00d      	add	sp, #52	; 0x34
 8004776:	ecbd 8b06 	vpop	{d8-d10}
 800477a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477e:	2102      	movs	r1, #2
 8004780:	e7e0      	b.n	8004744 <__ieee754_pow+0xdc>
 8004782:	2f00      	cmp	r7, #0
 8004784:	daf2      	bge.n	800476c <__ieee754_pow+0x104>
 8004786:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800478a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800478e:	e7ef      	b.n	8004770 <__ieee754_pow+0x108>
 8004790:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004794:	d104      	bne.n	80047a0 <__ieee754_pow+0x138>
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	f7fb fed1 	bl	8000540 <__aeabi_dmul>
 800479e:	e7e7      	b.n	8004770 <__ieee754_pow+0x108>
 80047a0:	493e      	ldr	r1, [pc, #248]	; (800489c <__ieee754_pow+0x234>)
 80047a2:	428f      	cmp	r7, r1
 80047a4:	d10d      	bne.n	80047c2 <__ieee754_pow+0x15a>
 80047a6:	f1b9 0f00 	cmp.w	r9, #0
 80047aa:	db0a      	blt.n	80047c2 <__ieee754_pow+0x15a>
 80047ac:	ec43 2b10 	vmov	d0, r2, r3
 80047b0:	b00d      	add	sp, #52	; 0x34
 80047b2:	ecbd 8b06 	vpop	{d8-d10}
 80047b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ba:	f000 bc77 	b.w	80050ac <__ieee754_sqrt>
 80047be:	2100      	movs	r1, #0
 80047c0:	9100      	str	r1, [sp, #0]
 80047c2:	ec43 2b10 	vmov	d0, r2, r3
 80047c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047ca:	f000 fd23 	bl	8005214 <fabs>
 80047ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047d2:	ec51 0b10 	vmov	r0, r1, d0
 80047d6:	f1b8 0f00 	cmp.w	r8, #0
 80047da:	d12a      	bne.n	8004832 <__ieee754_pow+0x1ca>
 80047dc:	b12c      	cbz	r4, 80047ea <__ieee754_pow+0x182>
 80047de:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8004894 <__ieee754_pow+0x22c>
 80047e2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80047e6:	45e6      	cmp	lr, ip
 80047e8:	d123      	bne.n	8004832 <__ieee754_pow+0x1ca>
 80047ea:	2f00      	cmp	r7, #0
 80047ec:	da05      	bge.n	80047fa <__ieee754_pow+0x192>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	2000      	movs	r0, #0
 80047f4:	4927      	ldr	r1, [pc, #156]	; (8004894 <__ieee754_pow+0x22c>)
 80047f6:	f7fb ffcd 	bl	8000794 <__aeabi_ddiv>
 80047fa:	f1b9 0f00 	cmp.w	r9, #0
 80047fe:	dab7      	bge.n	8004770 <__ieee754_pow+0x108>
 8004800:	9b00      	ldr	r3, [sp, #0]
 8004802:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004806:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800480a:	4323      	orrs	r3, r4
 800480c:	d108      	bne.n	8004820 <__ieee754_pow+0x1b8>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	f7fb fcdb 	bl	80001d0 <__aeabi_dsub>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	e78d      	b.n	800473c <__ieee754_pow+0xd4>
 8004820:	9b00      	ldr	r3, [sp, #0]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d1a4      	bne.n	8004770 <__ieee754_pow+0x108>
 8004826:	4602      	mov	r2, r0
 8004828:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	e79e      	b.n	8004770 <__ieee754_pow+0x108>
 8004832:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8004836:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800483a:	950a      	str	r5, [sp, #40]	; 0x28
 800483c:	9d00      	ldr	r5, [sp, #0]
 800483e:	46ac      	mov	ip, r5
 8004840:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004842:	ea5c 0505 	orrs.w	r5, ip, r5
 8004846:	d0e4      	beq.n	8004812 <__ieee754_pow+0x1aa>
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <__ieee754_pow+0x238>)
 800484a:	429e      	cmp	r6, r3
 800484c:	f340 80fc 	ble.w	8004a48 <__ieee754_pow+0x3e0>
 8004850:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004854:	429e      	cmp	r6, r3
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <__ieee754_pow+0x230>)
 8004858:	dd07      	ble.n	800486a <__ieee754_pow+0x202>
 800485a:	429c      	cmp	r4, r3
 800485c:	dc0a      	bgt.n	8004874 <__ieee754_pow+0x20c>
 800485e:	2f00      	cmp	r7, #0
 8004860:	da84      	bge.n	800476c <__ieee754_pow+0x104>
 8004862:	a307      	add	r3, pc, #28	; (adr r3, 8004880 <__ieee754_pow+0x218>)
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	e795      	b.n	8004796 <__ieee754_pow+0x12e>
 800486a:	429c      	cmp	r4, r3
 800486c:	dbf7      	blt.n	800485e <__ieee754_pow+0x1f6>
 800486e:	4b09      	ldr	r3, [pc, #36]	; (8004894 <__ieee754_pow+0x22c>)
 8004870:	429c      	cmp	r4, r3
 8004872:	dd17      	ble.n	80048a4 <__ieee754_pow+0x23c>
 8004874:	2f00      	cmp	r7, #0
 8004876:	dcf4      	bgt.n	8004862 <__ieee754_pow+0x1fa>
 8004878:	e778      	b.n	800476c <__ieee754_pow+0x104>
 800487a:	bf00      	nop
 800487c:	f3af 8000 	nop.w
 8004880:	8800759c 	.word	0x8800759c
 8004884:	7e37e43c 	.word	0x7e37e43c
 8004888:	7ff00000 	.word	0x7ff00000
 800488c:	08005678 	.word	0x08005678
 8004890:	433fffff 	.word	0x433fffff
 8004894:	3ff00000 	.word	0x3ff00000
 8004898:	3fefffff 	.word	0x3fefffff
 800489c:	3fe00000 	.word	0x3fe00000
 80048a0:	41e00000 	.word	0x41e00000
 80048a4:	4b64      	ldr	r3, [pc, #400]	; (8004a38 <__ieee754_pow+0x3d0>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	f7fb fc92 	bl	80001d0 <__aeabi_dsub>
 80048ac:	a356      	add	r3, pc, #344	; (adr r3, 8004a08 <__ieee754_pow+0x3a0>)
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	4604      	mov	r4, r0
 80048b4:	460d      	mov	r5, r1
 80048b6:	f7fb fe43 	bl	8000540 <__aeabi_dmul>
 80048ba:	a355      	add	r3, pc, #340	; (adr r3, 8004a10 <__ieee754_pow+0x3a8>)
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	4606      	mov	r6, r0
 80048c2:	460f      	mov	r7, r1
 80048c4:	4620      	mov	r0, r4
 80048c6:	4629      	mov	r1, r5
 80048c8:	f7fb fe3a 	bl	8000540 <__aeabi_dmul>
 80048cc:	4b5b      	ldr	r3, [pc, #364]	; (8004a3c <__ieee754_pow+0x3d4>)
 80048ce:	4682      	mov	sl, r0
 80048d0:	468b      	mov	fp, r1
 80048d2:	2200      	movs	r2, #0
 80048d4:	4620      	mov	r0, r4
 80048d6:	4629      	mov	r1, r5
 80048d8:	f7fb fe32 	bl	8000540 <__aeabi_dmul>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	a14d      	add	r1, pc, #308	; (adr r1, 8004a18 <__ieee754_pow+0x3b0>)
 80048e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048e6:	f7fb fc73 	bl	80001d0 <__aeabi_dsub>
 80048ea:	4622      	mov	r2, r4
 80048ec:	462b      	mov	r3, r5
 80048ee:	f7fb fe27 	bl	8000540 <__aeabi_dmul>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	2000      	movs	r0, #0
 80048f8:	4951      	ldr	r1, [pc, #324]	; (8004a40 <__ieee754_pow+0x3d8>)
 80048fa:	f7fb fc69 	bl	80001d0 <__aeabi_dsub>
 80048fe:	4622      	mov	r2, r4
 8004900:	4680      	mov	r8, r0
 8004902:	4689      	mov	r9, r1
 8004904:	462b      	mov	r3, r5
 8004906:	4620      	mov	r0, r4
 8004908:	4629      	mov	r1, r5
 800490a:	f7fb fe19 	bl	8000540 <__aeabi_dmul>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4640      	mov	r0, r8
 8004914:	4649      	mov	r1, r9
 8004916:	f7fb fe13 	bl	8000540 <__aeabi_dmul>
 800491a:	a341      	add	r3, pc, #260	; (adr r3, 8004a20 <__ieee754_pow+0x3b8>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f7fb fe0e 	bl	8000540 <__aeabi_dmul>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4650      	mov	r0, sl
 800492a:	4659      	mov	r1, fp
 800492c:	f7fb fc50 	bl	80001d0 <__aeabi_dsub>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4680      	mov	r8, r0
 8004936:	4689      	mov	r9, r1
 8004938:	4630      	mov	r0, r6
 800493a:	4639      	mov	r1, r7
 800493c:	f7fb fc4a 	bl	80001d4 <__adddf3>
 8004940:	2400      	movs	r4, #0
 8004942:	4632      	mov	r2, r6
 8004944:	463b      	mov	r3, r7
 8004946:	4620      	mov	r0, r4
 8004948:	460d      	mov	r5, r1
 800494a:	f7fb fc41 	bl	80001d0 <__aeabi_dsub>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4640      	mov	r0, r8
 8004954:	4649      	mov	r1, r9
 8004956:	f7fb fc3b 	bl	80001d0 <__aeabi_dsub>
 800495a:	9b00      	ldr	r3, [sp, #0]
 800495c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800495e:	3b01      	subs	r3, #1
 8004960:	4313      	orrs	r3, r2
 8004962:	4682      	mov	sl, r0
 8004964:	468b      	mov	fp, r1
 8004966:	f040 81f1 	bne.w	8004d4c <__ieee754_pow+0x6e4>
 800496a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8004a28 <__ieee754_pow+0x3c0>
 800496e:	eeb0 8a47 	vmov.f32	s16, s14
 8004972:	eef0 8a67 	vmov.f32	s17, s15
 8004976:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800497a:	2600      	movs	r6, #0
 800497c:	4632      	mov	r2, r6
 800497e:	463b      	mov	r3, r7
 8004980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004984:	f7fb fc24 	bl	80001d0 <__aeabi_dsub>
 8004988:	4622      	mov	r2, r4
 800498a:	462b      	mov	r3, r5
 800498c:	f7fb fdd8 	bl	8000540 <__aeabi_dmul>
 8004990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004994:	4680      	mov	r8, r0
 8004996:	4689      	mov	r9, r1
 8004998:	4650      	mov	r0, sl
 800499a:	4659      	mov	r1, fp
 800499c:	f7fb fdd0 	bl	8000540 <__aeabi_dmul>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4640      	mov	r0, r8
 80049a6:	4649      	mov	r1, r9
 80049a8:	f7fb fc14 	bl	80001d4 <__adddf3>
 80049ac:	4632      	mov	r2, r6
 80049ae:	463b      	mov	r3, r7
 80049b0:	4680      	mov	r8, r0
 80049b2:	4689      	mov	r9, r1
 80049b4:	4620      	mov	r0, r4
 80049b6:	4629      	mov	r1, r5
 80049b8:	f7fb fdc2 	bl	8000540 <__aeabi_dmul>
 80049bc:	460b      	mov	r3, r1
 80049be:	4604      	mov	r4, r0
 80049c0:	460d      	mov	r5, r1
 80049c2:	4602      	mov	r2, r0
 80049c4:	4649      	mov	r1, r9
 80049c6:	4640      	mov	r0, r8
 80049c8:	f7fb fc04 	bl	80001d4 <__adddf3>
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <__ieee754_pow+0x3dc>)
 80049ce:	4299      	cmp	r1, r3
 80049d0:	ec45 4b19 	vmov	d9, r4, r5
 80049d4:	4606      	mov	r6, r0
 80049d6:	460f      	mov	r7, r1
 80049d8:	468b      	mov	fp, r1
 80049da:	f340 82fe 	ble.w	8004fda <__ieee754_pow+0x972>
 80049de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80049e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80049e6:	4303      	orrs	r3, r0
 80049e8:	f000 81f0 	beq.w	8004dcc <__ieee754_pow+0x764>
 80049ec:	a310      	add	r3, pc, #64	; (adr r3, 8004a30 <__ieee754_pow+0x3c8>)
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	ec51 0b18 	vmov	r0, r1, d8
 80049f6:	f7fb fda3 	bl	8000540 <__aeabi_dmul>
 80049fa:	a30d      	add	r3, pc, #52	; (adr r3, 8004a30 <__ieee754_pow+0x3c8>)
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	e6cb      	b.n	800479a <__ieee754_pow+0x132>
 8004a02:	bf00      	nop
 8004a04:	f3af 8000 	nop.w
 8004a08:	60000000 	.word	0x60000000
 8004a0c:	3ff71547 	.word	0x3ff71547
 8004a10:	f85ddf44 	.word	0xf85ddf44
 8004a14:	3e54ae0b 	.word	0x3e54ae0b
 8004a18:	55555555 	.word	0x55555555
 8004a1c:	3fd55555 	.word	0x3fd55555
 8004a20:	652b82fe 	.word	0x652b82fe
 8004a24:	3ff71547 	.word	0x3ff71547
 8004a28:	00000000 	.word	0x00000000
 8004a2c:	bff00000 	.word	0xbff00000
 8004a30:	8800759c 	.word	0x8800759c
 8004a34:	7e37e43c 	.word	0x7e37e43c
 8004a38:	3ff00000 	.word	0x3ff00000
 8004a3c:	3fd00000 	.word	0x3fd00000
 8004a40:	3fe00000 	.word	0x3fe00000
 8004a44:	408fffff 	.word	0x408fffff
 8004a48:	4bd7      	ldr	r3, [pc, #860]	; (8004da8 <__ieee754_pow+0x740>)
 8004a4a:	ea03 0309 	and.w	r3, r3, r9
 8004a4e:	2200      	movs	r2, #0
 8004a50:	b92b      	cbnz	r3, 8004a5e <__ieee754_pow+0x3f6>
 8004a52:	4bd6      	ldr	r3, [pc, #856]	; (8004dac <__ieee754_pow+0x744>)
 8004a54:	f7fb fd74 	bl	8000540 <__aeabi_dmul>
 8004a58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	1523      	asrs	r3, r4, #20
 8004a60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004a64:	4413      	add	r3, r2
 8004a66:	9309      	str	r3, [sp, #36]	; 0x24
 8004a68:	4bd1      	ldr	r3, [pc, #836]	; (8004db0 <__ieee754_pow+0x748>)
 8004a6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004a6e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004a72:	429c      	cmp	r4, r3
 8004a74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004a78:	dd08      	ble.n	8004a8c <__ieee754_pow+0x424>
 8004a7a:	4bce      	ldr	r3, [pc, #824]	; (8004db4 <__ieee754_pow+0x74c>)
 8004a7c:	429c      	cmp	r4, r3
 8004a7e:	f340 8163 	ble.w	8004d48 <__ieee754_pow+0x6e0>
 8004a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a84:	3301      	adds	r3, #1
 8004a86:	9309      	str	r3, [sp, #36]	; 0x24
 8004a88:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004a8c:	2400      	movs	r4, #0
 8004a8e:	00e3      	lsls	r3, r4, #3
 8004a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a92:	4bc9      	ldr	r3, [pc, #804]	; (8004db8 <__ieee754_pow+0x750>)
 8004a94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a98:	ed93 7b00 	vldr	d7, [r3]
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	ec53 2b17 	vmov	r2, r3, d7
 8004aa2:	eeb0 8a47 	vmov.f32	s16, s14
 8004aa6:	eef0 8a67 	vmov.f32	s17, s15
 8004aaa:	4682      	mov	sl, r0
 8004aac:	f7fb fb90 	bl	80001d0 <__aeabi_dsub>
 8004ab0:	4652      	mov	r2, sl
 8004ab2:	4606      	mov	r6, r0
 8004ab4:	460f      	mov	r7, r1
 8004ab6:	462b      	mov	r3, r5
 8004ab8:	ec51 0b18 	vmov	r0, r1, d8
 8004abc:	f7fb fb8a 	bl	80001d4 <__adddf3>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	49bd      	ldr	r1, [pc, #756]	; (8004dbc <__ieee754_pow+0x754>)
 8004ac8:	f7fb fe64 	bl	8000794 <__aeabi_ddiv>
 8004acc:	ec41 0b19 	vmov	d9, r0, r1
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	4639      	mov	r1, r7
 8004ad8:	f7fb fd32 	bl	8000540 <__aeabi_dmul>
 8004adc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ae0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ae4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	9304      	str	r3, [sp, #16]
 8004aec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004af0:	46ab      	mov	fp, r5
 8004af2:	106d      	asrs	r5, r5, #1
 8004af4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004af8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004afc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004b00:	2200      	movs	r2, #0
 8004b02:	4640      	mov	r0, r8
 8004b04:	4649      	mov	r1, r9
 8004b06:	4614      	mov	r4, r2
 8004b08:	461d      	mov	r5, r3
 8004b0a:	f7fb fd19 	bl	8000540 <__aeabi_dmul>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4630      	mov	r0, r6
 8004b14:	4639      	mov	r1, r7
 8004b16:	f7fb fb5b 	bl	80001d0 <__aeabi_dsub>
 8004b1a:	ec53 2b18 	vmov	r2, r3, d8
 8004b1e:	4606      	mov	r6, r0
 8004b20:	460f      	mov	r7, r1
 8004b22:	4620      	mov	r0, r4
 8004b24:	4629      	mov	r1, r5
 8004b26:	f7fb fb53 	bl	80001d0 <__aeabi_dsub>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4650      	mov	r0, sl
 8004b30:	4659      	mov	r1, fp
 8004b32:	f7fb fb4d 	bl	80001d0 <__aeabi_dsub>
 8004b36:	4642      	mov	r2, r8
 8004b38:	464b      	mov	r3, r9
 8004b3a:	f7fb fd01 	bl	8000540 <__aeabi_dmul>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4630      	mov	r0, r6
 8004b44:	4639      	mov	r1, r7
 8004b46:	f7fb fb43 	bl	80001d0 <__aeabi_dsub>
 8004b4a:	ec53 2b19 	vmov	r2, r3, d9
 8004b4e:	f7fb fcf7 	bl	8000540 <__aeabi_dmul>
 8004b52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b56:	ec41 0b18 	vmov	d8, r0, r1
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	f7fb fcef 	bl	8000540 <__aeabi_dmul>
 8004b62:	a37d      	add	r3, pc, #500	; (adr r3, 8004d58 <__ieee754_pow+0x6f0>)
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	4604      	mov	r4, r0
 8004b6a:	460d      	mov	r5, r1
 8004b6c:	f7fb fce8 	bl	8000540 <__aeabi_dmul>
 8004b70:	a37b      	add	r3, pc, #492	; (adr r3, 8004d60 <__ieee754_pow+0x6f8>)
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f7fb fb2d 	bl	80001d4 <__adddf3>
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	462b      	mov	r3, r5
 8004b7e:	f7fb fcdf 	bl	8000540 <__aeabi_dmul>
 8004b82:	a379      	add	r3, pc, #484	; (adr r3, 8004d68 <__ieee754_pow+0x700>)
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f7fb fb24 	bl	80001d4 <__adddf3>
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	462b      	mov	r3, r5
 8004b90:	f7fb fcd6 	bl	8000540 <__aeabi_dmul>
 8004b94:	a376      	add	r3, pc, #472	; (adr r3, 8004d70 <__ieee754_pow+0x708>)
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	f7fb fb1b 	bl	80001d4 <__adddf3>
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	462b      	mov	r3, r5
 8004ba2:	f7fb fccd 	bl	8000540 <__aeabi_dmul>
 8004ba6:	a374      	add	r3, pc, #464	; (adr r3, 8004d78 <__ieee754_pow+0x710>)
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f7fb fb12 	bl	80001d4 <__adddf3>
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	462b      	mov	r3, r5
 8004bb4:	f7fb fcc4 	bl	8000540 <__aeabi_dmul>
 8004bb8:	a371      	add	r3, pc, #452	; (adr r3, 8004d80 <__ieee754_pow+0x718>)
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	f7fb fb09 	bl	80001d4 <__adddf3>
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	460f      	mov	r7, r1
 8004bc8:	462b      	mov	r3, r5
 8004bca:	4620      	mov	r0, r4
 8004bcc:	4629      	mov	r1, r5
 8004bce:	f7fb fcb7 	bl	8000540 <__aeabi_dmul>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	4639      	mov	r1, r7
 8004bda:	f7fb fcb1 	bl	8000540 <__aeabi_dmul>
 8004bde:	4642      	mov	r2, r8
 8004be0:	4604      	mov	r4, r0
 8004be2:	460d      	mov	r5, r1
 8004be4:	464b      	mov	r3, r9
 8004be6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bea:	f7fb faf3 	bl	80001d4 <__adddf3>
 8004bee:	ec53 2b18 	vmov	r2, r3, d8
 8004bf2:	f7fb fca5 	bl	8000540 <__aeabi_dmul>
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	f7fb faeb 	bl	80001d4 <__adddf3>
 8004bfe:	4642      	mov	r2, r8
 8004c00:	4682      	mov	sl, r0
 8004c02:	468b      	mov	fp, r1
 8004c04:	464b      	mov	r3, r9
 8004c06:	4640      	mov	r0, r8
 8004c08:	4649      	mov	r1, r9
 8004c0a:	f7fb fc99 	bl	8000540 <__aeabi_dmul>
 8004c0e:	4b6c      	ldr	r3, [pc, #432]	; (8004dc0 <__ieee754_pow+0x758>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	4606      	mov	r6, r0
 8004c14:	460f      	mov	r7, r1
 8004c16:	f7fb fadd 	bl	80001d4 <__adddf3>
 8004c1a:	4652      	mov	r2, sl
 8004c1c:	465b      	mov	r3, fp
 8004c1e:	f7fb fad9 	bl	80001d4 <__adddf3>
 8004c22:	9c04      	ldr	r4, [sp, #16]
 8004c24:	460d      	mov	r5, r1
 8004c26:	4622      	mov	r2, r4
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	f7fb fc87 	bl	8000540 <__aeabi_dmul>
 8004c32:	4b63      	ldr	r3, [pc, #396]	; (8004dc0 <__ieee754_pow+0x758>)
 8004c34:	4680      	mov	r8, r0
 8004c36:	4689      	mov	r9, r1
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	f7fb fac7 	bl	80001d0 <__aeabi_dsub>
 8004c42:	4632      	mov	r2, r6
 8004c44:	463b      	mov	r3, r7
 8004c46:	f7fb fac3 	bl	80001d0 <__aeabi_dsub>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4650      	mov	r0, sl
 8004c50:	4659      	mov	r1, fp
 8004c52:	f7fb fabd 	bl	80001d0 <__aeabi_dsub>
 8004c56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c5a:	f7fb fc71 	bl	8000540 <__aeabi_dmul>
 8004c5e:	4622      	mov	r2, r4
 8004c60:	4606      	mov	r6, r0
 8004c62:	460f      	mov	r7, r1
 8004c64:	462b      	mov	r3, r5
 8004c66:	ec51 0b18 	vmov	r0, r1, d8
 8004c6a:	f7fb fc69 	bl	8000540 <__aeabi_dmul>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4630      	mov	r0, r6
 8004c74:	4639      	mov	r1, r7
 8004c76:	f7fb faad 	bl	80001d4 <__adddf3>
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	460f      	mov	r7, r1
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4640      	mov	r0, r8
 8004c84:	4649      	mov	r1, r9
 8004c86:	f7fb faa5 	bl	80001d4 <__adddf3>
 8004c8a:	9c04      	ldr	r4, [sp, #16]
 8004c8c:	a33e      	add	r3, pc, #248	; (adr r3, 8004d88 <__ieee754_pow+0x720>)
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	4620      	mov	r0, r4
 8004c94:	460d      	mov	r5, r1
 8004c96:	f7fb fc53 	bl	8000540 <__aeabi_dmul>
 8004c9a:	4642      	mov	r2, r8
 8004c9c:	ec41 0b18 	vmov	d8, r0, r1
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	f7fb fa93 	bl	80001d0 <__aeabi_dsub>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4630      	mov	r0, r6
 8004cb0:	4639      	mov	r1, r7
 8004cb2:	f7fb fa8d 	bl	80001d0 <__aeabi_dsub>
 8004cb6:	a336      	add	r3, pc, #216	; (adr r3, 8004d90 <__ieee754_pow+0x728>)
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f7fb fc40 	bl	8000540 <__aeabi_dmul>
 8004cc0:	a335      	add	r3, pc, #212	; (adr r3, 8004d98 <__ieee754_pow+0x730>)
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	460f      	mov	r7, r1
 8004cca:	4620      	mov	r0, r4
 8004ccc:	4629      	mov	r1, r5
 8004cce:	f7fb fc37 	bl	8000540 <__aeabi_dmul>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	4639      	mov	r1, r7
 8004cda:	f7fb fa7b 	bl	80001d4 <__adddf3>
 8004cde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ce0:	4b38      	ldr	r3, [pc, #224]	; (8004dc4 <__ieee754_pow+0x75c>)
 8004ce2:	4413      	add	r3, r2
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f7fb fa74 	bl	80001d4 <__adddf3>
 8004cec:	4682      	mov	sl, r0
 8004cee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cf0:	468b      	mov	fp, r1
 8004cf2:	f7fb fbbb 	bl	800046c <__aeabi_i2d>
 8004cf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cf8:	4b33      	ldr	r3, [pc, #204]	; (8004dc8 <__ieee754_pow+0x760>)
 8004cfa:	4413      	add	r3, r2
 8004cfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d00:	4606      	mov	r6, r0
 8004d02:	460f      	mov	r7, r1
 8004d04:	4652      	mov	r2, sl
 8004d06:	465b      	mov	r3, fp
 8004d08:	ec51 0b18 	vmov	r0, r1, d8
 8004d0c:	f7fb fa62 	bl	80001d4 <__adddf3>
 8004d10:	4642      	mov	r2, r8
 8004d12:	464b      	mov	r3, r9
 8004d14:	f7fb fa5e 	bl	80001d4 <__adddf3>
 8004d18:	4632      	mov	r2, r6
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	f7fb fa5a 	bl	80001d4 <__adddf3>
 8004d20:	9c04      	ldr	r4, [sp, #16]
 8004d22:	4632      	mov	r2, r6
 8004d24:	463b      	mov	r3, r7
 8004d26:	4620      	mov	r0, r4
 8004d28:	460d      	mov	r5, r1
 8004d2a:	f7fb fa51 	bl	80001d0 <__aeabi_dsub>
 8004d2e:	4642      	mov	r2, r8
 8004d30:	464b      	mov	r3, r9
 8004d32:	f7fb fa4d 	bl	80001d0 <__aeabi_dsub>
 8004d36:	ec53 2b18 	vmov	r2, r3, d8
 8004d3a:	f7fb fa49 	bl	80001d0 <__aeabi_dsub>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4650      	mov	r0, sl
 8004d44:	4659      	mov	r1, fp
 8004d46:	e606      	b.n	8004956 <__ieee754_pow+0x2ee>
 8004d48:	2401      	movs	r4, #1
 8004d4a:	e6a0      	b.n	8004a8e <__ieee754_pow+0x426>
 8004d4c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004da0 <__ieee754_pow+0x738>
 8004d50:	e60d      	b.n	800496e <__ieee754_pow+0x306>
 8004d52:	bf00      	nop
 8004d54:	f3af 8000 	nop.w
 8004d58:	4a454eef 	.word	0x4a454eef
 8004d5c:	3fca7e28 	.word	0x3fca7e28
 8004d60:	93c9db65 	.word	0x93c9db65
 8004d64:	3fcd864a 	.word	0x3fcd864a
 8004d68:	a91d4101 	.word	0xa91d4101
 8004d6c:	3fd17460 	.word	0x3fd17460
 8004d70:	518f264d 	.word	0x518f264d
 8004d74:	3fd55555 	.word	0x3fd55555
 8004d78:	db6fabff 	.word	0xdb6fabff
 8004d7c:	3fdb6db6 	.word	0x3fdb6db6
 8004d80:	33333303 	.word	0x33333303
 8004d84:	3fe33333 	.word	0x3fe33333
 8004d88:	e0000000 	.word	0xe0000000
 8004d8c:	3feec709 	.word	0x3feec709
 8004d90:	dc3a03fd 	.word	0xdc3a03fd
 8004d94:	3feec709 	.word	0x3feec709
 8004d98:	145b01f5 	.word	0x145b01f5
 8004d9c:	be3e2fe0 	.word	0xbe3e2fe0
 8004da0:	00000000 	.word	0x00000000
 8004da4:	3ff00000 	.word	0x3ff00000
 8004da8:	7ff00000 	.word	0x7ff00000
 8004dac:	43400000 	.word	0x43400000
 8004db0:	0003988e 	.word	0x0003988e
 8004db4:	000bb679 	.word	0x000bb679
 8004db8:	08005680 	.word	0x08005680
 8004dbc:	3ff00000 	.word	0x3ff00000
 8004dc0:	40080000 	.word	0x40080000
 8004dc4:	080056a0 	.word	0x080056a0
 8004dc8:	08005690 	.word	0x08005690
 8004dcc:	a3b5      	add	r3, pc, #724	; (adr r3, 80050a4 <__ieee754_pow+0xa3c>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	f7fb f9fd 	bl	80001d4 <__adddf3>
 8004dda:	4622      	mov	r2, r4
 8004ddc:	ec41 0b1a 	vmov	d10, r0, r1
 8004de0:	462b      	mov	r3, r5
 8004de2:	4630      	mov	r0, r6
 8004de4:	4639      	mov	r1, r7
 8004de6:	f7fb f9f3 	bl	80001d0 <__aeabi_dsub>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	ec51 0b1a 	vmov	r0, r1, d10
 8004df2:	f7fb fe35 	bl	8000a60 <__aeabi_dcmpgt>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	f47f adf8 	bne.w	80049ec <__ieee754_pow+0x384>
 8004dfc:	4aa4      	ldr	r2, [pc, #656]	; (8005090 <__ieee754_pow+0xa28>)
 8004dfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004e02:	4293      	cmp	r3, r2
 8004e04:	f340 810b 	ble.w	800501e <__ieee754_pow+0x9b6>
 8004e08:	151b      	asrs	r3, r3, #20
 8004e0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004e0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004e12:	fa4a f303 	asr.w	r3, sl, r3
 8004e16:	445b      	add	r3, fp
 8004e18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004e1c:	4e9d      	ldr	r6, [pc, #628]	; (8005094 <__ieee754_pow+0xa2c>)
 8004e1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004e22:	4116      	asrs	r6, r2
 8004e24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004e28:	2000      	movs	r0, #0
 8004e2a:	ea23 0106 	bic.w	r1, r3, r6
 8004e2e:	f1c2 0214 	rsb	r2, r2, #20
 8004e32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004e36:	fa4a fa02 	asr.w	sl, sl, r2
 8004e3a:	f1bb 0f00 	cmp.w	fp, #0
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4620      	mov	r0, r4
 8004e44:	4629      	mov	r1, r5
 8004e46:	bfb8      	it	lt
 8004e48:	f1ca 0a00 	rsblt	sl, sl, #0
 8004e4c:	f7fb f9c0 	bl	80001d0 <__aeabi_dsub>
 8004e50:	ec41 0b19 	vmov	d9, r0, r1
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	ec51 0b19 	vmov	r0, r1, d9
 8004e5c:	f7fb f9ba 	bl	80001d4 <__adddf3>
 8004e60:	2400      	movs	r4, #0
 8004e62:	a379      	add	r3, pc, #484	; (adr r3, 8005048 <__ieee754_pow+0x9e0>)
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	4620      	mov	r0, r4
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	f7fb fb68 	bl	8000540 <__aeabi_dmul>
 8004e70:	ec53 2b19 	vmov	r2, r3, d9
 8004e74:	4606      	mov	r6, r0
 8004e76:	460f      	mov	r7, r1
 8004e78:	4620      	mov	r0, r4
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	f7fb f9a8 	bl	80001d0 <__aeabi_dsub>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4640      	mov	r0, r8
 8004e86:	4649      	mov	r1, r9
 8004e88:	f7fb f9a2 	bl	80001d0 <__aeabi_dsub>
 8004e8c:	a370      	add	r3, pc, #448	; (adr r3, 8005050 <__ieee754_pow+0x9e8>)
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	f7fb fb55 	bl	8000540 <__aeabi_dmul>
 8004e96:	a370      	add	r3, pc, #448	; (adr r3, 8005058 <__ieee754_pow+0x9f0>)
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	4680      	mov	r8, r0
 8004e9e:	4689      	mov	r9, r1
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb fb4c 	bl	8000540 <__aeabi_dmul>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4640      	mov	r0, r8
 8004eae:	4649      	mov	r1, r9
 8004eb0:	f7fb f990 	bl	80001d4 <__adddf3>
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	460d      	mov	r5, r1
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	f7fb f988 	bl	80001d4 <__adddf3>
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	4680      	mov	r8, r0
 8004eca:	4689      	mov	r9, r1
 8004ecc:	f7fb f980 	bl	80001d0 <__aeabi_dsub>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	f7fb f97a 	bl	80001d0 <__aeabi_dsub>
 8004edc:	4642      	mov	r2, r8
 8004ede:	4606      	mov	r6, r0
 8004ee0:	460f      	mov	r7, r1
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	4640      	mov	r0, r8
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	f7fb fb2a 	bl	8000540 <__aeabi_dmul>
 8004eec:	a35c      	add	r3, pc, #368	; (adr r3, 8005060 <__ieee754_pow+0x9f8>)
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	460d      	mov	r5, r1
 8004ef6:	f7fb fb23 	bl	8000540 <__aeabi_dmul>
 8004efa:	a35b      	add	r3, pc, #364	; (adr r3, 8005068 <__ieee754_pow+0xa00>)
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f7fb f966 	bl	80001d0 <__aeabi_dsub>
 8004f04:	4622      	mov	r2, r4
 8004f06:	462b      	mov	r3, r5
 8004f08:	f7fb fb1a 	bl	8000540 <__aeabi_dmul>
 8004f0c:	a358      	add	r3, pc, #352	; (adr r3, 8005070 <__ieee754_pow+0xa08>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f7fb f95f 	bl	80001d4 <__adddf3>
 8004f16:	4622      	mov	r2, r4
 8004f18:	462b      	mov	r3, r5
 8004f1a:	f7fb fb11 	bl	8000540 <__aeabi_dmul>
 8004f1e:	a356      	add	r3, pc, #344	; (adr r3, 8005078 <__ieee754_pow+0xa10>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f7fb f954 	bl	80001d0 <__aeabi_dsub>
 8004f28:	4622      	mov	r2, r4
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	f7fb fb08 	bl	8000540 <__aeabi_dmul>
 8004f30:	a353      	add	r3, pc, #332	; (adr r3, 8005080 <__ieee754_pow+0xa18>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f7fb f94d 	bl	80001d4 <__adddf3>
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	f7fb faff 	bl	8000540 <__aeabi_dmul>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4640      	mov	r0, r8
 8004f48:	4649      	mov	r1, r9
 8004f4a:	f7fb f941 	bl	80001d0 <__aeabi_dsub>
 8004f4e:	4604      	mov	r4, r0
 8004f50:	460d      	mov	r5, r1
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4640      	mov	r0, r8
 8004f58:	4649      	mov	r1, r9
 8004f5a:	f7fb faf1 	bl	8000540 <__aeabi_dmul>
 8004f5e:	2200      	movs	r2, #0
 8004f60:	ec41 0b19 	vmov	d9, r0, r1
 8004f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f68:	4620      	mov	r0, r4
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	f7fb f930 	bl	80001d0 <__aeabi_dsub>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	ec51 0b19 	vmov	r0, r1, d9
 8004f78:	f7fb fc0c 	bl	8000794 <__aeabi_ddiv>
 8004f7c:	4632      	mov	r2, r6
 8004f7e:	4604      	mov	r4, r0
 8004f80:	460d      	mov	r5, r1
 8004f82:	463b      	mov	r3, r7
 8004f84:	4640      	mov	r0, r8
 8004f86:	4649      	mov	r1, r9
 8004f88:	f7fb fada 	bl	8000540 <__aeabi_dmul>
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	463b      	mov	r3, r7
 8004f90:	f7fb f920 	bl	80001d4 <__adddf3>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4620      	mov	r0, r4
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	f7fb f918 	bl	80001d0 <__aeabi_dsub>
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	f7fb f914 	bl	80001d0 <__aeabi_dsub>
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4602      	mov	r2, r0
 8004fac:	493a      	ldr	r1, [pc, #232]	; (8005098 <__ieee754_pow+0xa30>)
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f7fb f90e 	bl	80001d0 <__aeabi_dsub>
 8004fb4:	e9cd 0100 	strd	r0, r1, [sp]
 8004fb8:	9b01      	ldr	r3, [sp, #4]
 8004fba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc2:	da2f      	bge.n	8005024 <__ieee754_pow+0x9bc>
 8004fc4:	4650      	mov	r0, sl
 8004fc6:	ed9d 0b00 	vldr	d0, [sp]
 8004fca:	f000 f9cd 	bl	8005368 <scalbn>
 8004fce:	ec51 0b10 	vmov	r0, r1, d0
 8004fd2:	ec53 2b18 	vmov	r2, r3, d8
 8004fd6:	f7ff bbe0 	b.w	800479a <__ieee754_pow+0x132>
 8004fda:	4b30      	ldr	r3, [pc, #192]	; (800509c <__ieee754_pow+0xa34>)
 8004fdc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004fe0:	429e      	cmp	r6, r3
 8004fe2:	f77f af0b 	ble.w	8004dfc <__ieee754_pow+0x794>
 8004fe6:	4b2e      	ldr	r3, [pc, #184]	; (80050a0 <__ieee754_pow+0xa38>)
 8004fe8:	440b      	add	r3, r1
 8004fea:	4303      	orrs	r3, r0
 8004fec:	d00b      	beq.n	8005006 <__ieee754_pow+0x99e>
 8004fee:	a326      	add	r3, pc, #152	; (adr r3, 8005088 <__ieee754_pow+0xa20>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	ec51 0b18 	vmov	r0, r1, d8
 8004ff8:	f7fb faa2 	bl	8000540 <__aeabi_dmul>
 8004ffc:	a322      	add	r3, pc, #136	; (adr r3, 8005088 <__ieee754_pow+0xa20>)
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	f7ff bbca 	b.w	800479a <__ieee754_pow+0x132>
 8005006:	4622      	mov	r2, r4
 8005008:	462b      	mov	r3, r5
 800500a:	f7fb f8e1 	bl	80001d0 <__aeabi_dsub>
 800500e:	4642      	mov	r2, r8
 8005010:	464b      	mov	r3, r9
 8005012:	f7fb fd1b 	bl	8000a4c <__aeabi_dcmpge>
 8005016:	2800      	cmp	r0, #0
 8005018:	f43f aef0 	beq.w	8004dfc <__ieee754_pow+0x794>
 800501c:	e7e7      	b.n	8004fee <__ieee754_pow+0x986>
 800501e:	f04f 0a00 	mov.w	sl, #0
 8005022:	e717      	b.n	8004e54 <__ieee754_pow+0x7ec>
 8005024:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005028:	4619      	mov	r1, r3
 800502a:	e7d2      	b.n	8004fd2 <__ieee754_pow+0x96a>
 800502c:	491a      	ldr	r1, [pc, #104]	; (8005098 <__ieee754_pow+0xa30>)
 800502e:	2000      	movs	r0, #0
 8005030:	f7ff bb9e 	b.w	8004770 <__ieee754_pow+0x108>
 8005034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005038:	f7ff bb9a 	b.w	8004770 <__ieee754_pow+0x108>
 800503c:	9000      	str	r0, [sp, #0]
 800503e:	f7ff bb76 	b.w	800472e <__ieee754_pow+0xc6>
 8005042:	2100      	movs	r1, #0
 8005044:	f7ff bb60 	b.w	8004708 <__ieee754_pow+0xa0>
 8005048:	00000000 	.word	0x00000000
 800504c:	3fe62e43 	.word	0x3fe62e43
 8005050:	fefa39ef 	.word	0xfefa39ef
 8005054:	3fe62e42 	.word	0x3fe62e42
 8005058:	0ca86c39 	.word	0x0ca86c39
 800505c:	be205c61 	.word	0xbe205c61
 8005060:	72bea4d0 	.word	0x72bea4d0
 8005064:	3e663769 	.word	0x3e663769
 8005068:	c5d26bf1 	.word	0xc5d26bf1
 800506c:	3ebbbd41 	.word	0x3ebbbd41
 8005070:	af25de2c 	.word	0xaf25de2c
 8005074:	3f11566a 	.word	0x3f11566a
 8005078:	16bebd93 	.word	0x16bebd93
 800507c:	3f66c16c 	.word	0x3f66c16c
 8005080:	5555553e 	.word	0x5555553e
 8005084:	3fc55555 	.word	0x3fc55555
 8005088:	c2f8f359 	.word	0xc2f8f359
 800508c:	01a56e1f 	.word	0x01a56e1f
 8005090:	3fe00000 	.word	0x3fe00000
 8005094:	000fffff 	.word	0x000fffff
 8005098:	3ff00000 	.word	0x3ff00000
 800509c:	4090cbff 	.word	0x4090cbff
 80050a0:	3f6f3400 	.word	0x3f6f3400
 80050a4:	652b82fe 	.word	0x652b82fe
 80050a8:	3c971547 	.word	0x3c971547

080050ac <__ieee754_sqrt>:
 80050ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b0:	ec55 4b10 	vmov	r4, r5, d0
 80050b4:	4e56      	ldr	r6, [pc, #344]	; (8005210 <__ieee754_sqrt+0x164>)
 80050b6:	43ae      	bics	r6, r5
 80050b8:	ee10 0a10 	vmov	r0, s0
 80050bc:	ee10 3a10 	vmov	r3, s0
 80050c0:	4629      	mov	r1, r5
 80050c2:	462a      	mov	r2, r5
 80050c4:	d110      	bne.n	80050e8 <__ieee754_sqrt+0x3c>
 80050c6:	ee10 2a10 	vmov	r2, s0
 80050ca:	462b      	mov	r3, r5
 80050cc:	f7fb fa38 	bl	8000540 <__aeabi_dmul>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4620      	mov	r0, r4
 80050d6:	4629      	mov	r1, r5
 80050d8:	f7fb f87c 	bl	80001d4 <__adddf3>
 80050dc:	4604      	mov	r4, r0
 80050de:	460d      	mov	r5, r1
 80050e0:	ec45 4b10 	vmov	d0, r4, r5
 80050e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050e8:	2d00      	cmp	r5, #0
 80050ea:	dc10      	bgt.n	800510e <__ieee754_sqrt+0x62>
 80050ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80050f0:	4330      	orrs	r0, r6
 80050f2:	d0f5      	beq.n	80050e0 <__ieee754_sqrt+0x34>
 80050f4:	b15d      	cbz	r5, 800510e <__ieee754_sqrt+0x62>
 80050f6:	ee10 2a10 	vmov	r2, s0
 80050fa:	462b      	mov	r3, r5
 80050fc:	ee10 0a10 	vmov	r0, s0
 8005100:	f7fb f866 	bl	80001d0 <__aeabi_dsub>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	f7fb fb44 	bl	8000794 <__aeabi_ddiv>
 800510c:	e7e6      	b.n	80050dc <__ieee754_sqrt+0x30>
 800510e:	1509      	asrs	r1, r1, #20
 8005110:	d076      	beq.n	8005200 <__ieee754_sqrt+0x154>
 8005112:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005116:	07ce      	lsls	r6, r1, #31
 8005118:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800511c:	bf5e      	ittt	pl
 800511e:	0fda      	lsrpl	r2, r3, #31
 8005120:	005b      	lslpl	r3, r3, #1
 8005122:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005126:	0fda      	lsrs	r2, r3, #31
 8005128:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800512c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005130:	2000      	movs	r0, #0
 8005132:	106d      	asrs	r5, r5, #1
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	f04f 0e16 	mov.w	lr, #22
 800513a:	4684      	mov	ip, r0
 800513c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005140:	eb0c 0401 	add.w	r4, ip, r1
 8005144:	4294      	cmp	r4, r2
 8005146:	bfde      	ittt	le
 8005148:	1b12      	suble	r2, r2, r4
 800514a:	eb04 0c01 	addle.w	ip, r4, r1
 800514e:	1840      	addle	r0, r0, r1
 8005150:	0052      	lsls	r2, r2, #1
 8005152:	f1be 0e01 	subs.w	lr, lr, #1
 8005156:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800515a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800515e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005162:	d1ed      	bne.n	8005140 <__ieee754_sqrt+0x94>
 8005164:	4671      	mov	r1, lr
 8005166:	2720      	movs	r7, #32
 8005168:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800516c:	4562      	cmp	r2, ip
 800516e:	eb04 060e 	add.w	r6, r4, lr
 8005172:	dc02      	bgt.n	800517a <__ieee754_sqrt+0xce>
 8005174:	d113      	bne.n	800519e <__ieee754_sqrt+0xf2>
 8005176:	429e      	cmp	r6, r3
 8005178:	d811      	bhi.n	800519e <__ieee754_sqrt+0xf2>
 800517a:	2e00      	cmp	r6, #0
 800517c:	eb06 0e04 	add.w	lr, r6, r4
 8005180:	da43      	bge.n	800520a <__ieee754_sqrt+0x15e>
 8005182:	f1be 0f00 	cmp.w	lr, #0
 8005186:	db40      	blt.n	800520a <__ieee754_sqrt+0x15e>
 8005188:	f10c 0801 	add.w	r8, ip, #1
 800518c:	eba2 020c 	sub.w	r2, r2, ip
 8005190:	429e      	cmp	r6, r3
 8005192:	bf88      	it	hi
 8005194:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8005198:	1b9b      	subs	r3, r3, r6
 800519a:	4421      	add	r1, r4
 800519c:	46c4      	mov	ip, r8
 800519e:	0052      	lsls	r2, r2, #1
 80051a0:	3f01      	subs	r7, #1
 80051a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80051a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80051aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80051ae:	d1dd      	bne.n	800516c <__ieee754_sqrt+0xc0>
 80051b0:	4313      	orrs	r3, r2
 80051b2:	d006      	beq.n	80051c2 <__ieee754_sqrt+0x116>
 80051b4:	1c4c      	adds	r4, r1, #1
 80051b6:	bf13      	iteet	ne
 80051b8:	3101      	addne	r1, #1
 80051ba:	3001      	addeq	r0, #1
 80051bc:	4639      	moveq	r1, r7
 80051be:	f021 0101 	bicne.w	r1, r1, #1
 80051c2:	1043      	asrs	r3, r0, #1
 80051c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80051c8:	0849      	lsrs	r1, r1, #1
 80051ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80051ce:	07c2      	lsls	r2, r0, #31
 80051d0:	bf48      	it	mi
 80051d2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80051d6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80051da:	460c      	mov	r4, r1
 80051dc:	463d      	mov	r5, r7
 80051de:	e77f      	b.n	80050e0 <__ieee754_sqrt+0x34>
 80051e0:	0ada      	lsrs	r2, r3, #11
 80051e2:	3815      	subs	r0, #21
 80051e4:	055b      	lsls	r3, r3, #21
 80051e6:	2a00      	cmp	r2, #0
 80051e8:	d0fa      	beq.n	80051e0 <__ieee754_sqrt+0x134>
 80051ea:	02d7      	lsls	r7, r2, #11
 80051ec:	d50a      	bpl.n	8005204 <__ieee754_sqrt+0x158>
 80051ee:	f1c1 0420 	rsb	r4, r1, #32
 80051f2:	fa23 f404 	lsr.w	r4, r3, r4
 80051f6:	1e4d      	subs	r5, r1, #1
 80051f8:	408b      	lsls	r3, r1
 80051fa:	4322      	orrs	r2, r4
 80051fc:	1b41      	subs	r1, r0, r5
 80051fe:	e788      	b.n	8005112 <__ieee754_sqrt+0x66>
 8005200:	4608      	mov	r0, r1
 8005202:	e7f0      	b.n	80051e6 <__ieee754_sqrt+0x13a>
 8005204:	0052      	lsls	r2, r2, #1
 8005206:	3101      	adds	r1, #1
 8005208:	e7ef      	b.n	80051ea <__ieee754_sqrt+0x13e>
 800520a:	46e0      	mov	r8, ip
 800520c:	e7be      	b.n	800518c <__ieee754_sqrt+0xe0>
 800520e:	bf00      	nop
 8005210:	7ff00000 	.word	0x7ff00000

08005214 <fabs>:
 8005214:	ec51 0b10 	vmov	r0, r1, d0
 8005218:	ee10 2a10 	vmov	r2, s0
 800521c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005220:	ec43 2b10 	vmov	d0, r2, r3
 8005224:	4770      	bx	lr

08005226 <finite>:
 8005226:	b082      	sub	sp, #8
 8005228:	ed8d 0b00 	vstr	d0, [sp]
 800522c:	9801      	ldr	r0, [sp, #4]
 800522e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005232:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005236:	0fc0      	lsrs	r0, r0, #31
 8005238:	b002      	add	sp, #8
 800523a:	4770      	bx	lr
 800523c:	0000      	movs	r0, r0
	...

08005240 <nan>:
 8005240:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005248 <nan+0x8>
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	00000000 	.word	0x00000000
 800524c:	7ff80000 	.word	0x7ff80000

08005250 <rint>:
 8005250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005252:	ec51 0b10 	vmov	r0, r1, d0
 8005256:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800525a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800525e:	2e13      	cmp	r6, #19
 8005260:	ee10 4a10 	vmov	r4, s0
 8005264:	460b      	mov	r3, r1
 8005266:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800526a:	dc58      	bgt.n	800531e <rint+0xce>
 800526c:	2e00      	cmp	r6, #0
 800526e:	da2b      	bge.n	80052c8 <rint+0x78>
 8005270:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005274:	4302      	orrs	r2, r0
 8005276:	d023      	beq.n	80052c0 <rint+0x70>
 8005278:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800527c:	4302      	orrs	r2, r0
 800527e:	4254      	negs	r4, r2
 8005280:	4314      	orrs	r4, r2
 8005282:	0c4b      	lsrs	r3, r1, #17
 8005284:	0b24      	lsrs	r4, r4, #12
 8005286:	045b      	lsls	r3, r3, #17
 8005288:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800528c:	ea44 0103 	orr.w	r1, r4, r3
 8005290:	4b32      	ldr	r3, [pc, #200]	; (800535c <rint+0x10c>)
 8005292:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005296:	e9d3 6700 	ldrd	r6, r7, [r3]
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4630      	mov	r0, r6
 80052a0:	4639      	mov	r1, r7
 80052a2:	f7fa ff97 	bl	80001d4 <__adddf3>
 80052a6:	e9cd 0100 	strd	r0, r1, [sp]
 80052aa:	463b      	mov	r3, r7
 80052ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052b0:	4632      	mov	r2, r6
 80052b2:	f7fa ff8d 	bl	80001d0 <__aeabi_dsub>
 80052b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80052ba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80052be:	4639      	mov	r1, r7
 80052c0:	ec41 0b10 	vmov	d0, r0, r1
 80052c4:	b003      	add	sp, #12
 80052c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c8:	4a25      	ldr	r2, [pc, #148]	; (8005360 <rint+0x110>)
 80052ca:	4132      	asrs	r2, r6
 80052cc:	ea01 0702 	and.w	r7, r1, r2
 80052d0:	4307      	orrs	r7, r0
 80052d2:	d0f5      	beq.n	80052c0 <rint+0x70>
 80052d4:	0851      	lsrs	r1, r2, #1
 80052d6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80052da:	4314      	orrs	r4, r2
 80052dc:	d00c      	beq.n	80052f8 <rint+0xa8>
 80052de:	ea23 0201 	bic.w	r2, r3, r1
 80052e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80052e6:	2e13      	cmp	r6, #19
 80052e8:	fa43 f606 	asr.w	r6, r3, r6
 80052ec:	bf0c      	ite	eq
 80052ee:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80052f2:	2400      	movne	r4, #0
 80052f4:	ea42 0306 	orr.w	r3, r2, r6
 80052f8:	4918      	ldr	r1, [pc, #96]	; (800535c <rint+0x10c>)
 80052fa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80052fe:	4622      	mov	r2, r4
 8005300:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005304:	4620      	mov	r0, r4
 8005306:	4629      	mov	r1, r5
 8005308:	f7fa ff64 	bl	80001d4 <__adddf3>
 800530c:	e9cd 0100 	strd	r0, r1, [sp]
 8005310:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005314:	4622      	mov	r2, r4
 8005316:	462b      	mov	r3, r5
 8005318:	f7fa ff5a 	bl	80001d0 <__aeabi_dsub>
 800531c:	e7d0      	b.n	80052c0 <rint+0x70>
 800531e:	2e33      	cmp	r6, #51	; 0x33
 8005320:	dd07      	ble.n	8005332 <rint+0xe2>
 8005322:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005326:	d1cb      	bne.n	80052c0 <rint+0x70>
 8005328:	ee10 2a10 	vmov	r2, s0
 800532c:	f7fa ff52 	bl	80001d4 <__adddf3>
 8005330:	e7c6      	b.n	80052c0 <rint+0x70>
 8005332:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005336:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800533a:	40d6      	lsrs	r6, r2
 800533c:	4230      	tst	r0, r6
 800533e:	d0bf      	beq.n	80052c0 <rint+0x70>
 8005340:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8005344:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8005348:	bf1f      	itttt	ne
 800534a:	ea24 0101 	bicne.w	r1, r4, r1
 800534e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005352:	fa44 f202 	asrne.w	r2, r4, r2
 8005356:	ea41 0402 	orrne.w	r4, r1, r2
 800535a:	e7cd      	b.n	80052f8 <rint+0xa8>
 800535c:	080056b0 	.word	0x080056b0
 8005360:	000fffff 	.word	0x000fffff
 8005364:	00000000 	.word	0x00000000

08005368 <scalbn>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	ec55 4b10 	vmov	r4, r5, d0
 800536e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005372:	4606      	mov	r6, r0
 8005374:	462b      	mov	r3, r5
 8005376:	b99a      	cbnz	r2, 80053a0 <scalbn+0x38>
 8005378:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800537c:	4323      	orrs	r3, r4
 800537e:	d036      	beq.n	80053ee <scalbn+0x86>
 8005380:	4b39      	ldr	r3, [pc, #228]	; (8005468 <scalbn+0x100>)
 8005382:	4629      	mov	r1, r5
 8005384:	ee10 0a10 	vmov	r0, s0
 8005388:	2200      	movs	r2, #0
 800538a:	f7fb f8d9 	bl	8000540 <__aeabi_dmul>
 800538e:	4b37      	ldr	r3, [pc, #220]	; (800546c <scalbn+0x104>)
 8005390:	429e      	cmp	r6, r3
 8005392:	4604      	mov	r4, r0
 8005394:	460d      	mov	r5, r1
 8005396:	da10      	bge.n	80053ba <scalbn+0x52>
 8005398:	a32b      	add	r3, pc, #172	; (adr r3, 8005448 <scalbn+0xe0>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	e03a      	b.n	8005416 <scalbn+0xae>
 80053a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80053a4:	428a      	cmp	r2, r1
 80053a6:	d10c      	bne.n	80053c2 <scalbn+0x5a>
 80053a8:	ee10 2a10 	vmov	r2, s0
 80053ac:	4620      	mov	r0, r4
 80053ae:	4629      	mov	r1, r5
 80053b0:	f7fa ff10 	bl	80001d4 <__adddf3>
 80053b4:	4604      	mov	r4, r0
 80053b6:	460d      	mov	r5, r1
 80053b8:	e019      	b.n	80053ee <scalbn+0x86>
 80053ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80053be:	460b      	mov	r3, r1
 80053c0:	3a36      	subs	r2, #54	; 0x36
 80053c2:	4432      	add	r2, r6
 80053c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80053c8:	428a      	cmp	r2, r1
 80053ca:	dd08      	ble.n	80053de <scalbn+0x76>
 80053cc:	2d00      	cmp	r5, #0
 80053ce:	a120      	add	r1, pc, #128	; (adr r1, 8005450 <scalbn+0xe8>)
 80053d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053d4:	da1c      	bge.n	8005410 <scalbn+0xa8>
 80053d6:	a120      	add	r1, pc, #128	; (adr r1, 8005458 <scalbn+0xf0>)
 80053d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053dc:	e018      	b.n	8005410 <scalbn+0xa8>
 80053de:	2a00      	cmp	r2, #0
 80053e0:	dd08      	ble.n	80053f4 <scalbn+0x8c>
 80053e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80053e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80053ee:	ec45 4b10 	vmov	d0, r4, r5
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80053f8:	da19      	bge.n	800542e <scalbn+0xc6>
 80053fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80053fe:	429e      	cmp	r6, r3
 8005400:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005404:	dd0a      	ble.n	800541c <scalbn+0xb4>
 8005406:	a112      	add	r1, pc, #72	; (adr r1, 8005450 <scalbn+0xe8>)
 8005408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e2      	bne.n	80053d6 <scalbn+0x6e>
 8005410:	a30f      	add	r3, pc, #60	; (adr r3, 8005450 <scalbn+0xe8>)
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	f7fb f893 	bl	8000540 <__aeabi_dmul>
 800541a:	e7cb      	b.n	80053b4 <scalbn+0x4c>
 800541c:	a10a      	add	r1, pc, #40	; (adr r1, 8005448 <scalbn+0xe0>)
 800541e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0b8      	beq.n	8005398 <scalbn+0x30>
 8005426:	a10e      	add	r1, pc, #56	; (adr r1, 8005460 <scalbn+0xf8>)
 8005428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800542c:	e7b4      	b.n	8005398 <scalbn+0x30>
 800542e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005432:	3236      	adds	r2, #54	; 0x36
 8005434:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005438:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800543c:	4620      	mov	r0, r4
 800543e:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <scalbn+0x108>)
 8005440:	2200      	movs	r2, #0
 8005442:	e7e8      	b.n	8005416 <scalbn+0xae>
 8005444:	f3af 8000 	nop.w
 8005448:	c2f8f359 	.word	0xc2f8f359
 800544c:	01a56e1f 	.word	0x01a56e1f
 8005450:	8800759c 	.word	0x8800759c
 8005454:	7e37e43c 	.word	0x7e37e43c
 8005458:	8800759c 	.word	0x8800759c
 800545c:	fe37e43c 	.word	0xfe37e43c
 8005460:	c2f8f359 	.word	0xc2f8f359
 8005464:	81a56e1f 	.word	0x81a56e1f
 8005468:	43500000 	.word	0x43500000
 800546c:	ffff3cb0 	.word	0xffff3cb0
 8005470:	3c900000 	.word	0x3c900000

08005474 <__errno>:
 8005474:	4b01      	ldr	r3, [pc, #4]	; (800547c <__errno+0x8>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000020 	.word	0x20000020

08005480 <_init>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	bf00      	nop
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr

0800548c <_fini>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr
=======
 80046be:	e0b9      	b.n	8004834 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c2:	461c      	mov	r4, r3
 80046c4:	f04f 0500 	mov.w	r5, #0
 80046c8:	4622      	mov	r2, r4
 80046ca:	462b      	mov	r3, r5
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	6139      	str	r1, [r7, #16]
 80046d0:	415b      	adcs	r3, r3
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046d8:	1912      	adds	r2, r2, r4
 80046da:	eb45 0303 	adc.w	r3, r5, r3
 80046de:	f04f 0000 	mov.w	r0, #0
 80046e2:	f04f 0100 	mov.w	r1, #0
 80046e6:	00d9      	lsls	r1, r3, #3
 80046e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046ec:	00d0      	lsls	r0, r2, #3
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	eb12 0804 	adds.w	r8, r2, r4
 80046f6:	eb43 0905 	adc.w	r9, r3, r5
 80046fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	4618      	mov	r0, r3
 8004700:	f04f 0100 	mov.w	r1, #0
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	008b      	lsls	r3, r1, #2
 800470e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004712:	0082      	lsls	r2, r0, #2
 8004714:	4640      	mov	r0, r8
 8004716:	4649      	mov	r1, r9
 8004718:	f7fc fa12 	bl	8000b40 <__aeabi_uldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4b49      	ldr	r3, [pc, #292]	; (8004848 <UART_SetConfig+0x38c>)
 8004722:	fba3 2302 	umull	r2, r3, r3, r2
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	011e      	lsls	r6, r3, #4
 800472a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800472c:	4618      	mov	r0, r3
 800472e:	f04f 0100 	mov.w	r1, #0
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	1894      	adds	r4, r2, r2
 8004738:	60bc      	str	r4, [r7, #8]
 800473a:	415b      	adcs	r3, r3
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004742:	1812      	adds	r2, r2, r0
 8004744:	eb41 0303 	adc.w	r3, r1, r3
 8004748:	f04f 0400 	mov.w	r4, #0
 800474c:	f04f 0500 	mov.w	r5, #0
 8004750:	00dd      	lsls	r5, r3, #3
 8004752:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004756:	00d4      	lsls	r4, r2, #3
 8004758:	4622      	mov	r2, r4
 800475a:	462b      	mov	r3, r5
 800475c:	1814      	adds	r4, r2, r0
 800475e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004760:	414b      	adcs	r3, r1
 8004762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4618      	mov	r0, r3
 800476a:	f04f 0100 	mov.w	r1, #0
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	008b      	lsls	r3, r1, #2
 8004778:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800477c:	0082      	lsls	r2, r0, #2
 800477e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004782:	f7fc f9dd 	bl	8000b40 <__aeabi_uldivmod>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4b2f      	ldr	r3, [pc, #188]	; (8004848 <UART_SetConfig+0x38c>)
 800478c:	fba3 1302 	umull	r1, r3, r3, r2
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	2164      	movs	r1, #100	; 0x64
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	3332      	adds	r3, #50	; 0x32
 800479e:	4a2a      	ldr	r2, [pc, #168]	; (8004848 <UART_SetConfig+0x38c>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047aa:	441e      	add	r6, r3
 80047ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ae:	4618      	mov	r0, r3
 80047b0:	f04f 0100 	mov.w	r1, #0
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	1894      	adds	r4, r2, r2
 80047ba:	603c      	str	r4, [r7, #0]
 80047bc:	415b      	adcs	r3, r3
 80047be:	607b      	str	r3, [r7, #4]
 80047c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047c4:	1812      	adds	r2, r2, r0
 80047c6:	eb41 0303 	adc.w	r3, r1, r3
 80047ca:	f04f 0400 	mov.w	r4, #0
 80047ce:	f04f 0500 	mov.w	r5, #0
 80047d2:	00dd      	lsls	r5, r3, #3
 80047d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047d8:	00d4      	lsls	r4, r2, #3
 80047da:	4622      	mov	r2, r4
 80047dc:	462b      	mov	r3, r5
 80047de:	eb12 0a00 	adds.w	sl, r2, r0
 80047e2:	eb43 0b01 	adc.w	fp, r3, r1
 80047e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	008b      	lsls	r3, r1, #2
 80047fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047fe:	0082      	lsls	r2, r0, #2
 8004800:	4650      	mov	r0, sl
 8004802:	4659      	mov	r1, fp
 8004804:	f7fc f99c 	bl	8000b40 <__aeabi_uldivmod>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <UART_SetConfig+0x38c>)
 800480e:	fba3 1302 	umull	r1, r3, r3, r2
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	2164      	movs	r1, #100	; 0x64
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	3332      	adds	r3, #50	; 0x32
 8004820:	4a09      	ldr	r2, [pc, #36]	; (8004848 <UART_SetConfig+0x38c>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	f003 020f 	and.w	r2, r3, #15
 800482c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4432      	add	r2, r6
 8004832:	609a      	str	r2, [r3, #8]
}
 8004834:	bf00      	nop
 8004836:	377c      	adds	r7, #124	; 0x7c
 8004838:	46bd      	mov	sp, r7
 800483a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483e:	bf00      	nop
 8004840:	40011000 	.word	0x40011000
 8004844:	40011400 	.word	0x40011400
 8004848:	51eb851f 	.word	0x51eb851f

0800484c <__libc_init_array>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	4d0d      	ldr	r5, [pc, #52]	; (8004884 <__libc_init_array+0x38>)
 8004850:	4c0d      	ldr	r4, [pc, #52]	; (8004888 <__libc_init_array+0x3c>)
 8004852:	1b64      	subs	r4, r4, r5
 8004854:	10a4      	asrs	r4, r4, #2
 8004856:	2600      	movs	r6, #0
 8004858:	42a6      	cmp	r6, r4
 800485a:	d109      	bne.n	8004870 <__libc_init_array+0x24>
 800485c:	4d0b      	ldr	r5, [pc, #44]	; (800488c <__libc_init_array+0x40>)
 800485e:	4c0c      	ldr	r4, [pc, #48]	; (8004890 <__libc_init_array+0x44>)
 8004860:	f001 f9e2 	bl	8005c28 <_init>
 8004864:	1b64      	subs	r4, r4, r5
 8004866:	10a4      	asrs	r4, r4, #2
 8004868:	2600      	movs	r6, #0
 800486a:	42a6      	cmp	r6, r4
 800486c:	d105      	bne.n	800487a <__libc_init_array+0x2e>
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	f855 3b04 	ldr.w	r3, [r5], #4
 8004874:	4798      	blx	r3
 8004876:	3601      	adds	r6, #1
 8004878:	e7ee      	b.n	8004858 <__libc_init_array+0xc>
 800487a:	f855 3b04 	ldr.w	r3, [r5], #4
 800487e:	4798      	blx	r3
 8004880:	3601      	adds	r6, #1
 8004882:	e7f2      	b.n	800486a <__libc_init_array+0x1e>
 8004884:	08005e80 	.word	0x08005e80
 8004888:	08005e80 	.word	0x08005e80
 800488c:	08005e80 	.word	0x08005e80
 8004890:	08005e84 	.word	0x08005e84

08004894 <memset>:
 8004894:	4402      	add	r2, r0
 8004896:	4603      	mov	r3, r0
 8004898:	4293      	cmp	r3, r2
 800489a:	d100      	bne.n	800489e <memset+0xa>
 800489c:	4770      	bx	lr
 800489e:	f803 1b01 	strb.w	r1, [r3], #1
 80048a2:	e7f9      	b.n	8004898 <memset+0x4>
 80048a4:	0000      	movs	r0, r0
	...

080048a8 <log>:
 80048a8:	b538      	push	{r3, r4, r5, lr}
 80048aa:	ed2d 8b02 	vpush	{d8}
 80048ae:	ec55 4b10 	vmov	r4, r5, d0
 80048b2:	f000 f8f1 	bl	8004a98 <__ieee754_log>
 80048b6:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <log+0x88>)
 80048b8:	eeb0 8a40 	vmov.f32	s16, s0
 80048bc:	eef0 8a60 	vmov.f32	s17, s1
 80048c0:	f993 3000 	ldrsb.w	r3, [r3]
 80048c4:	3301      	adds	r3, #1
 80048c6:	d01a      	beq.n	80048fe <log+0x56>
 80048c8:	4622      	mov	r2, r4
 80048ca:	462b      	mov	r3, r5
 80048cc:	4620      	mov	r0, r4
 80048ce:	4629      	mov	r1, r5
 80048d0:	f7fc f8d0 	bl	8000a74 <__aeabi_dcmpun>
 80048d4:	b998      	cbnz	r0, 80048fe <log+0x56>
 80048d6:	2200      	movs	r2, #0
 80048d8:	2300      	movs	r3, #0
 80048da:	4620      	mov	r0, r4
 80048dc:	4629      	mov	r1, r5
 80048de:	f7fc f8bf 	bl	8000a60 <__aeabi_dcmpgt>
 80048e2:	b960      	cbnz	r0, 80048fe <log+0x56>
 80048e4:	2200      	movs	r2, #0
 80048e6:	2300      	movs	r3, #0
 80048e8:	4620      	mov	r0, r4
 80048ea:	4629      	mov	r1, r5
 80048ec:	f7fc f890 	bl	8000a10 <__aeabi_dcmpeq>
 80048f0:	b160      	cbz	r0, 800490c <log+0x64>
 80048f2:	f001 f993 	bl	8005c1c <__errno>
 80048f6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8004928 <log+0x80>
 80048fa:	2322      	movs	r3, #34	; 0x22
 80048fc:	6003      	str	r3, [r0, #0]
 80048fe:	eeb0 0a48 	vmov.f32	s0, s16
 8004902:	eef0 0a68 	vmov.f32	s1, s17
 8004906:	ecbd 8b02 	vpop	{d8}
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	f001 f986 	bl	8005c1c <__errno>
 8004910:	ecbd 8b02 	vpop	{d8}
 8004914:	2321      	movs	r3, #33	; 0x21
 8004916:	6003      	str	r3, [r0, #0]
 8004918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800491c:	4805      	ldr	r0, [pc, #20]	; (8004934 <log+0x8c>)
 800491e:	f001 b863 	b.w	80059e8 <nan>
 8004922:	bf00      	nop
 8004924:	f3af 8000 	nop.w
 8004928:	00000000 	.word	0x00000000
 800492c:	fff00000 	.word	0xfff00000
 8004930:	20000084 	.word	0x20000084
 8004934:	08005e30 	.word	0x08005e30

08004938 <pow>:
 8004938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800493c:	ec59 8b10 	vmov	r8, r9, d0
 8004940:	ec57 6b11 	vmov	r6, r7, d1
 8004944:	f000 fa64 	bl	8004e10 <__ieee754_pow>
 8004948:	4b4e      	ldr	r3, [pc, #312]	; (8004a84 <pow+0x14c>)
 800494a:	f993 3000 	ldrsb.w	r3, [r3]
 800494e:	3301      	adds	r3, #1
 8004950:	ec55 4b10 	vmov	r4, r5, d0
 8004954:	d015      	beq.n	8004982 <pow+0x4a>
 8004956:	4632      	mov	r2, r6
 8004958:	463b      	mov	r3, r7
 800495a:	4630      	mov	r0, r6
 800495c:	4639      	mov	r1, r7
 800495e:	f7fc f889 	bl	8000a74 <__aeabi_dcmpun>
 8004962:	b970      	cbnz	r0, 8004982 <pow+0x4a>
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	4640      	mov	r0, r8
 800496a:	4649      	mov	r1, r9
 800496c:	f7fc f882 	bl	8000a74 <__aeabi_dcmpun>
 8004970:	2200      	movs	r2, #0
 8004972:	2300      	movs	r3, #0
 8004974:	b148      	cbz	r0, 800498a <pow+0x52>
 8004976:	4630      	mov	r0, r6
 8004978:	4639      	mov	r1, r7
 800497a:	f7fc f849 	bl	8000a10 <__aeabi_dcmpeq>
 800497e:	2800      	cmp	r0, #0
 8004980:	d17d      	bne.n	8004a7e <pow+0x146>
 8004982:	ec45 4b10 	vmov	d0, r4, r5
 8004986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800498a:	4640      	mov	r0, r8
 800498c:	4649      	mov	r1, r9
 800498e:	f7fc f83f 	bl	8000a10 <__aeabi_dcmpeq>
 8004992:	b1e0      	cbz	r0, 80049ce <pow+0x96>
 8004994:	2200      	movs	r2, #0
 8004996:	2300      	movs	r3, #0
 8004998:	4630      	mov	r0, r6
 800499a:	4639      	mov	r1, r7
 800499c:	f7fc f838 	bl	8000a10 <__aeabi_dcmpeq>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d16c      	bne.n	8004a7e <pow+0x146>
 80049a4:	ec47 6b10 	vmov	d0, r6, r7
 80049a8:	f001 f811 	bl	80059ce <finite>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d0e8      	beq.n	8004982 <pow+0x4a>
 80049b0:	2200      	movs	r2, #0
 80049b2:	2300      	movs	r3, #0
 80049b4:	4630      	mov	r0, r6
 80049b6:	4639      	mov	r1, r7
 80049b8:	f7fc f834 	bl	8000a24 <__aeabi_dcmplt>
 80049bc:	2800      	cmp	r0, #0
 80049be:	d0e0      	beq.n	8004982 <pow+0x4a>
 80049c0:	f001 f92c 	bl	8005c1c <__errno>
 80049c4:	2321      	movs	r3, #33	; 0x21
 80049c6:	6003      	str	r3, [r0, #0]
 80049c8:	2400      	movs	r4, #0
 80049ca:	4d2f      	ldr	r5, [pc, #188]	; (8004a88 <pow+0x150>)
 80049cc:	e7d9      	b.n	8004982 <pow+0x4a>
 80049ce:	ec45 4b10 	vmov	d0, r4, r5
 80049d2:	f000 fffc 	bl	80059ce <finite>
 80049d6:	bbb8      	cbnz	r0, 8004a48 <pow+0x110>
 80049d8:	ec49 8b10 	vmov	d0, r8, r9
 80049dc:	f000 fff7 	bl	80059ce <finite>
 80049e0:	b390      	cbz	r0, 8004a48 <pow+0x110>
 80049e2:	ec47 6b10 	vmov	d0, r6, r7
 80049e6:	f000 fff2 	bl	80059ce <finite>
 80049ea:	b368      	cbz	r0, 8004a48 <pow+0x110>
 80049ec:	4622      	mov	r2, r4
 80049ee:	462b      	mov	r3, r5
 80049f0:	4620      	mov	r0, r4
 80049f2:	4629      	mov	r1, r5
 80049f4:	f7fc f83e 	bl	8000a74 <__aeabi_dcmpun>
 80049f8:	b160      	cbz	r0, 8004a14 <pow+0xdc>
 80049fa:	f001 f90f 	bl	8005c1c <__errno>
 80049fe:	2321      	movs	r3, #33	; 0x21
 8004a00:	6003      	str	r3, [r0, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	2300      	movs	r3, #0
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f7fb fec3 	bl	8000794 <__aeabi_ddiv>
 8004a0e:	4604      	mov	r4, r0
 8004a10:	460d      	mov	r5, r1
 8004a12:	e7b6      	b.n	8004982 <pow+0x4a>
 8004a14:	f001 f902 	bl	8005c1c <__errno>
 8004a18:	2322      	movs	r3, #34	; 0x22
 8004a1a:	6003      	str	r3, [r0, #0]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2300      	movs	r3, #0
 8004a20:	4640      	mov	r0, r8
 8004a22:	4649      	mov	r1, r9
 8004a24:	f7fb fffe 	bl	8000a24 <__aeabi_dcmplt>
 8004a28:	2400      	movs	r4, #0
 8004a2a:	b158      	cbz	r0, 8004a44 <pow+0x10c>
 8004a2c:	ec47 6b10 	vmov	d0, r6, r7
 8004a30:	f000 ffe2 	bl	80059f8 <rint>
 8004a34:	4632      	mov	r2, r6
 8004a36:	ec51 0b10 	vmov	r0, r1, d0
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	f7fb ffe8 	bl	8000a10 <__aeabi_dcmpeq>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d0c2      	beq.n	80049ca <pow+0x92>
 8004a44:	4d11      	ldr	r5, [pc, #68]	; (8004a8c <pow+0x154>)
 8004a46:	e79c      	b.n	8004982 <pow+0x4a>
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	4629      	mov	r1, r5
 8004a50:	f7fb ffde 	bl	8000a10 <__aeabi_dcmpeq>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d094      	beq.n	8004982 <pow+0x4a>
 8004a58:	ec49 8b10 	vmov	d0, r8, r9
 8004a5c:	f000 ffb7 	bl	80059ce <finite>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d08e      	beq.n	8004982 <pow+0x4a>
 8004a64:	ec47 6b10 	vmov	d0, r6, r7
 8004a68:	f000 ffb1 	bl	80059ce <finite>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d088      	beq.n	8004982 <pow+0x4a>
 8004a70:	f001 f8d4 	bl	8005c1c <__errno>
 8004a74:	2322      	movs	r3, #34	; 0x22
 8004a76:	6003      	str	r3, [r0, #0]
 8004a78:	2400      	movs	r4, #0
 8004a7a:	2500      	movs	r5, #0
 8004a7c:	e781      	b.n	8004982 <pow+0x4a>
 8004a7e:	4d04      	ldr	r5, [pc, #16]	; (8004a90 <pow+0x158>)
 8004a80:	2400      	movs	r4, #0
 8004a82:	e77e      	b.n	8004982 <pow+0x4a>
 8004a84:	20000084 	.word	0x20000084
 8004a88:	fff00000 	.word	0xfff00000
 8004a8c:	7ff00000 	.word	0x7ff00000
 8004a90:	3ff00000 	.word	0x3ff00000
 8004a94:	00000000 	.word	0x00000000

08004a98 <__ieee754_log>:
 8004a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a9c:	ec51 0b10 	vmov	r0, r1, d0
 8004aa0:	ed2d 8b04 	vpush	{d8-d9}
 8004aa4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	460d      	mov	r5, r1
 8004aac:	da29      	bge.n	8004b02 <__ieee754_log+0x6a>
 8004aae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004ab2:	4303      	orrs	r3, r0
 8004ab4:	ee10 2a10 	vmov	r2, s0
 8004ab8:	d10c      	bne.n	8004ad4 <__ieee754_log+0x3c>
 8004aba:	49cf      	ldr	r1, [pc, #828]	; (8004df8 <__ieee754_log+0x360>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	2300      	movs	r3, #0
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	f7fb fe67 	bl	8000794 <__aeabi_ddiv>
 8004ac6:	ec41 0b10 	vmov	d0, r0, r1
 8004aca:	b003      	add	sp, #12
 8004acc:	ecbd 8b04 	vpop	{d8-d9}
 8004ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad4:	2900      	cmp	r1, #0
 8004ad6:	da05      	bge.n	8004ae4 <__ieee754_log+0x4c>
 8004ad8:	460b      	mov	r3, r1
 8004ada:	f7fb fb79 	bl	80001d0 <__aeabi_dsub>
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e7ee      	b.n	8004ac2 <__ieee754_log+0x2a>
 8004ae4:	4bc5      	ldr	r3, [pc, #788]	; (8004dfc <__ieee754_log+0x364>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f7fb fd2a 	bl	8000540 <__aeabi_dmul>
 8004aec:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8004af0:	460d      	mov	r5, r1
 8004af2:	4ac3      	ldr	r2, [pc, #780]	; (8004e00 <__ieee754_log+0x368>)
 8004af4:	4295      	cmp	r5, r2
 8004af6:	dd06      	ble.n	8004b06 <__ieee754_log+0x6e>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	f7fb fb6a 	bl	80001d4 <__adddf3>
 8004b00:	e7e1      	b.n	8004ac6 <__ieee754_log+0x2e>
 8004b02:	2300      	movs	r3, #0
 8004b04:	e7f5      	b.n	8004af2 <__ieee754_log+0x5a>
 8004b06:	152c      	asrs	r4, r5, #20
 8004b08:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004b0c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004b10:	441c      	add	r4, r3
 8004b12:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8004b16:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8004b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b1e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8004b22:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8004b26:	ea42 0105 	orr.w	r1, r2, r5
 8004b2a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8004b2e:	2200      	movs	r2, #0
 8004b30:	4bb4      	ldr	r3, [pc, #720]	; (8004e04 <__ieee754_log+0x36c>)
 8004b32:	f7fb fb4d 	bl	80001d0 <__aeabi_dsub>
 8004b36:	1cab      	adds	r3, r5, #2
 8004b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	4682      	mov	sl, r0
 8004b40:	468b      	mov	fp, r1
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	dc53      	bgt.n	8004bf0 <__ieee754_log+0x158>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f7fb ff61 	bl	8000a10 <__aeabi_dcmpeq>
 8004b4e:	b1d0      	cbz	r0, 8004b86 <__ieee754_log+0xee>
 8004b50:	2c00      	cmp	r4, #0
 8004b52:	f000 8122 	beq.w	8004d9a <__ieee754_log+0x302>
 8004b56:	4620      	mov	r0, r4
 8004b58:	f7fb fc88 	bl	800046c <__aeabi_i2d>
 8004b5c:	a390      	add	r3, pc, #576	; (adr r3, 8004da0 <__ieee754_log+0x308>)
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	4606      	mov	r6, r0
 8004b64:	460f      	mov	r7, r1
 8004b66:	f7fb fceb 	bl	8000540 <__aeabi_dmul>
 8004b6a:	a38f      	add	r3, pc, #572	; (adr r3, 8004da8 <__ieee754_log+0x310>)
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	4604      	mov	r4, r0
 8004b72:	460d      	mov	r5, r1
 8004b74:	4630      	mov	r0, r6
 8004b76:	4639      	mov	r1, r7
 8004b78:	f7fb fce2 	bl	8000540 <__aeabi_dmul>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4620      	mov	r0, r4
 8004b82:	4629      	mov	r1, r5
 8004b84:	e7ba      	b.n	8004afc <__ieee754_log+0x64>
 8004b86:	a38a      	add	r3, pc, #552	; (adr r3, 8004db0 <__ieee754_log+0x318>)
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	4650      	mov	r0, sl
 8004b8e:	4659      	mov	r1, fp
 8004b90:	f7fb fcd6 	bl	8000540 <__aeabi_dmul>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	2000      	movs	r0, #0
 8004b9a:	499b      	ldr	r1, [pc, #620]	; (8004e08 <__ieee754_log+0x370>)
 8004b9c:	f7fb fb18 	bl	80001d0 <__aeabi_dsub>
 8004ba0:	4652      	mov	r2, sl
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	460f      	mov	r7, r1
 8004ba6:	465b      	mov	r3, fp
 8004ba8:	4650      	mov	r0, sl
 8004baa:	4659      	mov	r1, fp
 8004bac:	f7fb fcc8 	bl	8000540 <__aeabi_dmul>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	4639      	mov	r1, r7
 8004bb8:	f7fb fcc2 	bl	8000540 <__aeabi_dmul>
 8004bbc:	4606      	mov	r6, r0
 8004bbe:	460f      	mov	r7, r1
 8004bc0:	b914      	cbnz	r4, 8004bc8 <__ieee754_log+0x130>
 8004bc2:	4632      	mov	r2, r6
 8004bc4:	463b      	mov	r3, r7
 8004bc6:	e0a2      	b.n	8004d0e <__ieee754_log+0x276>
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f7fb fc4f 	bl	800046c <__aeabi_i2d>
 8004bce:	a374      	add	r3, pc, #464	; (adr r3, 8004da0 <__ieee754_log+0x308>)
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	4680      	mov	r8, r0
 8004bd6:	4689      	mov	r9, r1
 8004bd8:	f7fb fcb2 	bl	8000540 <__aeabi_dmul>
 8004bdc:	a372      	add	r3, pc, #456	; (adr r3, 8004da8 <__ieee754_log+0x310>)
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	4604      	mov	r4, r0
 8004be4:	460d      	mov	r5, r1
 8004be6:	4640      	mov	r0, r8
 8004be8:	4649      	mov	r1, r9
 8004bea:	f7fb fca9 	bl	8000540 <__aeabi_dmul>
 8004bee:	e0a7      	b.n	8004d40 <__ieee754_log+0x2a8>
 8004bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bf4:	f7fb faee 	bl	80001d4 <__adddf3>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4650      	mov	r0, sl
 8004bfe:	4659      	mov	r1, fp
 8004c00:	f7fb fdc8 	bl	8000794 <__aeabi_ddiv>
 8004c04:	ec41 0b18 	vmov	d8, r0, r1
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f7fb fc2f 	bl	800046c <__aeabi_i2d>
 8004c0e:	ec53 2b18 	vmov	r2, r3, d8
 8004c12:	ec41 0b19 	vmov	d9, r0, r1
 8004c16:	ec51 0b18 	vmov	r0, r1, d8
 8004c1a:	f7fb fc91 	bl	8000540 <__aeabi_dmul>
 8004c1e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8004c22:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4680      	mov	r8, r0
 8004c2e:	4689      	mov	r9, r1
 8004c30:	f7fb fc86 	bl	8000540 <__aeabi_dmul>
 8004c34:	a360      	add	r3, pc, #384	; (adr r3, 8004db8 <__ieee754_log+0x320>)
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	460f      	mov	r7, r1
 8004c3e:	f7fb fc7f 	bl	8000540 <__aeabi_dmul>
 8004c42:	a35f      	add	r3, pc, #380	; (adr r3, 8004dc0 <__ieee754_log+0x328>)
 8004c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c48:	f7fb fac4 	bl	80001d4 <__adddf3>
 8004c4c:	4632      	mov	r2, r6
 8004c4e:	463b      	mov	r3, r7
 8004c50:	f7fb fc76 	bl	8000540 <__aeabi_dmul>
 8004c54:	a35c      	add	r3, pc, #368	; (adr r3, 8004dc8 <__ieee754_log+0x330>)
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f7fb fabb 	bl	80001d4 <__adddf3>
 8004c5e:	4632      	mov	r2, r6
 8004c60:	463b      	mov	r3, r7
 8004c62:	f7fb fc6d 	bl	8000540 <__aeabi_dmul>
 8004c66:	a35a      	add	r3, pc, #360	; (adr r3, 8004dd0 <__ieee754_log+0x338>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f7fb fab2 	bl	80001d4 <__adddf3>
 8004c70:	4642      	mov	r2, r8
 8004c72:	464b      	mov	r3, r9
 8004c74:	f7fb fc64 	bl	8000540 <__aeabi_dmul>
 8004c78:	a357      	add	r3, pc, #348	; (adr r3, 8004dd8 <__ieee754_log+0x340>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	4680      	mov	r8, r0
 8004c80:	4689      	mov	r9, r1
 8004c82:	4630      	mov	r0, r6
 8004c84:	4639      	mov	r1, r7
 8004c86:	f7fb fc5b 	bl	8000540 <__aeabi_dmul>
 8004c8a:	a355      	add	r3, pc, #340	; (adr r3, 8004de0 <__ieee754_log+0x348>)
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	f7fb faa0 	bl	80001d4 <__adddf3>
 8004c94:	4632      	mov	r2, r6
 8004c96:	463b      	mov	r3, r7
 8004c98:	f7fb fc52 	bl	8000540 <__aeabi_dmul>
 8004c9c:	a352      	add	r3, pc, #328	; (adr r3, 8004de8 <__ieee754_log+0x350>)
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f7fb fa97 	bl	80001d4 <__adddf3>
 8004ca6:	4632      	mov	r2, r6
 8004ca8:	463b      	mov	r3, r7
 8004caa:	f7fb fc49 	bl	8000540 <__aeabi_dmul>
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	4640      	mov	r0, r8
 8004cb6:	f7fb fa8d 	bl	80001d4 <__adddf3>
 8004cba:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004cbe:	9b01      	ldr	r3, [sp, #4]
 8004cc0:	3551      	adds	r5, #81	; 0x51
 8004cc2:	431d      	orrs	r5, r3
 8004cc4:	2d00      	cmp	r5, #0
 8004cc6:	4680      	mov	r8, r0
 8004cc8:	4689      	mov	r9, r1
 8004cca:	dd48      	ble.n	8004d5e <__ieee754_log+0x2c6>
 8004ccc:	4b4e      	ldr	r3, [pc, #312]	; (8004e08 <__ieee754_log+0x370>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	4650      	mov	r0, sl
 8004cd2:	4659      	mov	r1, fp
 8004cd4:	f7fb fc34 	bl	8000540 <__aeabi_dmul>
 8004cd8:	4652      	mov	r2, sl
 8004cda:	465b      	mov	r3, fp
 8004cdc:	f7fb fc30 	bl	8000540 <__aeabi_dmul>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	460f      	mov	r7, r1
 8004ce8:	4640      	mov	r0, r8
 8004cea:	4649      	mov	r1, r9
 8004cec:	f7fb fa72 	bl	80001d4 <__adddf3>
 8004cf0:	ec53 2b18 	vmov	r2, r3, d8
 8004cf4:	f7fb fc24 	bl	8000540 <__aeabi_dmul>
 8004cf8:	4680      	mov	r8, r0
 8004cfa:	4689      	mov	r9, r1
 8004cfc:	b964      	cbnz	r4, 8004d18 <__ieee754_log+0x280>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4630      	mov	r0, r6
 8004d04:	4639      	mov	r1, r7
 8004d06:	f7fb fa63 	bl	80001d0 <__aeabi_dsub>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4650      	mov	r0, sl
 8004d10:	4659      	mov	r1, fp
 8004d12:	f7fb fa5d 	bl	80001d0 <__aeabi_dsub>
 8004d16:	e6d6      	b.n	8004ac6 <__ieee754_log+0x2e>
 8004d18:	a321      	add	r3, pc, #132	; (adr r3, 8004da0 <__ieee754_log+0x308>)
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	ec51 0b19 	vmov	r0, r1, d9
 8004d22:	f7fb fc0d 	bl	8000540 <__aeabi_dmul>
 8004d26:	a320      	add	r3, pc, #128	; (adr r3, 8004da8 <__ieee754_log+0x310>)
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	460d      	mov	r5, r1
 8004d30:	ec51 0b19 	vmov	r0, r1, d9
 8004d34:	f7fb fc04 	bl	8000540 <__aeabi_dmul>
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	f7fb fa4a 	bl	80001d4 <__adddf3>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4630      	mov	r0, r6
 8004d46:	4639      	mov	r1, r7
 8004d48:	f7fb fa42 	bl	80001d0 <__aeabi_dsub>
 8004d4c:	4652      	mov	r2, sl
 8004d4e:	465b      	mov	r3, fp
 8004d50:	f7fb fa3e 	bl	80001d0 <__aeabi_dsub>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4620      	mov	r0, r4
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	e7d9      	b.n	8004d12 <__ieee754_log+0x27a>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4650      	mov	r0, sl
 8004d64:	4659      	mov	r1, fp
 8004d66:	f7fb fa33 	bl	80001d0 <__aeabi_dsub>
 8004d6a:	ec53 2b18 	vmov	r2, r3, d8
 8004d6e:	f7fb fbe7 	bl	8000540 <__aeabi_dmul>
 8004d72:	4606      	mov	r6, r0
 8004d74:	460f      	mov	r7, r1
 8004d76:	2c00      	cmp	r4, #0
 8004d78:	f43f af23 	beq.w	8004bc2 <__ieee754_log+0x12a>
 8004d7c:	a308      	add	r3, pc, #32	; (adr r3, 8004da0 <__ieee754_log+0x308>)
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	ec51 0b19 	vmov	r0, r1, d9
 8004d86:	f7fb fbdb 	bl	8000540 <__aeabi_dmul>
 8004d8a:	a307      	add	r3, pc, #28	; (adr r3, 8004da8 <__ieee754_log+0x310>)
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	4604      	mov	r4, r0
 8004d92:	460d      	mov	r5, r1
 8004d94:	ec51 0b19 	vmov	r0, r1, d9
 8004d98:	e727      	b.n	8004bea <__ieee754_log+0x152>
 8004d9a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8004df0 <__ieee754_log+0x358>
 8004d9e:	e694      	b.n	8004aca <__ieee754_log+0x32>
 8004da0:	fee00000 	.word	0xfee00000
 8004da4:	3fe62e42 	.word	0x3fe62e42
 8004da8:	35793c76 	.word	0x35793c76
 8004dac:	3dea39ef 	.word	0x3dea39ef
 8004db0:	55555555 	.word	0x55555555
 8004db4:	3fd55555 	.word	0x3fd55555
 8004db8:	df3e5244 	.word	0xdf3e5244
 8004dbc:	3fc2f112 	.word	0x3fc2f112
 8004dc0:	96cb03de 	.word	0x96cb03de
 8004dc4:	3fc74664 	.word	0x3fc74664
 8004dc8:	94229359 	.word	0x94229359
 8004dcc:	3fd24924 	.word	0x3fd24924
 8004dd0:	55555593 	.word	0x55555593
 8004dd4:	3fe55555 	.word	0x3fe55555
 8004dd8:	d078c69f 	.word	0xd078c69f
 8004ddc:	3fc39a09 	.word	0x3fc39a09
 8004de0:	1d8e78af 	.word	0x1d8e78af
 8004de4:	3fcc71c5 	.word	0x3fcc71c5
 8004de8:	9997fa04 	.word	0x9997fa04
 8004dec:	3fd99999 	.word	0x3fd99999
	...
 8004df8:	c3500000 	.word	0xc3500000
 8004dfc:	43500000 	.word	0x43500000
 8004e00:	7fefffff 	.word	0x7fefffff
 8004e04:	3ff00000 	.word	0x3ff00000
 8004e08:	3fe00000 	.word	0x3fe00000
 8004e0c:	00000000 	.word	0x00000000

08004e10 <__ieee754_pow>:
 8004e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e14:	ed2d 8b06 	vpush	{d8-d10}
 8004e18:	b08d      	sub	sp, #52	; 0x34
 8004e1a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004e1e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8004e22:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004e26:	ea56 0100 	orrs.w	r1, r6, r0
 8004e2a:	ec53 2b10 	vmov	r2, r3, d0
 8004e2e:	f000 84d1 	beq.w	80057d4 <__ieee754_pow+0x9c4>
 8004e32:	497f      	ldr	r1, [pc, #508]	; (8005030 <__ieee754_pow+0x220>)
 8004e34:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8004e38:	428c      	cmp	r4, r1
 8004e3a:	ee10 8a10 	vmov	r8, s0
 8004e3e:	4699      	mov	r9, r3
 8004e40:	dc09      	bgt.n	8004e56 <__ieee754_pow+0x46>
 8004e42:	d103      	bne.n	8004e4c <__ieee754_pow+0x3c>
 8004e44:	b97a      	cbnz	r2, 8004e66 <__ieee754_pow+0x56>
 8004e46:	42a6      	cmp	r6, r4
 8004e48:	dd02      	ble.n	8004e50 <__ieee754_pow+0x40>
 8004e4a:	e00c      	b.n	8004e66 <__ieee754_pow+0x56>
 8004e4c:	428e      	cmp	r6, r1
 8004e4e:	dc02      	bgt.n	8004e56 <__ieee754_pow+0x46>
 8004e50:	428e      	cmp	r6, r1
 8004e52:	d110      	bne.n	8004e76 <__ieee754_pow+0x66>
 8004e54:	b178      	cbz	r0, 8004e76 <__ieee754_pow+0x66>
 8004e56:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004e5a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004e5e:	ea54 0308 	orrs.w	r3, r4, r8
 8004e62:	f000 84b7 	beq.w	80057d4 <__ieee754_pow+0x9c4>
 8004e66:	4873      	ldr	r0, [pc, #460]	; (8005034 <__ieee754_pow+0x224>)
 8004e68:	b00d      	add	sp, #52	; 0x34
 8004e6a:	ecbd 8b06 	vpop	{d8-d10}
 8004e6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e72:	f000 bdb9 	b.w	80059e8 <nan>
 8004e76:	f1b9 0f00 	cmp.w	r9, #0
 8004e7a:	da36      	bge.n	8004eea <__ieee754_pow+0xda>
 8004e7c:	496e      	ldr	r1, [pc, #440]	; (8005038 <__ieee754_pow+0x228>)
 8004e7e:	428e      	cmp	r6, r1
 8004e80:	dc51      	bgt.n	8004f26 <__ieee754_pow+0x116>
 8004e82:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8004e86:	428e      	cmp	r6, r1
 8004e88:	f340 84af 	ble.w	80057ea <__ieee754_pow+0x9da>
 8004e8c:	1531      	asrs	r1, r6, #20
 8004e8e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004e92:	2914      	cmp	r1, #20
 8004e94:	dd0f      	ble.n	8004eb6 <__ieee754_pow+0xa6>
 8004e96:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8004e9a:	fa20 fc01 	lsr.w	ip, r0, r1
 8004e9e:	fa0c f101 	lsl.w	r1, ip, r1
 8004ea2:	4281      	cmp	r1, r0
 8004ea4:	f040 84a1 	bne.w	80057ea <__ieee754_pow+0x9da>
 8004ea8:	f00c 0c01 	and.w	ip, ip, #1
 8004eac:	f1cc 0102 	rsb	r1, ip, #2
 8004eb0:	9100      	str	r1, [sp, #0]
 8004eb2:	b180      	cbz	r0, 8004ed6 <__ieee754_pow+0xc6>
 8004eb4:	e059      	b.n	8004f6a <__ieee754_pow+0x15a>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d155      	bne.n	8004f66 <__ieee754_pow+0x156>
 8004eba:	f1c1 0114 	rsb	r1, r1, #20
 8004ebe:	fa46 fc01 	asr.w	ip, r6, r1
 8004ec2:	fa0c f101 	lsl.w	r1, ip, r1
 8004ec6:	42b1      	cmp	r1, r6
 8004ec8:	f040 848c 	bne.w	80057e4 <__ieee754_pow+0x9d4>
 8004ecc:	f00c 0c01 	and.w	ip, ip, #1
 8004ed0:	f1cc 0102 	rsb	r1, ip, #2
 8004ed4:	9100      	str	r1, [sp, #0]
 8004ed6:	4959      	ldr	r1, [pc, #356]	; (800503c <__ieee754_pow+0x22c>)
 8004ed8:	428e      	cmp	r6, r1
 8004eda:	d12d      	bne.n	8004f38 <__ieee754_pow+0x128>
 8004edc:	2f00      	cmp	r7, #0
 8004ede:	da79      	bge.n	8004fd4 <__ieee754_pow+0x1c4>
 8004ee0:	4956      	ldr	r1, [pc, #344]	; (800503c <__ieee754_pow+0x22c>)
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	f7fb fc56 	bl	8000794 <__aeabi_ddiv>
 8004ee8:	e016      	b.n	8004f18 <__ieee754_pow+0x108>
 8004eea:	2100      	movs	r1, #0
 8004eec:	9100      	str	r1, [sp, #0]
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d13b      	bne.n	8004f6a <__ieee754_pow+0x15a>
 8004ef2:	494f      	ldr	r1, [pc, #316]	; (8005030 <__ieee754_pow+0x220>)
 8004ef4:	428e      	cmp	r6, r1
 8004ef6:	d1ee      	bne.n	8004ed6 <__ieee754_pow+0xc6>
 8004ef8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004efc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004f00:	ea53 0308 	orrs.w	r3, r3, r8
 8004f04:	f000 8466 	beq.w	80057d4 <__ieee754_pow+0x9c4>
 8004f08:	4b4d      	ldr	r3, [pc, #308]	; (8005040 <__ieee754_pow+0x230>)
 8004f0a:	429c      	cmp	r4, r3
 8004f0c:	dd0d      	ble.n	8004f2a <__ieee754_pow+0x11a>
 8004f0e:	2f00      	cmp	r7, #0
 8004f10:	f280 8464 	bge.w	80057dc <__ieee754_pow+0x9cc>
 8004f14:	2000      	movs	r0, #0
 8004f16:	2100      	movs	r1, #0
 8004f18:	ec41 0b10 	vmov	d0, r0, r1
 8004f1c:	b00d      	add	sp, #52	; 0x34
 8004f1e:	ecbd 8b06 	vpop	{d8-d10}
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	2102      	movs	r1, #2
 8004f28:	e7e0      	b.n	8004eec <__ieee754_pow+0xdc>
 8004f2a:	2f00      	cmp	r7, #0
 8004f2c:	daf2      	bge.n	8004f14 <__ieee754_pow+0x104>
 8004f2e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8004f32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004f36:	e7ef      	b.n	8004f18 <__ieee754_pow+0x108>
 8004f38:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004f3c:	d104      	bne.n	8004f48 <__ieee754_pow+0x138>
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	f7fb fafd 	bl	8000540 <__aeabi_dmul>
 8004f46:	e7e7      	b.n	8004f18 <__ieee754_pow+0x108>
 8004f48:	493e      	ldr	r1, [pc, #248]	; (8005044 <__ieee754_pow+0x234>)
 8004f4a:	428f      	cmp	r7, r1
 8004f4c:	d10d      	bne.n	8004f6a <__ieee754_pow+0x15a>
 8004f4e:	f1b9 0f00 	cmp.w	r9, #0
 8004f52:	db0a      	blt.n	8004f6a <__ieee754_pow+0x15a>
 8004f54:	ec43 2b10 	vmov	d0, r2, r3
 8004f58:	b00d      	add	sp, #52	; 0x34
 8004f5a:	ecbd 8b06 	vpop	{d8-d10}
 8004f5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f62:	f000 bc77 	b.w	8005854 <__ieee754_sqrt>
 8004f66:	2100      	movs	r1, #0
 8004f68:	9100      	str	r1, [sp, #0]
 8004f6a:	ec43 2b10 	vmov	d0, r2, r3
 8004f6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f72:	f000 fd23 	bl	80059bc <fabs>
 8004f76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f7a:	ec51 0b10 	vmov	r0, r1, d0
 8004f7e:	f1b8 0f00 	cmp.w	r8, #0
 8004f82:	d12a      	bne.n	8004fda <__ieee754_pow+0x1ca>
 8004f84:	b12c      	cbz	r4, 8004f92 <__ieee754_pow+0x182>
 8004f86:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800503c <__ieee754_pow+0x22c>
 8004f8a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8004f8e:	45e6      	cmp	lr, ip
 8004f90:	d123      	bne.n	8004fda <__ieee754_pow+0x1ca>
 8004f92:	2f00      	cmp	r7, #0
 8004f94:	da05      	bge.n	8004fa2 <__ieee754_pow+0x192>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	4927      	ldr	r1, [pc, #156]	; (800503c <__ieee754_pow+0x22c>)
 8004f9e:	f7fb fbf9 	bl	8000794 <__aeabi_ddiv>
 8004fa2:	f1b9 0f00 	cmp.w	r9, #0
 8004fa6:	dab7      	bge.n	8004f18 <__ieee754_pow+0x108>
 8004fa8:	9b00      	ldr	r3, [sp, #0]
 8004faa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004fae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004fb2:	4323      	orrs	r3, r4
 8004fb4:	d108      	bne.n	8004fc8 <__ieee754_pow+0x1b8>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f7fb f907 	bl	80001d0 <__aeabi_dsub>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	e78d      	b.n	8004ee4 <__ieee754_pow+0xd4>
 8004fc8:	9b00      	ldr	r3, [sp, #0]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d1a4      	bne.n	8004f18 <__ieee754_pow+0x108>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	e79e      	b.n	8004f18 <__ieee754_pow+0x108>
 8004fda:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8004fde:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8004fe2:	950a      	str	r5, [sp, #40]	; 0x28
 8004fe4:	9d00      	ldr	r5, [sp, #0]
 8004fe6:	46ac      	mov	ip, r5
 8004fe8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004fea:	ea5c 0505 	orrs.w	r5, ip, r5
 8004fee:	d0e4      	beq.n	8004fba <__ieee754_pow+0x1aa>
 8004ff0:	4b15      	ldr	r3, [pc, #84]	; (8005048 <__ieee754_pow+0x238>)
 8004ff2:	429e      	cmp	r6, r3
 8004ff4:	f340 80fc 	ble.w	80051f0 <__ieee754_pow+0x3e0>
 8004ff8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004ffc:	429e      	cmp	r6, r3
 8004ffe:	4b10      	ldr	r3, [pc, #64]	; (8005040 <__ieee754_pow+0x230>)
 8005000:	dd07      	ble.n	8005012 <__ieee754_pow+0x202>
 8005002:	429c      	cmp	r4, r3
 8005004:	dc0a      	bgt.n	800501c <__ieee754_pow+0x20c>
 8005006:	2f00      	cmp	r7, #0
 8005008:	da84      	bge.n	8004f14 <__ieee754_pow+0x104>
 800500a:	a307      	add	r3, pc, #28	; (adr r3, 8005028 <__ieee754_pow+0x218>)
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	e795      	b.n	8004f3e <__ieee754_pow+0x12e>
 8005012:	429c      	cmp	r4, r3
 8005014:	dbf7      	blt.n	8005006 <__ieee754_pow+0x1f6>
 8005016:	4b09      	ldr	r3, [pc, #36]	; (800503c <__ieee754_pow+0x22c>)
 8005018:	429c      	cmp	r4, r3
 800501a:	dd17      	ble.n	800504c <__ieee754_pow+0x23c>
 800501c:	2f00      	cmp	r7, #0
 800501e:	dcf4      	bgt.n	800500a <__ieee754_pow+0x1fa>
 8005020:	e778      	b.n	8004f14 <__ieee754_pow+0x104>
 8005022:	bf00      	nop
 8005024:	f3af 8000 	nop.w
 8005028:	8800759c 	.word	0x8800759c
 800502c:	7e37e43c 	.word	0x7e37e43c
 8005030:	7ff00000 	.word	0x7ff00000
 8005034:	08005e30 	.word	0x08005e30
 8005038:	433fffff 	.word	0x433fffff
 800503c:	3ff00000 	.word	0x3ff00000
 8005040:	3fefffff 	.word	0x3fefffff
 8005044:	3fe00000 	.word	0x3fe00000
 8005048:	41e00000 	.word	0x41e00000
 800504c:	4b64      	ldr	r3, [pc, #400]	; (80051e0 <__ieee754_pow+0x3d0>)
 800504e:	2200      	movs	r2, #0
 8005050:	f7fb f8be 	bl	80001d0 <__aeabi_dsub>
 8005054:	a356      	add	r3, pc, #344	; (adr r3, 80051b0 <__ieee754_pow+0x3a0>)
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	4604      	mov	r4, r0
 800505c:	460d      	mov	r5, r1
 800505e:	f7fb fa6f 	bl	8000540 <__aeabi_dmul>
 8005062:	a355      	add	r3, pc, #340	; (adr r3, 80051b8 <__ieee754_pow+0x3a8>)
 8005064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005068:	4606      	mov	r6, r0
 800506a:	460f      	mov	r7, r1
 800506c:	4620      	mov	r0, r4
 800506e:	4629      	mov	r1, r5
 8005070:	f7fb fa66 	bl	8000540 <__aeabi_dmul>
 8005074:	4b5b      	ldr	r3, [pc, #364]	; (80051e4 <__ieee754_pow+0x3d4>)
 8005076:	4682      	mov	sl, r0
 8005078:	468b      	mov	fp, r1
 800507a:	2200      	movs	r2, #0
 800507c:	4620      	mov	r0, r4
 800507e:	4629      	mov	r1, r5
 8005080:	f7fb fa5e 	bl	8000540 <__aeabi_dmul>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	a14d      	add	r1, pc, #308	; (adr r1, 80051c0 <__ieee754_pow+0x3b0>)
 800508a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800508e:	f7fb f89f 	bl	80001d0 <__aeabi_dsub>
 8005092:	4622      	mov	r2, r4
 8005094:	462b      	mov	r3, r5
 8005096:	f7fb fa53 	bl	8000540 <__aeabi_dmul>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	2000      	movs	r0, #0
 80050a0:	4951      	ldr	r1, [pc, #324]	; (80051e8 <__ieee754_pow+0x3d8>)
 80050a2:	f7fb f895 	bl	80001d0 <__aeabi_dsub>
 80050a6:	4622      	mov	r2, r4
 80050a8:	4680      	mov	r8, r0
 80050aa:	4689      	mov	r9, r1
 80050ac:	462b      	mov	r3, r5
 80050ae:	4620      	mov	r0, r4
 80050b0:	4629      	mov	r1, r5
 80050b2:	f7fb fa45 	bl	8000540 <__aeabi_dmul>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4640      	mov	r0, r8
 80050bc:	4649      	mov	r1, r9
 80050be:	f7fb fa3f 	bl	8000540 <__aeabi_dmul>
 80050c2:	a341      	add	r3, pc, #260	; (adr r3, 80051c8 <__ieee754_pow+0x3b8>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f7fb fa3a 	bl	8000540 <__aeabi_dmul>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4650      	mov	r0, sl
 80050d2:	4659      	mov	r1, fp
 80050d4:	f7fb f87c 	bl	80001d0 <__aeabi_dsub>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4680      	mov	r8, r0
 80050de:	4689      	mov	r9, r1
 80050e0:	4630      	mov	r0, r6
 80050e2:	4639      	mov	r1, r7
 80050e4:	f7fb f876 	bl	80001d4 <__adddf3>
 80050e8:	2400      	movs	r4, #0
 80050ea:	4632      	mov	r2, r6
 80050ec:	463b      	mov	r3, r7
 80050ee:	4620      	mov	r0, r4
 80050f0:	460d      	mov	r5, r1
 80050f2:	f7fb f86d 	bl	80001d0 <__aeabi_dsub>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4640      	mov	r0, r8
 80050fc:	4649      	mov	r1, r9
 80050fe:	f7fb f867 	bl	80001d0 <__aeabi_dsub>
 8005102:	9b00      	ldr	r3, [sp, #0]
 8005104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005106:	3b01      	subs	r3, #1
 8005108:	4313      	orrs	r3, r2
 800510a:	4682      	mov	sl, r0
 800510c:	468b      	mov	fp, r1
 800510e:	f040 81f1 	bne.w	80054f4 <__ieee754_pow+0x6e4>
 8005112:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80051d0 <__ieee754_pow+0x3c0>
 8005116:	eeb0 8a47 	vmov.f32	s16, s14
 800511a:	eef0 8a67 	vmov.f32	s17, s15
 800511e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005122:	2600      	movs	r6, #0
 8005124:	4632      	mov	r2, r6
 8005126:	463b      	mov	r3, r7
 8005128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800512c:	f7fb f850 	bl	80001d0 <__aeabi_dsub>
 8005130:	4622      	mov	r2, r4
 8005132:	462b      	mov	r3, r5
 8005134:	f7fb fa04 	bl	8000540 <__aeabi_dmul>
 8005138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800513c:	4680      	mov	r8, r0
 800513e:	4689      	mov	r9, r1
 8005140:	4650      	mov	r0, sl
 8005142:	4659      	mov	r1, fp
 8005144:	f7fb f9fc 	bl	8000540 <__aeabi_dmul>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4640      	mov	r0, r8
 800514e:	4649      	mov	r1, r9
 8005150:	f7fb f840 	bl	80001d4 <__adddf3>
 8005154:	4632      	mov	r2, r6
 8005156:	463b      	mov	r3, r7
 8005158:	4680      	mov	r8, r0
 800515a:	4689      	mov	r9, r1
 800515c:	4620      	mov	r0, r4
 800515e:	4629      	mov	r1, r5
 8005160:	f7fb f9ee 	bl	8000540 <__aeabi_dmul>
 8005164:	460b      	mov	r3, r1
 8005166:	4604      	mov	r4, r0
 8005168:	460d      	mov	r5, r1
 800516a:	4602      	mov	r2, r0
 800516c:	4649      	mov	r1, r9
 800516e:	4640      	mov	r0, r8
 8005170:	f7fb f830 	bl	80001d4 <__adddf3>
 8005174:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <__ieee754_pow+0x3dc>)
 8005176:	4299      	cmp	r1, r3
 8005178:	ec45 4b19 	vmov	d9, r4, r5
 800517c:	4606      	mov	r6, r0
 800517e:	460f      	mov	r7, r1
 8005180:	468b      	mov	fp, r1
 8005182:	f340 82fe 	ble.w	8005782 <__ieee754_pow+0x972>
 8005186:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800518a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800518e:	4303      	orrs	r3, r0
 8005190:	f000 81f0 	beq.w	8005574 <__ieee754_pow+0x764>
 8005194:	a310      	add	r3, pc, #64	; (adr r3, 80051d8 <__ieee754_pow+0x3c8>)
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	ec51 0b18 	vmov	r0, r1, d8
 800519e:	f7fb f9cf 	bl	8000540 <__aeabi_dmul>
 80051a2:	a30d      	add	r3, pc, #52	; (adr r3, 80051d8 <__ieee754_pow+0x3c8>)
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	e6cb      	b.n	8004f42 <__ieee754_pow+0x132>
 80051aa:	bf00      	nop
 80051ac:	f3af 8000 	nop.w
 80051b0:	60000000 	.word	0x60000000
 80051b4:	3ff71547 	.word	0x3ff71547
 80051b8:	f85ddf44 	.word	0xf85ddf44
 80051bc:	3e54ae0b 	.word	0x3e54ae0b
 80051c0:	55555555 	.word	0x55555555
 80051c4:	3fd55555 	.word	0x3fd55555
 80051c8:	652b82fe 	.word	0x652b82fe
 80051cc:	3ff71547 	.word	0x3ff71547
 80051d0:	00000000 	.word	0x00000000
 80051d4:	bff00000 	.word	0xbff00000
 80051d8:	8800759c 	.word	0x8800759c
 80051dc:	7e37e43c 	.word	0x7e37e43c
 80051e0:	3ff00000 	.word	0x3ff00000
 80051e4:	3fd00000 	.word	0x3fd00000
 80051e8:	3fe00000 	.word	0x3fe00000
 80051ec:	408fffff 	.word	0x408fffff
 80051f0:	4bd7      	ldr	r3, [pc, #860]	; (8005550 <__ieee754_pow+0x740>)
 80051f2:	ea03 0309 	and.w	r3, r3, r9
 80051f6:	2200      	movs	r2, #0
 80051f8:	b92b      	cbnz	r3, 8005206 <__ieee754_pow+0x3f6>
 80051fa:	4bd6      	ldr	r3, [pc, #856]	; (8005554 <__ieee754_pow+0x744>)
 80051fc:	f7fb f9a0 	bl	8000540 <__aeabi_dmul>
 8005200:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005204:	460c      	mov	r4, r1
 8005206:	1523      	asrs	r3, r4, #20
 8005208:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800520c:	4413      	add	r3, r2
 800520e:	9309      	str	r3, [sp, #36]	; 0x24
 8005210:	4bd1      	ldr	r3, [pc, #836]	; (8005558 <__ieee754_pow+0x748>)
 8005212:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005216:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800521a:	429c      	cmp	r4, r3
 800521c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005220:	dd08      	ble.n	8005234 <__ieee754_pow+0x424>
 8005222:	4bce      	ldr	r3, [pc, #824]	; (800555c <__ieee754_pow+0x74c>)
 8005224:	429c      	cmp	r4, r3
 8005226:	f340 8163 	ble.w	80054f0 <__ieee754_pow+0x6e0>
 800522a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522c:	3301      	adds	r3, #1
 800522e:	9309      	str	r3, [sp, #36]	; 0x24
 8005230:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005234:	2400      	movs	r4, #0
 8005236:	00e3      	lsls	r3, r4, #3
 8005238:	930b      	str	r3, [sp, #44]	; 0x2c
 800523a:	4bc9      	ldr	r3, [pc, #804]	; (8005560 <__ieee754_pow+0x750>)
 800523c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005240:	ed93 7b00 	vldr	d7, [r3]
 8005244:	4629      	mov	r1, r5
 8005246:	ec53 2b17 	vmov	r2, r3, d7
 800524a:	eeb0 8a47 	vmov.f32	s16, s14
 800524e:	eef0 8a67 	vmov.f32	s17, s15
 8005252:	4682      	mov	sl, r0
 8005254:	f7fa ffbc 	bl	80001d0 <__aeabi_dsub>
 8005258:	4652      	mov	r2, sl
 800525a:	4606      	mov	r6, r0
 800525c:	460f      	mov	r7, r1
 800525e:	462b      	mov	r3, r5
 8005260:	ec51 0b18 	vmov	r0, r1, d8
 8005264:	f7fa ffb6 	bl	80001d4 <__adddf3>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	2000      	movs	r0, #0
 800526e:	49bd      	ldr	r1, [pc, #756]	; (8005564 <__ieee754_pow+0x754>)
 8005270:	f7fb fa90 	bl	8000794 <__aeabi_ddiv>
 8005274:	ec41 0b19 	vmov	d9, r0, r1
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4630      	mov	r0, r6
 800527e:	4639      	mov	r1, r7
 8005280:	f7fb f95e 	bl	8000540 <__aeabi_dmul>
 8005284:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005288:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800528c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005290:	2300      	movs	r3, #0
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005298:	46ab      	mov	fp, r5
 800529a:	106d      	asrs	r5, r5, #1
 800529c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80052a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80052a4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80052a8:	2200      	movs	r2, #0
 80052aa:	4640      	mov	r0, r8
 80052ac:	4649      	mov	r1, r9
 80052ae:	4614      	mov	r4, r2
 80052b0:	461d      	mov	r5, r3
 80052b2:	f7fb f945 	bl	8000540 <__aeabi_dmul>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4630      	mov	r0, r6
 80052bc:	4639      	mov	r1, r7
 80052be:	f7fa ff87 	bl	80001d0 <__aeabi_dsub>
 80052c2:	ec53 2b18 	vmov	r2, r3, d8
 80052c6:	4606      	mov	r6, r0
 80052c8:	460f      	mov	r7, r1
 80052ca:	4620      	mov	r0, r4
 80052cc:	4629      	mov	r1, r5
 80052ce:	f7fa ff7f 	bl	80001d0 <__aeabi_dsub>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4650      	mov	r0, sl
 80052d8:	4659      	mov	r1, fp
 80052da:	f7fa ff79 	bl	80001d0 <__aeabi_dsub>
 80052de:	4642      	mov	r2, r8
 80052e0:	464b      	mov	r3, r9
 80052e2:	f7fb f92d 	bl	8000540 <__aeabi_dmul>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4630      	mov	r0, r6
 80052ec:	4639      	mov	r1, r7
 80052ee:	f7fa ff6f 	bl	80001d0 <__aeabi_dsub>
 80052f2:	ec53 2b19 	vmov	r2, r3, d9
 80052f6:	f7fb f923 	bl	8000540 <__aeabi_dmul>
 80052fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052fe:	ec41 0b18 	vmov	d8, r0, r1
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	f7fb f91b 	bl	8000540 <__aeabi_dmul>
 800530a:	a37d      	add	r3, pc, #500	; (adr r3, 8005500 <__ieee754_pow+0x6f0>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	4604      	mov	r4, r0
 8005312:	460d      	mov	r5, r1
 8005314:	f7fb f914 	bl	8000540 <__aeabi_dmul>
 8005318:	a37b      	add	r3, pc, #492	; (adr r3, 8005508 <__ieee754_pow+0x6f8>)
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	f7fa ff59 	bl	80001d4 <__adddf3>
 8005322:	4622      	mov	r2, r4
 8005324:	462b      	mov	r3, r5
 8005326:	f7fb f90b 	bl	8000540 <__aeabi_dmul>
 800532a:	a379      	add	r3, pc, #484	; (adr r3, 8005510 <__ieee754_pow+0x700>)
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f7fa ff50 	bl	80001d4 <__adddf3>
 8005334:	4622      	mov	r2, r4
 8005336:	462b      	mov	r3, r5
 8005338:	f7fb f902 	bl	8000540 <__aeabi_dmul>
 800533c:	a376      	add	r3, pc, #472	; (adr r3, 8005518 <__ieee754_pow+0x708>)
 800533e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005342:	f7fa ff47 	bl	80001d4 <__adddf3>
 8005346:	4622      	mov	r2, r4
 8005348:	462b      	mov	r3, r5
 800534a:	f7fb f8f9 	bl	8000540 <__aeabi_dmul>
 800534e:	a374      	add	r3, pc, #464	; (adr r3, 8005520 <__ieee754_pow+0x710>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f7fa ff3e 	bl	80001d4 <__adddf3>
 8005358:	4622      	mov	r2, r4
 800535a:	462b      	mov	r3, r5
 800535c:	f7fb f8f0 	bl	8000540 <__aeabi_dmul>
 8005360:	a371      	add	r3, pc, #452	; (adr r3, 8005528 <__ieee754_pow+0x718>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f7fa ff35 	bl	80001d4 <__adddf3>
 800536a:	4622      	mov	r2, r4
 800536c:	4606      	mov	r6, r0
 800536e:	460f      	mov	r7, r1
 8005370:	462b      	mov	r3, r5
 8005372:	4620      	mov	r0, r4
 8005374:	4629      	mov	r1, r5
 8005376:	f7fb f8e3 	bl	8000540 <__aeabi_dmul>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4630      	mov	r0, r6
 8005380:	4639      	mov	r1, r7
 8005382:	f7fb f8dd 	bl	8000540 <__aeabi_dmul>
 8005386:	4642      	mov	r2, r8
 8005388:	4604      	mov	r4, r0
 800538a:	460d      	mov	r5, r1
 800538c:	464b      	mov	r3, r9
 800538e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005392:	f7fa ff1f 	bl	80001d4 <__adddf3>
 8005396:	ec53 2b18 	vmov	r2, r3, d8
 800539a:	f7fb f8d1 	bl	8000540 <__aeabi_dmul>
 800539e:	4622      	mov	r2, r4
 80053a0:	462b      	mov	r3, r5
 80053a2:	f7fa ff17 	bl	80001d4 <__adddf3>
 80053a6:	4642      	mov	r2, r8
 80053a8:	4682      	mov	sl, r0
 80053aa:	468b      	mov	fp, r1
 80053ac:	464b      	mov	r3, r9
 80053ae:	4640      	mov	r0, r8
 80053b0:	4649      	mov	r1, r9
 80053b2:	f7fb f8c5 	bl	8000540 <__aeabi_dmul>
 80053b6:	4b6c      	ldr	r3, [pc, #432]	; (8005568 <__ieee754_pow+0x758>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	4606      	mov	r6, r0
 80053bc:	460f      	mov	r7, r1
 80053be:	f7fa ff09 	bl	80001d4 <__adddf3>
 80053c2:	4652      	mov	r2, sl
 80053c4:	465b      	mov	r3, fp
 80053c6:	f7fa ff05 	bl	80001d4 <__adddf3>
 80053ca:	9c04      	ldr	r4, [sp, #16]
 80053cc:	460d      	mov	r5, r1
 80053ce:	4622      	mov	r2, r4
 80053d0:	460b      	mov	r3, r1
 80053d2:	4640      	mov	r0, r8
 80053d4:	4649      	mov	r1, r9
 80053d6:	f7fb f8b3 	bl	8000540 <__aeabi_dmul>
 80053da:	4b63      	ldr	r3, [pc, #396]	; (8005568 <__ieee754_pow+0x758>)
 80053dc:	4680      	mov	r8, r0
 80053de:	4689      	mov	r9, r1
 80053e0:	2200      	movs	r2, #0
 80053e2:	4620      	mov	r0, r4
 80053e4:	4629      	mov	r1, r5
 80053e6:	f7fa fef3 	bl	80001d0 <__aeabi_dsub>
 80053ea:	4632      	mov	r2, r6
 80053ec:	463b      	mov	r3, r7
 80053ee:	f7fa feef 	bl	80001d0 <__aeabi_dsub>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4650      	mov	r0, sl
 80053f8:	4659      	mov	r1, fp
 80053fa:	f7fa fee9 	bl	80001d0 <__aeabi_dsub>
 80053fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005402:	f7fb f89d 	bl	8000540 <__aeabi_dmul>
 8005406:	4622      	mov	r2, r4
 8005408:	4606      	mov	r6, r0
 800540a:	460f      	mov	r7, r1
 800540c:	462b      	mov	r3, r5
 800540e:	ec51 0b18 	vmov	r0, r1, d8
 8005412:	f7fb f895 	bl	8000540 <__aeabi_dmul>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	4630      	mov	r0, r6
 800541c:	4639      	mov	r1, r7
 800541e:	f7fa fed9 	bl	80001d4 <__adddf3>
 8005422:	4606      	mov	r6, r0
 8005424:	460f      	mov	r7, r1
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4640      	mov	r0, r8
 800542c:	4649      	mov	r1, r9
 800542e:	f7fa fed1 	bl	80001d4 <__adddf3>
 8005432:	9c04      	ldr	r4, [sp, #16]
 8005434:	a33e      	add	r3, pc, #248	; (adr r3, 8005530 <__ieee754_pow+0x720>)
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	4620      	mov	r0, r4
 800543c:	460d      	mov	r5, r1
 800543e:	f7fb f87f 	bl	8000540 <__aeabi_dmul>
 8005442:	4642      	mov	r2, r8
 8005444:	ec41 0b18 	vmov	d8, r0, r1
 8005448:	464b      	mov	r3, r9
 800544a:	4620      	mov	r0, r4
 800544c:	4629      	mov	r1, r5
 800544e:	f7fa febf 	bl	80001d0 <__aeabi_dsub>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4630      	mov	r0, r6
 8005458:	4639      	mov	r1, r7
 800545a:	f7fa feb9 	bl	80001d0 <__aeabi_dsub>
 800545e:	a336      	add	r3, pc, #216	; (adr r3, 8005538 <__ieee754_pow+0x728>)
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f7fb f86c 	bl	8000540 <__aeabi_dmul>
 8005468:	a335      	add	r3, pc, #212	; (adr r3, 8005540 <__ieee754_pow+0x730>)
 800546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546e:	4606      	mov	r6, r0
 8005470:	460f      	mov	r7, r1
 8005472:	4620      	mov	r0, r4
 8005474:	4629      	mov	r1, r5
 8005476:	f7fb f863 	bl	8000540 <__aeabi_dmul>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4630      	mov	r0, r6
 8005480:	4639      	mov	r1, r7
 8005482:	f7fa fea7 	bl	80001d4 <__adddf3>
 8005486:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005488:	4b38      	ldr	r3, [pc, #224]	; (800556c <__ieee754_pow+0x75c>)
 800548a:	4413      	add	r3, r2
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	f7fa fea0 	bl	80001d4 <__adddf3>
 8005494:	4682      	mov	sl, r0
 8005496:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005498:	468b      	mov	fp, r1
 800549a:	f7fa ffe7 	bl	800046c <__aeabi_i2d>
 800549e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054a0:	4b33      	ldr	r3, [pc, #204]	; (8005570 <__ieee754_pow+0x760>)
 80054a2:	4413      	add	r3, r2
 80054a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054a8:	4606      	mov	r6, r0
 80054aa:	460f      	mov	r7, r1
 80054ac:	4652      	mov	r2, sl
 80054ae:	465b      	mov	r3, fp
 80054b0:	ec51 0b18 	vmov	r0, r1, d8
 80054b4:	f7fa fe8e 	bl	80001d4 <__adddf3>
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	f7fa fe8a 	bl	80001d4 <__adddf3>
 80054c0:	4632      	mov	r2, r6
 80054c2:	463b      	mov	r3, r7
 80054c4:	f7fa fe86 	bl	80001d4 <__adddf3>
 80054c8:	9c04      	ldr	r4, [sp, #16]
 80054ca:	4632      	mov	r2, r6
 80054cc:	463b      	mov	r3, r7
 80054ce:	4620      	mov	r0, r4
 80054d0:	460d      	mov	r5, r1
 80054d2:	f7fa fe7d 	bl	80001d0 <__aeabi_dsub>
 80054d6:	4642      	mov	r2, r8
 80054d8:	464b      	mov	r3, r9
 80054da:	f7fa fe79 	bl	80001d0 <__aeabi_dsub>
 80054de:	ec53 2b18 	vmov	r2, r3, d8
 80054e2:	f7fa fe75 	bl	80001d0 <__aeabi_dsub>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4650      	mov	r0, sl
 80054ec:	4659      	mov	r1, fp
 80054ee:	e606      	b.n	80050fe <__ieee754_pow+0x2ee>
 80054f0:	2401      	movs	r4, #1
 80054f2:	e6a0      	b.n	8005236 <__ieee754_pow+0x426>
 80054f4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005548 <__ieee754_pow+0x738>
 80054f8:	e60d      	b.n	8005116 <__ieee754_pow+0x306>
 80054fa:	bf00      	nop
 80054fc:	f3af 8000 	nop.w
 8005500:	4a454eef 	.word	0x4a454eef
 8005504:	3fca7e28 	.word	0x3fca7e28
 8005508:	93c9db65 	.word	0x93c9db65
 800550c:	3fcd864a 	.word	0x3fcd864a
 8005510:	a91d4101 	.word	0xa91d4101
 8005514:	3fd17460 	.word	0x3fd17460
 8005518:	518f264d 	.word	0x518f264d
 800551c:	3fd55555 	.word	0x3fd55555
 8005520:	db6fabff 	.word	0xdb6fabff
 8005524:	3fdb6db6 	.word	0x3fdb6db6
 8005528:	33333303 	.word	0x33333303
 800552c:	3fe33333 	.word	0x3fe33333
 8005530:	e0000000 	.word	0xe0000000
 8005534:	3feec709 	.word	0x3feec709
 8005538:	dc3a03fd 	.word	0xdc3a03fd
 800553c:	3feec709 	.word	0x3feec709
 8005540:	145b01f5 	.word	0x145b01f5
 8005544:	be3e2fe0 	.word	0xbe3e2fe0
 8005548:	00000000 	.word	0x00000000
 800554c:	3ff00000 	.word	0x3ff00000
 8005550:	7ff00000 	.word	0x7ff00000
 8005554:	43400000 	.word	0x43400000
 8005558:	0003988e 	.word	0x0003988e
 800555c:	000bb679 	.word	0x000bb679
 8005560:	08005e38 	.word	0x08005e38
 8005564:	3ff00000 	.word	0x3ff00000
 8005568:	40080000 	.word	0x40080000
 800556c:	08005e58 	.word	0x08005e58
 8005570:	08005e48 	.word	0x08005e48
 8005574:	a3b5      	add	r3, pc, #724	; (adr r3, 800584c <__ieee754_pow+0xa3c>)
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	4640      	mov	r0, r8
 800557c:	4649      	mov	r1, r9
 800557e:	f7fa fe29 	bl	80001d4 <__adddf3>
 8005582:	4622      	mov	r2, r4
 8005584:	ec41 0b1a 	vmov	d10, r0, r1
 8005588:	462b      	mov	r3, r5
 800558a:	4630      	mov	r0, r6
 800558c:	4639      	mov	r1, r7
 800558e:	f7fa fe1f 	bl	80001d0 <__aeabi_dsub>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	ec51 0b1a 	vmov	r0, r1, d10
 800559a:	f7fb fa61 	bl	8000a60 <__aeabi_dcmpgt>
 800559e:	2800      	cmp	r0, #0
 80055a0:	f47f adf8 	bne.w	8005194 <__ieee754_pow+0x384>
 80055a4:	4aa4      	ldr	r2, [pc, #656]	; (8005838 <__ieee754_pow+0xa28>)
 80055a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80055aa:	4293      	cmp	r3, r2
 80055ac:	f340 810b 	ble.w	80057c6 <__ieee754_pow+0x9b6>
 80055b0:	151b      	asrs	r3, r3, #20
 80055b2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80055b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80055ba:	fa4a f303 	asr.w	r3, sl, r3
 80055be:	445b      	add	r3, fp
 80055c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80055c4:	4e9d      	ldr	r6, [pc, #628]	; (800583c <__ieee754_pow+0xa2c>)
 80055c6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80055ca:	4116      	asrs	r6, r2
 80055cc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80055d0:	2000      	movs	r0, #0
 80055d2:	ea23 0106 	bic.w	r1, r3, r6
 80055d6:	f1c2 0214 	rsb	r2, r2, #20
 80055da:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80055de:	fa4a fa02 	asr.w	sl, sl, r2
 80055e2:	f1bb 0f00 	cmp.w	fp, #0
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4620      	mov	r0, r4
 80055ec:	4629      	mov	r1, r5
 80055ee:	bfb8      	it	lt
 80055f0:	f1ca 0a00 	rsblt	sl, sl, #0
 80055f4:	f7fa fdec 	bl	80001d0 <__aeabi_dsub>
 80055f8:	ec41 0b19 	vmov	d9, r0, r1
 80055fc:	4642      	mov	r2, r8
 80055fe:	464b      	mov	r3, r9
 8005600:	ec51 0b19 	vmov	r0, r1, d9
 8005604:	f7fa fde6 	bl	80001d4 <__adddf3>
 8005608:	2400      	movs	r4, #0
 800560a:	a379      	add	r3, pc, #484	; (adr r3, 80057f0 <__ieee754_pow+0x9e0>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	4620      	mov	r0, r4
 8005612:	460d      	mov	r5, r1
 8005614:	f7fa ff94 	bl	8000540 <__aeabi_dmul>
 8005618:	ec53 2b19 	vmov	r2, r3, d9
 800561c:	4606      	mov	r6, r0
 800561e:	460f      	mov	r7, r1
 8005620:	4620      	mov	r0, r4
 8005622:	4629      	mov	r1, r5
 8005624:	f7fa fdd4 	bl	80001d0 <__aeabi_dsub>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4640      	mov	r0, r8
 800562e:	4649      	mov	r1, r9
 8005630:	f7fa fdce 	bl	80001d0 <__aeabi_dsub>
 8005634:	a370      	add	r3, pc, #448	; (adr r3, 80057f8 <__ieee754_pow+0x9e8>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f7fa ff81 	bl	8000540 <__aeabi_dmul>
 800563e:	a370      	add	r3, pc, #448	; (adr r3, 8005800 <__ieee754_pow+0x9f0>)
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	4680      	mov	r8, r0
 8005646:	4689      	mov	r9, r1
 8005648:	4620      	mov	r0, r4
 800564a:	4629      	mov	r1, r5
 800564c:	f7fa ff78 	bl	8000540 <__aeabi_dmul>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4640      	mov	r0, r8
 8005656:	4649      	mov	r1, r9
 8005658:	f7fa fdbc 	bl	80001d4 <__adddf3>
 800565c:	4604      	mov	r4, r0
 800565e:	460d      	mov	r5, r1
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4630      	mov	r0, r6
 8005666:	4639      	mov	r1, r7
 8005668:	f7fa fdb4 	bl	80001d4 <__adddf3>
 800566c:	4632      	mov	r2, r6
 800566e:	463b      	mov	r3, r7
 8005670:	4680      	mov	r8, r0
 8005672:	4689      	mov	r9, r1
 8005674:	f7fa fdac 	bl	80001d0 <__aeabi_dsub>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4620      	mov	r0, r4
 800567e:	4629      	mov	r1, r5
 8005680:	f7fa fda6 	bl	80001d0 <__aeabi_dsub>
 8005684:	4642      	mov	r2, r8
 8005686:	4606      	mov	r6, r0
 8005688:	460f      	mov	r7, r1
 800568a:	464b      	mov	r3, r9
 800568c:	4640      	mov	r0, r8
 800568e:	4649      	mov	r1, r9
 8005690:	f7fa ff56 	bl	8000540 <__aeabi_dmul>
 8005694:	a35c      	add	r3, pc, #368	; (adr r3, 8005808 <__ieee754_pow+0x9f8>)
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	4604      	mov	r4, r0
 800569c:	460d      	mov	r5, r1
 800569e:	f7fa ff4f 	bl	8000540 <__aeabi_dmul>
 80056a2:	a35b      	add	r3, pc, #364	; (adr r3, 8005810 <__ieee754_pow+0xa00>)
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	f7fa fd92 	bl	80001d0 <__aeabi_dsub>
 80056ac:	4622      	mov	r2, r4
 80056ae:	462b      	mov	r3, r5
 80056b0:	f7fa ff46 	bl	8000540 <__aeabi_dmul>
 80056b4:	a358      	add	r3, pc, #352	; (adr r3, 8005818 <__ieee754_pow+0xa08>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f7fa fd8b 	bl	80001d4 <__adddf3>
 80056be:	4622      	mov	r2, r4
 80056c0:	462b      	mov	r3, r5
 80056c2:	f7fa ff3d 	bl	8000540 <__aeabi_dmul>
 80056c6:	a356      	add	r3, pc, #344	; (adr r3, 8005820 <__ieee754_pow+0xa10>)
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f7fa fd80 	bl	80001d0 <__aeabi_dsub>
 80056d0:	4622      	mov	r2, r4
 80056d2:	462b      	mov	r3, r5
 80056d4:	f7fa ff34 	bl	8000540 <__aeabi_dmul>
 80056d8:	a353      	add	r3, pc, #332	; (adr r3, 8005828 <__ieee754_pow+0xa18>)
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f7fa fd79 	bl	80001d4 <__adddf3>
 80056e2:	4622      	mov	r2, r4
 80056e4:	462b      	mov	r3, r5
 80056e6:	f7fa ff2b 	bl	8000540 <__aeabi_dmul>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4640      	mov	r0, r8
 80056f0:	4649      	mov	r1, r9
 80056f2:	f7fa fd6d 	bl	80001d0 <__aeabi_dsub>
 80056f6:	4604      	mov	r4, r0
 80056f8:	460d      	mov	r5, r1
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4640      	mov	r0, r8
 8005700:	4649      	mov	r1, r9
 8005702:	f7fa ff1d 	bl	8000540 <__aeabi_dmul>
 8005706:	2200      	movs	r2, #0
 8005708:	ec41 0b19 	vmov	d9, r0, r1
 800570c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005710:	4620      	mov	r0, r4
 8005712:	4629      	mov	r1, r5
 8005714:	f7fa fd5c 	bl	80001d0 <__aeabi_dsub>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	ec51 0b19 	vmov	r0, r1, d9
 8005720:	f7fb f838 	bl	8000794 <__aeabi_ddiv>
 8005724:	4632      	mov	r2, r6
 8005726:	4604      	mov	r4, r0
 8005728:	460d      	mov	r5, r1
 800572a:	463b      	mov	r3, r7
 800572c:	4640      	mov	r0, r8
 800572e:	4649      	mov	r1, r9
 8005730:	f7fa ff06 	bl	8000540 <__aeabi_dmul>
 8005734:	4632      	mov	r2, r6
 8005736:	463b      	mov	r3, r7
 8005738:	f7fa fd4c 	bl	80001d4 <__adddf3>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4620      	mov	r0, r4
 8005742:	4629      	mov	r1, r5
 8005744:	f7fa fd44 	bl	80001d0 <__aeabi_dsub>
 8005748:	4642      	mov	r2, r8
 800574a:	464b      	mov	r3, r9
 800574c:	f7fa fd40 	bl	80001d0 <__aeabi_dsub>
 8005750:	460b      	mov	r3, r1
 8005752:	4602      	mov	r2, r0
 8005754:	493a      	ldr	r1, [pc, #232]	; (8005840 <__ieee754_pow+0xa30>)
 8005756:	2000      	movs	r0, #0
 8005758:	f7fa fd3a 	bl	80001d0 <__aeabi_dsub>
 800575c:	e9cd 0100 	strd	r0, r1, [sp]
 8005760:	9b01      	ldr	r3, [sp, #4]
 8005762:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800576a:	da2f      	bge.n	80057cc <__ieee754_pow+0x9bc>
 800576c:	4650      	mov	r0, sl
 800576e:	ed9d 0b00 	vldr	d0, [sp]
 8005772:	f000 f9cd 	bl	8005b10 <scalbn>
 8005776:	ec51 0b10 	vmov	r0, r1, d0
 800577a:	ec53 2b18 	vmov	r2, r3, d8
 800577e:	f7ff bbe0 	b.w	8004f42 <__ieee754_pow+0x132>
 8005782:	4b30      	ldr	r3, [pc, #192]	; (8005844 <__ieee754_pow+0xa34>)
 8005784:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005788:	429e      	cmp	r6, r3
 800578a:	f77f af0b 	ble.w	80055a4 <__ieee754_pow+0x794>
 800578e:	4b2e      	ldr	r3, [pc, #184]	; (8005848 <__ieee754_pow+0xa38>)
 8005790:	440b      	add	r3, r1
 8005792:	4303      	orrs	r3, r0
 8005794:	d00b      	beq.n	80057ae <__ieee754_pow+0x99e>
 8005796:	a326      	add	r3, pc, #152	; (adr r3, 8005830 <__ieee754_pow+0xa20>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	ec51 0b18 	vmov	r0, r1, d8
 80057a0:	f7fa fece 	bl	8000540 <__aeabi_dmul>
 80057a4:	a322      	add	r3, pc, #136	; (adr r3, 8005830 <__ieee754_pow+0xa20>)
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f7ff bbca 	b.w	8004f42 <__ieee754_pow+0x132>
 80057ae:	4622      	mov	r2, r4
 80057b0:	462b      	mov	r3, r5
 80057b2:	f7fa fd0d 	bl	80001d0 <__aeabi_dsub>
 80057b6:	4642      	mov	r2, r8
 80057b8:	464b      	mov	r3, r9
 80057ba:	f7fb f947 	bl	8000a4c <__aeabi_dcmpge>
 80057be:	2800      	cmp	r0, #0
 80057c0:	f43f aef0 	beq.w	80055a4 <__ieee754_pow+0x794>
 80057c4:	e7e7      	b.n	8005796 <__ieee754_pow+0x986>
 80057c6:	f04f 0a00 	mov.w	sl, #0
 80057ca:	e717      	b.n	80055fc <__ieee754_pow+0x7ec>
 80057cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057d0:	4619      	mov	r1, r3
 80057d2:	e7d2      	b.n	800577a <__ieee754_pow+0x96a>
 80057d4:	491a      	ldr	r1, [pc, #104]	; (8005840 <__ieee754_pow+0xa30>)
 80057d6:	2000      	movs	r0, #0
 80057d8:	f7ff bb9e 	b.w	8004f18 <__ieee754_pow+0x108>
 80057dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057e0:	f7ff bb9a 	b.w	8004f18 <__ieee754_pow+0x108>
 80057e4:	9000      	str	r0, [sp, #0]
 80057e6:	f7ff bb76 	b.w	8004ed6 <__ieee754_pow+0xc6>
 80057ea:	2100      	movs	r1, #0
 80057ec:	f7ff bb60 	b.w	8004eb0 <__ieee754_pow+0xa0>
 80057f0:	00000000 	.word	0x00000000
 80057f4:	3fe62e43 	.word	0x3fe62e43
 80057f8:	fefa39ef 	.word	0xfefa39ef
 80057fc:	3fe62e42 	.word	0x3fe62e42
 8005800:	0ca86c39 	.word	0x0ca86c39
 8005804:	be205c61 	.word	0xbe205c61
 8005808:	72bea4d0 	.word	0x72bea4d0
 800580c:	3e663769 	.word	0x3e663769
 8005810:	c5d26bf1 	.word	0xc5d26bf1
 8005814:	3ebbbd41 	.word	0x3ebbbd41
 8005818:	af25de2c 	.word	0xaf25de2c
 800581c:	3f11566a 	.word	0x3f11566a
 8005820:	16bebd93 	.word	0x16bebd93
 8005824:	3f66c16c 	.word	0x3f66c16c
 8005828:	5555553e 	.word	0x5555553e
 800582c:	3fc55555 	.word	0x3fc55555
 8005830:	c2f8f359 	.word	0xc2f8f359
 8005834:	01a56e1f 	.word	0x01a56e1f
 8005838:	3fe00000 	.word	0x3fe00000
 800583c:	000fffff 	.word	0x000fffff
 8005840:	3ff00000 	.word	0x3ff00000
 8005844:	4090cbff 	.word	0x4090cbff
 8005848:	3f6f3400 	.word	0x3f6f3400
 800584c:	652b82fe 	.word	0x652b82fe
 8005850:	3c971547 	.word	0x3c971547

08005854 <__ieee754_sqrt>:
 8005854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005858:	ec55 4b10 	vmov	r4, r5, d0
 800585c:	4e56      	ldr	r6, [pc, #344]	; (80059b8 <__ieee754_sqrt+0x164>)
 800585e:	43ae      	bics	r6, r5
 8005860:	ee10 0a10 	vmov	r0, s0
 8005864:	ee10 3a10 	vmov	r3, s0
 8005868:	4629      	mov	r1, r5
 800586a:	462a      	mov	r2, r5
 800586c:	d110      	bne.n	8005890 <__ieee754_sqrt+0x3c>
 800586e:	ee10 2a10 	vmov	r2, s0
 8005872:	462b      	mov	r3, r5
 8005874:	f7fa fe64 	bl	8000540 <__aeabi_dmul>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4620      	mov	r0, r4
 800587e:	4629      	mov	r1, r5
 8005880:	f7fa fca8 	bl	80001d4 <__adddf3>
 8005884:	4604      	mov	r4, r0
 8005886:	460d      	mov	r5, r1
 8005888:	ec45 4b10 	vmov	d0, r4, r5
 800588c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005890:	2d00      	cmp	r5, #0
 8005892:	dc10      	bgt.n	80058b6 <__ieee754_sqrt+0x62>
 8005894:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005898:	4330      	orrs	r0, r6
 800589a:	d0f5      	beq.n	8005888 <__ieee754_sqrt+0x34>
 800589c:	b15d      	cbz	r5, 80058b6 <__ieee754_sqrt+0x62>
 800589e:	ee10 2a10 	vmov	r2, s0
 80058a2:	462b      	mov	r3, r5
 80058a4:	ee10 0a10 	vmov	r0, s0
 80058a8:	f7fa fc92 	bl	80001d0 <__aeabi_dsub>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	f7fa ff70 	bl	8000794 <__aeabi_ddiv>
 80058b4:	e7e6      	b.n	8005884 <__ieee754_sqrt+0x30>
 80058b6:	1509      	asrs	r1, r1, #20
 80058b8:	d076      	beq.n	80059a8 <__ieee754_sqrt+0x154>
 80058ba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80058be:	07ce      	lsls	r6, r1, #31
 80058c0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80058c4:	bf5e      	ittt	pl
 80058c6:	0fda      	lsrpl	r2, r3, #31
 80058c8:	005b      	lslpl	r3, r3, #1
 80058ca:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80058ce:	0fda      	lsrs	r2, r3, #31
 80058d0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80058d4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80058d8:	2000      	movs	r0, #0
 80058da:	106d      	asrs	r5, r5, #1
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	f04f 0e16 	mov.w	lr, #22
 80058e2:	4684      	mov	ip, r0
 80058e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058e8:	eb0c 0401 	add.w	r4, ip, r1
 80058ec:	4294      	cmp	r4, r2
 80058ee:	bfde      	ittt	le
 80058f0:	1b12      	suble	r2, r2, r4
 80058f2:	eb04 0c01 	addle.w	ip, r4, r1
 80058f6:	1840      	addle	r0, r0, r1
 80058f8:	0052      	lsls	r2, r2, #1
 80058fa:	f1be 0e01 	subs.w	lr, lr, #1
 80058fe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005902:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005906:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800590a:	d1ed      	bne.n	80058e8 <__ieee754_sqrt+0x94>
 800590c:	4671      	mov	r1, lr
 800590e:	2720      	movs	r7, #32
 8005910:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005914:	4562      	cmp	r2, ip
 8005916:	eb04 060e 	add.w	r6, r4, lr
 800591a:	dc02      	bgt.n	8005922 <__ieee754_sqrt+0xce>
 800591c:	d113      	bne.n	8005946 <__ieee754_sqrt+0xf2>
 800591e:	429e      	cmp	r6, r3
 8005920:	d811      	bhi.n	8005946 <__ieee754_sqrt+0xf2>
 8005922:	2e00      	cmp	r6, #0
 8005924:	eb06 0e04 	add.w	lr, r6, r4
 8005928:	da43      	bge.n	80059b2 <__ieee754_sqrt+0x15e>
 800592a:	f1be 0f00 	cmp.w	lr, #0
 800592e:	db40      	blt.n	80059b2 <__ieee754_sqrt+0x15e>
 8005930:	f10c 0801 	add.w	r8, ip, #1
 8005934:	eba2 020c 	sub.w	r2, r2, ip
 8005938:	429e      	cmp	r6, r3
 800593a:	bf88      	it	hi
 800593c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8005940:	1b9b      	subs	r3, r3, r6
 8005942:	4421      	add	r1, r4
 8005944:	46c4      	mov	ip, r8
 8005946:	0052      	lsls	r2, r2, #1
 8005948:	3f01      	subs	r7, #1
 800594a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800594e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005952:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005956:	d1dd      	bne.n	8005914 <__ieee754_sqrt+0xc0>
 8005958:	4313      	orrs	r3, r2
 800595a:	d006      	beq.n	800596a <__ieee754_sqrt+0x116>
 800595c:	1c4c      	adds	r4, r1, #1
 800595e:	bf13      	iteet	ne
 8005960:	3101      	addne	r1, #1
 8005962:	3001      	addeq	r0, #1
 8005964:	4639      	moveq	r1, r7
 8005966:	f021 0101 	bicne.w	r1, r1, #1
 800596a:	1043      	asrs	r3, r0, #1
 800596c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005970:	0849      	lsrs	r1, r1, #1
 8005972:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005976:	07c2      	lsls	r2, r0, #31
 8005978:	bf48      	it	mi
 800597a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800597e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8005982:	460c      	mov	r4, r1
 8005984:	463d      	mov	r5, r7
 8005986:	e77f      	b.n	8005888 <__ieee754_sqrt+0x34>
 8005988:	0ada      	lsrs	r2, r3, #11
 800598a:	3815      	subs	r0, #21
 800598c:	055b      	lsls	r3, r3, #21
 800598e:	2a00      	cmp	r2, #0
 8005990:	d0fa      	beq.n	8005988 <__ieee754_sqrt+0x134>
 8005992:	02d7      	lsls	r7, r2, #11
 8005994:	d50a      	bpl.n	80059ac <__ieee754_sqrt+0x158>
 8005996:	f1c1 0420 	rsb	r4, r1, #32
 800599a:	fa23 f404 	lsr.w	r4, r3, r4
 800599e:	1e4d      	subs	r5, r1, #1
 80059a0:	408b      	lsls	r3, r1
 80059a2:	4322      	orrs	r2, r4
 80059a4:	1b41      	subs	r1, r0, r5
 80059a6:	e788      	b.n	80058ba <__ieee754_sqrt+0x66>
 80059a8:	4608      	mov	r0, r1
 80059aa:	e7f0      	b.n	800598e <__ieee754_sqrt+0x13a>
 80059ac:	0052      	lsls	r2, r2, #1
 80059ae:	3101      	adds	r1, #1
 80059b0:	e7ef      	b.n	8005992 <__ieee754_sqrt+0x13e>
 80059b2:	46e0      	mov	r8, ip
 80059b4:	e7be      	b.n	8005934 <__ieee754_sqrt+0xe0>
 80059b6:	bf00      	nop
 80059b8:	7ff00000 	.word	0x7ff00000

080059bc <fabs>:
 80059bc:	ec51 0b10 	vmov	r0, r1, d0
 80059c0:	ee10 2a10 	vmov	r2, s0
 80059c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059c8:	ec43 2b10 	vmov	d0, r2, r3
 80059cc:	4770      	bx	lr

080059ce <finite>:
 80059ce:	b082      	sub	sp, #8
 80059d0:	ed8d 0b00 	vstr	d0, [sp]
 80059d4:	9801      	ldr	r0, [sp, #4]
 80059d6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80059da:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80059de:	0fc0      	lsrs	r0, r0, #31
 80059e0:	b002      	add	sp, #8
 80059e2:	4770      	bx	lr
 80059e4:	0000      	movs	r0, r0
	...

080059e8 <nan>:
 80059e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80059f0 <nan+0x8>
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	00000000 	.word	0x00000000
 80059f4:	7ff80000 	.word	0x7ff80000

080059f8 <rint>:
 80059f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059fa:	ec51 0b10 	vmov	r0, r1, d0
 80059fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a02:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005a06:	2e13      	cmp	r6, #19
 8005a08:	ee10 4a10 	vmov	r4, s0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005a12:	dc58      	bgt.n	8005ac6 <rint+0xce>
 8005a14:	2e00      	cmp	r6, #0
 8005a16:	da2b      	bge.n	8005a70 <rint+0x78>
 8005a18:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005a1c:	4302      	orrs	r2, r0
 8005a1e:	d023      	beq.n	8005a68 <rint+0x70>
 8005a20:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005a24:	4302      	orrs	r2, r0
 8005a26:	4254      	negs	r4, r2
 8005a28:	4314      	orrs	r4, r2
 8005a2a:	0c4b      	lsrs	r3, r1, #17
 8005a2c:	0b24      	lsrs	r4, r4, #12
 8005a2e:	045b      	lsls	r3, r3, #17
 8005a30:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005a34:	ea44 0103 	orr.w	r1, r4, r3
 8005a38:	4b32      	ldr	r3, [pc, #200]	; (8005b04 <rint+0x10c>)
 8005a3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005a3e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	4630      	mov	r0, r6
 8005a48:	4639      	mov	r1, r7
 8005a4a:	f7fa fbc3 	bl	80001d4 <__adddf3>
 8005a4e:	e9cd 0100 	strd	r0, r1, [sp]
 8005a52:	463b      	mov	r3, r7
 8005a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a58:	4632      	mov	r2, r6
 8005a5a:	f7fa fbb9 	bl	80001d0 <__aeabi_dsub>
 8005a5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a62:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005a66:	4639      	mov	r1, r7
 8005a68:	ec41 0b10 	vmov	d0, r0, r1
 8005a6c:	b003      	add	sp, #12
 8005a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a70:	4a25      	ldr	r2, [pc, #148]	; (8005b08 <rint+0x110>)
 8005a72:	4132      	asrs	r2, r6
 8005a74:	ea01 0702 	and.w	r7, r1, r2
 8005a78:	4307      	orrs	r7, r0
 8005a7a:	d0f5      	beq.n	8005a68 <rint+0x70>
 8005a7c:	0851      	lsrs	r1, r2, #1
 8005a7e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8005a82:	4314      	orrs	r4, r2
 8005a84:	d00c      	beq.n	8005aa0 <rint+0xa8>
 8005a86:	ea23 0201 	bic.w	r2, r3, r1
 8005a8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005a8e:	2e13      	cmp	r6, #19
 8005a90:	fa43 f606 	asr.w	r6, r3, r6
 8005a94:	bf0c      	ite	eq
 8005a96:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005a9a:	2400      	movne	r4, #0
 8005a9c:	ea42 0306 	orr.w	r3, r2, r6
 8005aa0:	4918      	ldr	r1, [pc, #96]	; (8005b04 <rint+0x10c>)
 8005aa2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005aac:	4620      	mov	r0, r4
 8005aae:	4629      	mov	r1, r5
 8005ab0:	f7fa fb90 	bl	80001d4 <__adddf3>
 8005ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8005ab8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005abc:	4622      	mov	r2, r4
 8005abe:	462b      	mov	r3, r5
 8005ac0:	f7fa fb86 	bl	80001d0 <__aeabi_dsub>
 8005ac4:	e7d0      	b.n	8005a68 <rint+0x70>
 8005ac6:	2e33      	cmp	r6, #51	; 0x33
 8005ac8:	dd07      	ble.n	8005ada <rint+0xe2>
 8005aca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005ace:	d1cb      	bne.n	8005a68 <rint+0x70>
 8005ad0:	ee10 2a10 	vmov	r2, s0
 8005ad4:	f7fa fb7e 	bl	80001d4 <__adddf3>
 8005ad8:	e7c6      	b.n	8005a68 <rint+0x70>
 8005ada:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005ade:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005ae2:	40d6      	lsrs	r6, r2
 8005ae4:	4230      	tst	r0, r6
 8005ae6:	d0bf      	beq.n	8005a68 <rint+0x70>
 8005ae8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8005aec:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8005af0:	bf1f      	itttt	ne
 8005af2:	ea24 0101 	bicne.w	r1, r4, r1
 8005af6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005afa:	fa44 f202 	asrne.w	r2, r4, r2
 8005afe:	ea41 0402 	orrne.w	r4, r1, r2
 8005b02:	e7cd      	b.n	8005aa0 <rint+0xa8>
 8005b04:	08005e68 	.word	0x08005e68
 8005b08:	000fffff 	.word	0x000fffff
 8005b0c:	00000000 	.word	0x00000000

08005b10 <scalbn>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	ec55 4b10 	vmov	r4, r5, d0
 8005b16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	462b      	mov	r3, r5
 8005b1e:	b99a      	cbnz	r2, 8005b48 <scalbn+0x38>
 8005b20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005b24:	4323      	orrs	r3, r4
 8005b26:	d036      	beq.n	8005b96 <scalbn+0x86>
 8005b28:	4b39      	ldr	r3, [pc, #228]	; (8005c10 <scalbn+0x100>)
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	ee10 0a10 	vmov	r0, s0
 8005b30:	2200      	movs	r2, #0
 8005b32:	f7fa fd05 	bl	8000540 <__aeabi_dmul>
 8005b36:	4b37      	ldr	r3, [pc, #220]	; (8005c14 <scalbn+0x104>)
 8005b38:	429e      	cmp	r6, r3
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	460d      	mov	r5, r1
 8005b3e:	da10      	bge.n	8005b62 <scalbn+0x52>
 8005b40:	a32b      	add	r3, pc, #172	; (adr r3, 8005bf0 <scalbn+0xe0>)
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	e03a      	b.n	8005bbe <scalbn+0xae>
 8005b48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005b4c:	428a      	cmp	r2, r1
 8005b4e:	d10c      	bne.n	8005b6a <scalbn+0x5a>
 8005b50:	ee10 2a10 	vmov	r2, s0
 8005b54:	4620      	mov	r0, r4
 8005b56:	4629      	mov	r1, r5
 8005b58:	f7fa fb3c 	bl	80001d4 <__adddf3>
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	460d      	mov	r5, r1
 8005b60:	e019      	b.n	8005b96 <scalbn+0x86>
 8005b62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b66:	460b      	mov	r3, r1
 8005b68:	3a36      	subs	r2, #54	; 0x36
 8005b6a:	4432      	add	r2, r6
 8005b6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005b70:	428a      	cmp	r2, r1
 8005b72:	dd08      	ble.n	8005b86 <scalbn+0x76>
 8005b74:	2d00      	cmp	r5, #0
 8005b76:	a120      	add	r1, pc, #128	; (adr r1, 8005bf8 <scalbn+0xe8>)
 8005b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b7c:	da1c      	bge.n	8005bb8 <scalbn+0xa8>
 8005b7e:	a120      	add	r1, pc, #128	; (adr r1, 8005c00 <scalbn+0xf0>)
 8005b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b84:	e018      	b.n	8005bb8 <scalbn+0xa8>
 8005b86:	2a00      	cmp	r2, #0
 8005b88:	dd08      	ble.n	8005b9c <scalbn+0x8c>
 8005b8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b96:	ec45 4b10 	vmov	d0, r4, r5
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005ba0:	da19      	bge.n	8005bd6 <scalbn+0xc6>
 8005ba2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005ba6:	429e      	cmp	r6, r3
 8005ba8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005bac:	dd0a      	ble.n	8005bc4 <scalbn+0xb4>
 8005bae:	a112      	add	r1, pc, #72	; (adr r1, 8005bf8 <scalbn+0xe8>)
 8005bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e2      	bne.n	8005b7e <scalbn+0x6e>
 8005bb8:	a30f      	add	r3, pc, #60	; (adr r3, 8005bf8 <scalbn+0xe8>)
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	f7fa fcbf 	bl	8000540 <__aeabi_dmul>
 8005bc2:	e7cb      	b.n	8005b5c <scalbn+0x4c>
 8005bc4:	a10a      	add	r1, pc, #40	; (adr r1, 8005bf0 <scalbn+0xe0>)
 8005bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0b8      	beq.n	8005b40 <scalbn+0x30>
 8005bce:	a10e      	add	r1, pc, #56	; (adr r1, 8005c08 <scalbn+0xf8>)
 8005bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bd4:	e7b4      	b.n	8005b40 <scalbn+0x30>
 8005bd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005bda:	3236      	adds	r2, #54	; 0x36
 8005bdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005be0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005be4:	4620      	mov	r0, r4
 8005be6:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <scalbn+0x108>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	e7e8      	b.n	8005bbe <scalbn+0xae>
 8005bec:	f3af 8000 	nop.w
 8005bf0:	c2f8f359 	.word	0xc2f8f359
 8005bf4:	01a56e1f 	.word	0x01a56e1f
 8005bf8:	8800759c 	.word	0x8800759c
 8005bfc:	7e37e43c 	.word	0x7e37e43c
 8005c00:	8800759c 	.word	0x8800759c
 8005c04:	fe37e43c 	.word	0xfe37e43c
 8005c08:	c2f8f359 	.word	0xc2f8f359
 8005c0c:	81a56e1f 	.word	0x81a56e1f
 8005c10:	43500000 	.word	0x43500000
 8005c14:	ffff3cb0 	.word	0xffff3cb0
 8005c18:	3c900000 	.word	0x3c900000

08005c1c <__errno>:
 8005c1c:	4b01      	ldr	r3, [pc, #4]	; (8005c24 <__errno+0x8>)
 8005c1e:	6818      	ldr	r0, [r3, #0]
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20000020 	.word	0x20000020

08005c28 <_init>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	bf00      	nop
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr

08005c34 <_fini>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr
>>>>>>> 9b971f868b196d6de965df2a872df060ba71a2ec
